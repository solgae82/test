- 변수 종류
	- 멤버변수 : 인스턴스 변수, 클래스 변수로 나뉜다. 
		class A{
			int num; // 인스턴스 변수
			static String str; // 클래스 변수
		}

		- 인스턴스 변수 : A a = new A(); 로 객체를 만들어서 접근하는 변수		
		- 클래스 변수 : A.str 로 바로 접근 가능한 변수

	- 지역 변수 : 메소드 안에서 선언되는 변수. 메소드 영역에 한정됨.

- JVM 메모리 구조
	- Method Area : 클래스 변수, 클래스 정보등
	- Heap : 인스턴스 , 인스턴스 변수등
	- Call Stack : 메서드, 지역변수 등



- 가변인자 매개변수 
	형식 :  void test(int a, String... str){}

	- 타입 + '...' + 변수명
	- 매개변수의 맨 마지막에 정의한다
	- 인자가 없이 호출 가능하고, 같은 type의 배열도 가능하다
	- 기본적으로 배열의 형식과 비슷하다

	호출 : 
		test(1 , "Hello " ,"World");
		test(1); 

- 생성자 (constructor)

	- 생성자 이름은 클래스명과 같아야 한다,.
	- 반환 타입은 없어야 한다(void도 안됨)
	- 기본생성자는 생성자가 하나도 정의되지 않았을때, 컴파일러가 자동으로 추가해준다.
	  (물론 직접 명시적으로 정의해도 된다.)
	- 생성자를 코딩하지 않았고, 클래스 접근제어자가 public 이면 'public test(){}' 형식의 생성자가 자동 추가된다.
	- 생성자에서 다른 생성자 호출시 this() 형식의 다른 생성자 호출을 한다.(반드시 첫 출에서 this() 호출을 해야한다)

- this, this()
	- new 키워드로 인스턴스를 생성하면 this 라는 키워드로 그 인스턴스를 내부적으로 참조한다
	- 모드 인스턴스 메서드에 지역변수로 숨겨진 채로 존재한다
	- this() 는 생성한 인스턴스의 생성자를 호출하는 것이다. 인스턴스의 다른 생성자를 호출할때 사용한다.
		- 생성자에서 다른 생성자를 호출할때는 반드시 첫 줄에서만 호출이 가능하다
		class A(){
			int a;
			int b;

			A(){
				this(10); // A(10) 호출
				this.b = 20;

			}
			
			A(int a){
				this.a = a;
				this.b = 30;
			}
		}

		public B(){
			public static void main(String[] args) throws Exception {
				A ins = new A();

				System.out.println(ins.a); //10
				System.out.println(ins.b); //20
			}
		}
		

- 멤버변수 초기화 방법
	1) 명시적 초기화
	2) 생성자
	3) 초기화블럭 
		- 인스턴스 초기화 블록
		- 클래스 초기화 블록

	ex) 
		class A{
			int a = 4; //명시적 초기화
			Engine en = new Engine();// 명시적 초기화
			
			static {a = 5;} // 클래스 초기화 블록

			{a = 6;} // 인스턴스 초기화 블록
			
		}

	- 멤버변수 초기화 순서
		- 클래스변수 : 기본값 -> 명시적초기화 -> 클래스 초기화 블록
		- 인스턴스변수 : 기본값 -> 명시적초기화 -> 인스턴스 초기화 블록 -> 생성자



- public 클래스
	하나의 소스파일(.java)에는 public 클래스가 한개만 존재 가능하고 그 클래스 이름과 파일명과 같아야 한다.

-------------------------------------------------상속

	- 상속가능한 클래스를 부모클래스로 하고 'extends' 키워드로 상속한다
		class A{}
		class B extends A{}

	- 아무것도 상송하지 않은 클래스라면 컴파일시 'extends Object' 문장이 자동으로 붙는다.
		class A{}
		// 컴파일 후 : 
		class A extends Object{}

	- 생성자와 초기화 블록은 상속되지 않는다. 멤버만 상속된다.
	- 자식 클래스의 멤버 갯수는 조상 클래스보다 같거나 많다.
	- 자바는 다중상속이 금지되어 있다.(한개 클래스만 상속가능)
	- 부모클래스에 final 이 붙으면, 상속할 수 없는 클래스가 된다.
	- 부모클래스 메소드에 final이 붙으면, overriding 할 수 없다.
	- 부모클래스 멤버변수에 final이 붙으면 값을 변경할 수 없는 상수가 된다.

상속 or 포함 관계
	is-a(상속) , has-a(포함) 관계로 부른다.
	- is-a (상속) 관계
		원은 도형(Shape)이다 : Circle is a Shape (어울린다)
		class Circle extends Shape{
			
		}
	- has-a (포함) 관계
		원은 점을 가지고 있다 : Circle has a Point (어울린다)
		class Circle{
			Point p = new Point();
		}

	인간의 언어로 해석해보면, 
	
	원과 도형은 도형이 더 큰 추상적 존재고 그 추상적인 형태를 자세히 구현한 원이라는 형태가 있다
	이런 경우는 도형을 상속해서 더 자세한 하나의 형태를 만드는 상속이 어울린다

	원과 점은 포함관계로 묶어줘야 어울린다.. 말로 풀어보면 그렇다 (논리적으로 성립한다)
	
	안 어울리는 다음의 경우를 보자

		원은 점이다 : Circle is a Point (안 어울린다, 언어적 놀리가 성립되지 않는다)
		class Circle extends Point{
			//상속 구현 가능하지만, 인간의 언어적 논리와 비교해 보면 어울리지 않는다..
		}
	
	이렇게 어울릴 경우를 사람의 언어로 구현해서 is-a , has-a 관계를 비교해 보고 어울리는 관계로 구조를 잡으면 좋다.

- Overeloading : 부모 클래스를 상속받은 자식 클래스에서 이름이 같은 메서드를 지정하는 방법. 
	- 메서드 이름이 같아야 한다
	- 매개변수 개수 또는 타입이 달라야 한다
	- 반환 타입은 영향을 미치지 않는다. 

	void test(int a , long b){}
	void test(int a , int b) {}
	int test(int a){}

- Overriding : 상속받은 클래스의 특정 메서드를 다시 재구현하는 것.
	- 메서드 이름이 같아야 한다
	- 매개변수가 같아야 한다
	- 반환타입이 같아야 한다
	- 접근제어자는 부모클래스 보다 좁은 범위로 변경 할 수 없다.
		public > protected > default > private

	- 부모 클래스 메서드에 정의된 예외의 갯수 보다 많은 수의 예외를 선언할 수 없다.
	(부모 클래스 메서드 예외 갯수보다 적거나 같아야 한다)
		
		예를 들어 이런 예외 클래스의 계보가 있다면..

			Exception(root Exception)
				- e1
					- e3
						- e4
						- e5
						- e6
				- e2
					- e7
						- e9
							- e10
					- e8
			
			위와 같은 상속된 구조의 Exception 구조의 root Exception 이 처리할 수 있는 예외의 갯수는
			본인 포함해서 11개이다

			e9 Exception 이 처리할 수 있는 예외 갯수는 본인 포함해서 2개다.

			부모클래스)

				void a() throws e7 {} // 처리가능 예외(e7,e9,e10),총3개

			자식클래스)
				void a() throws e3 {} // 처리가능 예외(e3, e4, e5, e6),총 4개 (X)
				void a() throws e4 {} // 처리가능 예외(e4),총 1개 (O) , 가능

		실전 예제....................

		부모클래스)
			void a() throws IOException, SQLException{}
		자식클래스)
			void a() throws IOException{} // 가능

			void a() throws Exception{} // Exception 예외는 모든 예외를 처리 할 수 있으므로 처리 가능 갯수가 가장 많다, 불가능
			
	- 인스턴스 메서드 <=> static 메서드 변경의 overriding은 할 수 없다.
	- 부모의 static 메서드를 자식에서 재정의 하는 것은 얼핏 생각하면 오버라이딩 같지만, 자식 클래스에 새로 추가되는 메소드일 뿐이다
		(static A.a(){} ,  static  B.a(){} 는 각 클래스에 정의된 클래스 메서드일 뿐이다.)

- super, super()
	- super는 자손클래스에서 부모 클래스로부터 상속받은 멤버를 참조할때 사용되는 부모 인스턴스 참조 변수(키워드) 
		(this는 자신 클래스 인스턴스 참조, super는 부모 클래스 인스턴스 참조변수)

	- 당연히 static 메서드에서는 사용 불가(인스턴스에서만 사용 가능)

	- super()
		this()와 마찬가지로 생성자이다, 단 부모클래스의 생성자를 의미한다.
		객체지향은 기본적으로 자식클래스의 인스턴스를 생성하면서, 부모 부모의 부모...등 최고 조상 클래스의 생성자까지 모두 호출하는 매카니즘을 구현하게끔 되어있다.
		그러므로 명시적으로 호출하던가, 호출하지 않고 기본으로 구현했다면 컴파일러가 자동으로 현 클래스의 생성자에 부모 생성자를 자동으로 붙여주는 매카니즘이 있을 것이다.
		
		실제로 그러하다
		아래 문장이 생성자 구현 매카니즘을 압축적으로 표현한 문장이다

		"Object 클래스를 제외한 모든 클래스는 생성자 첫 줄에 this(), 또는 super()를 호출해야 한다.
		만약 정의하지 않았다면 컴파일러가 자동적으로 'super();' 를 첫줄에 추가한다"

- package 
	
	클래스가 물리적인 하나의 클래스 파일(.class)인 것처럼 패키지는 물리적으로 하나의 디렉토리이다

	- 하나의 소스파일에는 첫 번째 문장으로 단 한번의 패키지 선언만을 허용
	- 모든 클래스는 반드시 하나의 패키지에 속해야 한다(정하지 않으면 '이름없는 패키지(unnamed package)'소속이 된다)
	- 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.
	- 패키지는 물리적으로 클래스파일을 포함하는 하나의 디렉토리이다
	구조)

		pakage com.solgae.basic
		import ..
		class A{}

	- 패키지 컴파일 
		-d 옵션 : 컴파일시 패키지(디렉토리)에 자동 넣어주는 옵션, 패키지 디렉토리가 없으면 자동 생성한다.
				
				C:\javac -d . A.java // 현재 디렉토리에 패키지를 생성한다
			
			제어판 > 시스템 > 고급 시스템 설정 > 환경변수 > 새로 만들기로 'CLASSPATH'변수를 추가하여
			패키지의 루트 디렉토리를 추가해야 jvm이 검색할 수 있다.
				
				.;C:\work

			세미콜론으로 경로 구분자를 두고 추가하면 된다.
			'.;' 추가한 이유는 java명령어로 실행시 실행하는 위치의 디렉토리를 기본으로 포함하기 위해서다.

			CLASSPATH에 jar파일을 인식 시키기 위해서는 .jar 파일명까지 입력해야 한다
				
				.;C:\work;C:\work\lib\com.solgae.basic.jar

			echo 명령어로 시스템에 설정된 CLASSPATH 검색하기
				
				C:\echo %CLASSPATH% 

		-cp : java 명령어로 프로그램 실행시 일시적으로 classpath(cp) 지정하고 실행시키기
				
				C:java -cp C:work\lib\coms.solgae.basic.jar A
			
- import
	
	형식 : 
		import 패키지명.클래스명;
		import 패키지명.*;

	같은 패키지 내의 클래스들은 import문을 생략할 수 있다.
	모든 클래스들은 자동으로 'import java.lang.*;' 가 되어 있다.
	* 를 사용하면 컴파일러가 해당 퍠키에서 검색하는데 시간이 더 걸릴 뿐이다.실행시에는 성능상의 차이는 없다.
	* 는 해당위치의 클래스 파일들까지 검색한다. 하위에 있는 또 다른 퍠키지를 검색하진 않는다.
		
		패키지구조)
		com(디렉토리)
			- solage(디렉토리) 
				A.class
				B.class
				- basic (디렉토리)
					C.class

		import문)
		import com.solgae.*;
	
		위와 같다면 A,B 클래스까지만 import 한 것이다.

	- static import문
		
		static 멤버 호출시 클래스명을 생략할 수 있게 하는 키워드
		형식)

			import static 패키지.클래스명.static멤버; 
			import static 패키지명.클래스명.*; // 클래스의 모든 static 멤버변수+메소드

		사용법)

			import static java.lang.Integer.*;  //Integer 클래스의 모든 static 멤버
			import static java.lang.Math.random; //Math.random() satic 메소드
			import static java.lang.Math.PI; // Math.PI 클래스 변수
			import static java.lang.System.out; 

			Integer.parseInt(20.0); -> parseInt(20.0);
			Math.random(); -> random();
			Math.PI; -> PI;
			System.out.println(); -> out.println();
			
- 제어자들

	- static
		사용가능 한 곳 : 멤버변수, 메서드, 초기화블록

		class A{
			static int width = 200; // 클래스 변수(static변수)

			static{} //초기화 블록, 클래스 초기화 블록

			static void max(int a , int b){} // 클래스 변수(static 메서드)
		}

	- final
		사용가능 한 곳 : 클래스, 메서드, 멤버변수, 지역변수
		
			클래스 : 변경할 수 없는 클래스, 상속으로 확장할 수 없음.
			메서드 : 변경 할 수 없는 메서드, 상속으로 오버라이딩 할 수 없음.
			멤버변수 : 변경할 수 없는 멤버 상수, 상수
			지역변수 : 변경할 수 없는 지역변수, 상수

			final class A{ // 조상이 될 수 없는 클래스

				final int WIDTH = 200; //멤버 상수

				final void max(int a , int b){ //변경불가 메서드
					final int a = 400; //지역 상수
				} 
			}

		
		생성자를 이용한 final 멤버변수의 초기화
			class Card{
				final int MEMBER;
				final String KIND;

				Card(int member, String kind){

					this.MEMBER = member;
					this.KIND = kind;

				}
			}

			class Test{
				public static void main(String args[]){
					Card ins = Card(10, "test");
					
					ins.member = 20 ;// (X) 에러
				}
			}

	- abstract
		사용가능 한 곳 : 클래스 , 메서드

	- 접근제어자
		사용가능 한 곳 : 클래스, 멤버변수, 메서드, 생성자

		private : 같은 클래스 내에서만 접근 가능.
		(default) : 같은 package 내에서만 접근 가능.
		protected : 같은 package 내 + 다른 패키지의 자손클래스 접근 가능.
		public : 접근 제한 없음.

		크기비교 : public > protected > (default) > private

		적용대상 :
			- 클래스 : public,(default)
			- 메서드 : public,protected,(default),private 
			- 멤버변수 : public,protected,(default),private
			- 지역변수 : 없음.

		적용패턴)
			- 싱글톤 : 
				class Singleton{
					private static Singleton s = new Singleton();
					private Singleton{} //생성자
					public static Singletotance(){
						return s;     
					}
				}
			
			- 인스턴스 못 만들게 제한 : 
				public final calss Math{
					private Math(){}
					...
				}

		
	- 제어자 혼합시 주의사항
		
		1. 메서드에 static + abstract 를 함께 사용할 수 없다.
			:static 메서드는 몸통(구현체) 있는 메서드만 가능하기 때문.

		2. 클래스에 abstract 와 final를 함께 사용 할 수 없다
			: 모순, 확장하라면서 못하게 하는 ...
		
		3. abstract 메서드의 접근제어자가 private일 수 없다.
			: 모순, 확장하라면서 못하게 하는 ...

		4. 메서드에 private + final을 사용할 필요가 없다.
			: 가능하나, private 메서드는 어차피 확장 못한다. 의미가 중첩된다.

	- 제어자 정리
		*(모든접근제어자): public,protected,(default),private 

		클래스 : public,(default), final, abstract
		메서드 : (모든접근제어자), final, abstract, static
		멤버변수 : (모든접근제어자), final, static
		지역변수 : final

- 다형성 (polymorphism)
	
	서로 상속관계인,
	조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조 할 수 있다.
	
		TV t = new CaptionTV();
		또는 
		TV t = (TV) new CaptionTV();

	참조변수가 사용할 수 있는 멤버의 개수는 인스턴스의 멤버개수 보다 적거나 같아야 한다.
	그러므로 반대의 경우인 자손클래스 타입의 참조변수로 조상클래스 인스턴스를 참조할 수는 없다.
	
	- 형변환
		형변환은 참조변수 타입을 변경하는 것이지 인스턴스를 변경하는 것이 아니므로, 실제 인스턴스에 아무런 영향이 없다.	
		
		up-casting : 자손타입에서 조상타입으로 형변환, 생략가능
			CaptionTV ct = new CaptionTV();
			TV t = ct; //형변환 생략가능 , TV t = (TV)ct;
		
		down-casting : 조상타입에서 자손타입으로 형변환, 형변환 생략 불가능
			TV t = new CaptionTV();
			CaptionTV ct = (CaptionTV) t;

		조상클래스 인스턴스를 자손타입 참조변수로 참조할 수 없기 때문에
			TV t = new TV();
			CaptionTV ct = (CaptionTV) t; // 에러..

		위와 같은 형식으로 형변환을 할 수 없다. 실제 인스턴스를 기준으로 형변환이 가능한 것이다

	- instanceOf
		어떤 타입에 대한 instanceOf 결과가 true 라는 것은 그 타입으로 형변환이 가능하다는 것을 의미한다.
		
			CaptionTV ct = new CaptionTV();
			if(ct instance CaptionTV){..}	// true
			if(ct instance TV){..}		// true
			if(ct instance Object){..}	// true

	- 다형성 구현시 주의할 멤버변수
		부모 또는 자식에 중복된 메서드(오버라이딩)는 실제 인스턴스의 메서드가 호출된다.
		중복된 멤버변수는(static이든 인스턴스 멤버든) 참조변수 타입에 따라 호출변수가 달라진다.

		class Parent{
			int x = 100;
			void print(String msg){	System.out.println("Parent:"+msg);}
			void print2(){	
				System.out.println("Parent 입니다");			
			}
		}
		
		class Child{
			int x = 200;
			void print(String msg){	System.out.println("Child:"+msg);}
			void print2(){	
				System.out.println("x=" + x);	
				System.out.println("this.x=" + this.x);
				System.out.println("super.x=" + super.x);
			}
		}

		class Test{
			public static void main(String[] args){
				
				Parent p = new Child();
				Child c = new Child();

				p.print("Hi");	// Child:Hi
				c.print("Hello"); // Child:Hello

				//--- 멤벼변수는 참조변수에 따라 참조되는 값이 다르다
				System.out.println(p.x); // 100
				System.out.println(c.x); // 200

				//--- 메소드 안의 멤버변수는 실제 인스턴스 변수의 값을 따라간다
				p.print2();
					// x=200
					// this.x=200
					// super.x=100
				c.print2();
					// x=200
					// this.x=200
					// super.x=100
			}
		}

		위와 같은 참조객체변수별로 달라지는 중복 멤버변수 문제 때문에 직접 접근하지 않고,
		getter(), setter()로 멤버변수를 접근하는 것같다.(실제 인스턴스 값을 접근하기 위해)

	- 매개변수 다형성
		class Product{
			int price;
			int point;
		}
		class TV extends Product{}
		class Computer extends Product{}
		
		class Buyer{
			void buy(Product p){
				..
			}
		}
	- 배열 다형성
		class Product{
			int price;
			int point;
		}
		class TV extends Product{}
		class Computer extends Product{}
		
		class Buyer{

			public static void main(Strings args[]){
				Product p[] = new Product(2);
				
				p[0] = new TV();
				p[1] = new Computer();
			}
		}

- 추상 클래스, 메소드
	미완성 클래스
	상속 받아서 미구현된 메소드(추상메소드)를 구현하라고 강요하기 위한 클래스이다.
	추상 메소드가 하나 이상 있으면 추상 클래스로 지정해야 한다
	(하지만, 추상 메소드가 없어도 추상 클래스로 지정할 수 있다)
	abstract 키워드를 사용한다
	생성자, 멤버변수, (구현된)메서드도 구현에 포함할 수 있다. 일반 클래스와 다르지 않다
	인스턴스로 만들 수는 없다.
	참조변수로 사용할 수 있다.(다형성 가능,매개변수 가능, 리턴타입등 가능)
	상속해서 추상메소드를 모두 구현하면 일반 클래스가 된다.
	상속 후 추상메소드들 중 하나라도 구현 안 된게 있다면 그 abstract 키워드로 다시 추상 클래스로 지정해야 한다.
	
	- abstract
		사용가능 한 곳 : 클래스 , 메서드
		
		abstract class TV{
			abstract void setPrice(int p); // {} 몸체가 없다
		}

- 인터페이스(Interface)
	

	더 엄격한 일종의 추상클래스

	오직 추상메서드와 상수변수 만 멤버로 가질 수 있다
	모든 멤버변수는 public static final 이어야 한다. 생략 가능하지만, 컴파일러에 의해 자동으로 붙는다.
	모든 메서드는 public abstract 이어야 한다. 생략 가능하지만, 컴파일러에 의해 자동으로 붙는다.
	(JDK1.8 이상 부터 static 메소드, 디폴트(dufault 키워드를 사용하는) 메서드 추가되었는데 이 메소드들은 예외)

	접근 제어자는 class와 똑같이 public ,(default)만 가능하다
	interface 키워드로 정의하고 implements 로 구현한다.

	인스턴스로 만들 수는 없다.
	참조변수로 사용할 수 있다.(다형성 가능,매개변수 가능, 리턴타입등 가능)
	추상메소드를 모두 구현하면 일반 클래스가 된다.
	구현했는데 추상메소드들 중 하나라도 구현 안 된게 있다면 abstract 키워드로 다시 추상 클래스로 지정해야 한다.


	- 인터페이스 구현
		interface Able{
			String HELLO = "Hi hello"; //pblic static final 이 앞에 자동으로 붙는다.
			public static final NUM = 10;
			print(String msg); // public abstract 이 앞에 자동으로 붙는다.
			public abstract print2(String msg);
		}
		
		class Ex implements Able{
			public print(String msg){..}
			public print2(String msg){..}
		}

		구현을 모두 못했을 경우 추상클래스가 된다
			abstract class Ex implements Able{
				public print(String msg){..}
				// print2() 구현 못함
			}

		다른 클래스 상속과 구현을 동시에 할 수 있다
			class Ex extends Unit implements Able{..}

	- 인터페이스 상속

		인터페이스끼리만 상속 가능하며, 다중상속 가능.
		
			interface A{}
			interface B{}
			interface C extends A,B{}

		인터페이스에는 클래스와는 달리 Object같은 최고 조상이 없다. 
		하지만, 클래스로 구현 객체화하면 Object 의 메소드를 사용할 수 있다..
		클래스에 자동으로 extends Object가 붙는 법칙은 변하지 않는다.
		다른 클래스를 상속하고, 동시에 인터페이스를 구현했더라도 마찬가지다
		(다른 클래스가 Object를 상속했을 테니..)

	- 인터페이스 장점
		- 개발시간 단축
		- 표준화 가능
		- 서로 관계없는 클래스들을 간접으로 연결해 줄 수 있다
		- 독립적인 프로그래밍 가능		
	
	- static 메서드
		JDK 1.8 부터 적용
		구현된 static 메소드다
		static 키워드만 있을 경우 public static이 된다(public이 기본이고 생략가능)
		클래스에서는 인스턴스에서도 접근 가능했지만, 인터페이스는 인터페이스명.메서드 로만 접근 가능
			
			interface A{
				static void print(){ // public static 자동 변경됨
					System.out.println("interface static");
				}
			}

			class AImpl implements A{}

			public static void main(String[] args){
				A a = new AImpl();
				a.print(); // 컴파일 에러

				A.print(); // interface static
			}

	- 디폴트(default) 메서드
		JDK 1.8 부터 적용
		구현된 일반 메소드
		원래 인터페이스 목적에는 구현의 강제성을 위해 추상 메소드만 허용했지만, 
		구현 완료된 메서드의 상속 기능도 허용된 듯..
		인터페이스에는 default 키워드를 메서드에 붙여서 구분. 
		자동으로 public default가 된다 (public이 기본이고 생략가능)
			
			interface A{
				default void print2(){ // public default 자동 변경됨
					System.out.println("interface default");
				}
			}

			class AImpl implements A{}

			public static void main(String[] args){
				A a = new AImpl();
				a.print2(); //interface default

			}

		-주의사항
			1. 여러 인터페이스에 디폴트 메서드 간의 충돌 시
				: 인터페이스를 구현한 클래스에서 디폴트 메서드를 오버라이딩 해야함
				: 다중 인터페이스를 상속한 인터페이스일 경우 다중상속한 인터페이스에서 오버라이딩 해야함
			2. 인터페이스 디폴트 메서드와 일반 조상클래스 동시 구현 후 메서드 충돌 시
				: 일반 조상클래스가 상속되고, 인터페이스 디폴트 메서드는 무시됨.

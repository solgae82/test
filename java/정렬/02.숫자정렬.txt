기본형 숫자 래퍼 클래스(Integer, Long, Double)는 Comparable<T>가 구현되어 있다.
그래서 compareTo(o2)를 사용할 수 있다
Arrays.sort(intArr); 기본정렬 호출이 가능하다

Comparator.compare(o1,o2) 와 같은 기능을 하는 
래퍼클래스.compare(o1,o2) static 메소드도 있다

(Integer 자료형) 예제를 살펴보자 

---------------------------------------

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

public class TestApp {

	public static void main(String[] args) {
	
		// 정수 정렬
		Integer[] intArr = new Integer[] {new Integer(3),new Integer(1),new Integer(2)};
		System.out.println(Integer.compare(intArr[2], intArr[0])); // 오른쪽이 크면 -1 , (2 < 3 = -1)
		System.out.println(Integer.compare(intArr[2], new Integer(2))); // 같으면 0 , (2 == 2 = 0)
		System.out.println(Integer.compare(intArr[0], intArr[2])); // 왼족이 크면 1 ,  (3 > 2 = 1)
		
		for(int i : intArr) System.out.print(i + ","); // 3,1,2,
		System.out.println();
		
		Arrays.sort(intArr, new Comparator<Integer>() {
			
			public int compare(Integer o1, Integer o2) {
				
				if(o1 < o2) {
					return -1;
				}else if(o1 > o2){
					return 1;
				}
				
				return 0;
				/*
				return Integer.compare(o1,o2); // 오름차순
				return Integer.compare(o2,o1); // 내림차순
				*/
			}
			
		});
		
		//람다식으로 구현하기 
		//Arrays.sort(intArr, (o1,o2)-> o1.compareTo(o2)); //오름차순
		//Arrays.sort(intArr, (o1,o2)-> o2.compareTo(o1)); //내림차순
		
		// 기본형 숫자 래퍼 클래스(Integer, Long, Double) 의 compare() 메소드 사용
		//Arrays.sort(intArr, (o1,o2)-> Integer.compare(o1, o2));//오름차순
		//Arrays.sort(intArr, (o1,o2)-> Integer.compare(o2, o1));//내림차순
		//-------------------------------------
		for(int i : intArr) System.out.print(i + ",");
		/*
		 오름차순 : 1,2,3,
		 내림차순 : 3,2,1,
		*/
		//-------------------------------------
	}

}

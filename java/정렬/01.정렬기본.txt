
객체 정렬 조건

	기본적으로 객체로 만들어야 한다, 기본형은 사용 할 수 없다.
	리스트 또는 배열 형태로 만들어야 한다
	
	배열형은 
		Arrays.sort()를 이용
	
	Collection 형은
		Collections.sort() 이용
		
	Set형은 List 로 만들어서 
		Collections.sort() 이용
	
sort메소드 인수 형식

	public static <T> void Collections.sort(List<T> list, Comparator<? super T> c)
	public static <T> Arrays.sort(T[] a, Comparator<? super T> c)
	
Comparator 기본 구현

	구현 메소드 반환 형식
				
		int compare(A , B) 반환값 기본
			: A(매개변수1), B(매개변수2) 비교해서 (-1,0,1)을 반환
			
			(오름차순)
			A < B : 오른쪽이 크면 -1
			A = B : 같으면 0
			A > B : 왼쪽이 크면 1
			
			:내림차순은 비교객체를 바꾸거나, '<','>' 비교 연산자만 바꿔서 둘 중 하나로 지정
			(내림차순)
			B > A : 왼쪽이 크면 -1
			A = B : 같으면 0 
			B < A : 오른쪽이 크면 1
		
	예제)
		new Comparator<Integer>() { 
				
			public int compare(Integer o1, Integer o2) {
				
				/* 오름차순 구현 */
				
				if(o1 < o2) {
					return -1;
				}else if(o1 > o2){
					return 1;
				}
				
				return 0;
			}
		}
	
compare 메소드 구현 도우미 메소드들
	
	숫자객체배열,리스트:
		Arrays.sort(intArr, new Comparator<Integer>() {
			public int compare(Integer o1, Integer o2) {
				return Integer.compare(o1,o2); // 오름차순
				//return Integer.compare(o2,o1); // 내림차순
			}			
		});
	
	문자열배열,리스트:
		Collections.sort(list, new Comparator<String>() {
			public int compare(String o1, String o2) {
				return o1.compareTo(o2); //오름차순
				//return o2.compareTo(o1); //내림차순
			}
		});
		
람다식으로 축약해서 구현하기
	
	문자열배열,리스트:
		Collections.sort(list,(o1,o2)->o1.getName().compareTo(o2.getName())); //오름차순
		Collections.sort(list,(o1,o2)->o2.getName().compareTo(o1.getName())); //내림차순

	숫자배열,리스트:
		Arrays.sort(intArr, (o1,o2)-> o1.compareTo(o2)); //오름차순
		Arrays.sort(intArr, (o1,o2)-> o2.compareTo(o1)); //내림차순

		Arrays.sort(intArr, (o1,o2)-> Integer.compare(o1, o2));//오름차순
		Arrays.sort(intArr, (o1,o2)-> Integer.compare(o2, o1));//내림차순
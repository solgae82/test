내부 클래스 종류
	
	4 개의 형식이 존재한다
	
	1. 인스턴스 내부 클래스
	2. static 내부 클래스
	3. 지역 내부 클래스
	4. 익명 클래스

----------
4. 익명 클래스는 제일 나중에 살펴보기로 하고 
1,2,3 부터 분석해 보자.
---------

선언 위치
	일반 클래스의 변수 위치와 같다
	클래스에 static을 정할 수 있다..
	

	class Outer{
		class InstanceInner{}		//인스턴스 내부 클래스
		static class StaticInner{}	//static 내부 클래스
		void myMethod(){
			class LocalInner{}	//지역 내부 클래스
		}
	}

접근제어자


	- 내부 클래스에 접근 제어자 사용 가능
	- 인스턴스 내부 클래스 , 스택틱 내부 클래스는 일반 클래스의 멤버변수 처럼
	접근제어자(public, protected, private)을 쓸 수 있다.

	- 지역 내부 클래스는 일반 클래스의 지역 변수처럼 접근제어자를 쓸 수 없다.

	- 내부 클래스들도 클래스 이므로, abstract 와 final 키워드를 쓸 수 있다.

	class Outer{
		protected class InstanceInner{}		//인스턴스 내부 클래스
		abstract static class StaticInner{}	//스태틱 내부 클래스
		void myMethod(){
			final class LocalInner{}	//지역 내부 클래스는 접근제어자 사용 못함.
		}
	}

		
	
- 인스턴스 내부 클래스

	인터넷에서 떠도는 글을 가져와 봤다...
		
		---가져온 글
		static이 아닌 멤버 클래스의 인스턴스는 바깥 클래스의 인스턴스와 암묵적으로 연결된다.
		왜냐하면 static이 아닌 멤버 클래스는 바깥 인스턴스 없이는 생성할 수 없기 때문이다.
		두 클래스의 관계는 멤버 클래스의 인스턴스 안에 만들어지며, 메모리를 차지한다. 생성도 느리다.
		---

	외부 클래스 인스턴스를 먼저 생성 후 그 외부 클래스 인스턴스 참조변수로 내부 클래스 인스턴스를 생성해야 된다.
		
		Outer.InstanceInner in2 =  new Outer().new InstanceInner();

	인스턴스 변수, 인스턴스 메소드 , 상수만 사용 가능.

		- static 멤버변수, static 멤버 메소드 허용 안됨.
		- final static 멤버변수 허용(상수만 허용)
		- final static 메소드 허용 안됨.
	
	외부 클래스의  멤버변수 & 멤버 메소드를 내부 클래스 변수 안에서 참조 가능

		- 외부 클래스 인스턴스 변수 참조가능
		- 외부 클래스 인스턴스 메소드 참조 가능
		- 외부 클래스 static 멤버변수 참조 가능
		- 외부 클래스 static 메소드 참조 가능
	

	예제로 살펴보자
	//------------ 
	인스턴스 내부 클래스 생성하기
	
		class Outer{
			class InstanceInner{}
		}
		
		public class Test {
			public static void main(String[] args) {
				
				//인스턴스 내부 클래스 생성하기
				Outer outer = new Outer();
				Outer.InstanceInner in= outer.new InstanceInner();
							
				// 또는 한번에
				Outer.InstanceInner in2 =  new Outer().new InstanceInner();
			}
		}

	//------------ 
	인스턴스 내부 클래스 생성 후 인스턴스 변수 접근

		class Outer{
			class InstanceInner{ 
				int iv = 10;
			}
		}
		
		public class Test {
			public static void main(String[] args) {
				Outer.InstanceInner in =  new Outer().new InstanceInner();
				System.out.println(in.iv); // 10
			}
		}

	//------------ 
	인스턴스 내부 클래스에 static 변수 선언 못함. static 메소드도 안됨. 컴파일도 안됨.
	왜 그럴까? static 변수와 메소드는  "클래스명.static변수명 or static 메소드" 으로 접근 가능한데,
	인스턴스 내부 클래스는 무조건 그 클래스의 외부 클래스도 인스턴스화 되어야하고,
	자신도 인스턴스가 되어야 사용 가능한 클래스이기 때문이다(라고 하면 될런지)
	그러므로 클래스명.static변수명 으로 접근할 수도 없는 변수에 static을 붙이는 것은 모순..
	
		class Outer{
			class InstanceInner{ 
				//static int cv = 100; //컴파일 에러(x), 선언 못함.
				//static int test() {return 10;}// 메소드도 안됨(x), 선언 못함.
			}
		}
	
	//------------ 
	인스턴스 내부 클래스에 final static 상수 선언 가능. 
	(외부클래스명.내부클래스명.상수명 접근 가능)
	웃기다..(외부 인스턴스와 내부 인스턴스를 생성해야 쓸 수 있다며...) 
	암튼 예외적으로 final static 상수만 허용.

	
		class Outer{
			class InstanceInner{ 
				final static int COUNT = 20; //final static 상수 이므로 허용.
			}
		}

		public class Test {
			public static void main(String[] args) {
				Outer.InstanceInner in =  new Outer().new InstanceInner();
				System.out.println(in.COUNT); // 20
				System.out.println(Outer.InstanceInner.COUNT); // 20
			}
		}

	그럼 메소드도 final static 붙이면 되겠네? 하며 해 봤더니 안 되더라..

		class Outer{
			class InstanceInner{ 
				//final static int test() {return 10;} //컴파일 에러(x), 선언 못함.
			}
		}

	상수만 static 붙일 수 있다(final static 상수명)
	
	//------------
	내부 클래스에서 외부클래스 멤버 접근하기 (인스턴스화 후에 접근 가능)
	걍 보고 이해하자

		class Outer{
			int ov  = -90; 	
			static int osv = 90;
			int instanceMethod() {return -100;}
			static int staticMethod() {return 100;}
			
			class InstanceInner{
				int iv = -10;		//인스턴스 변수 사용 가능.
				//static int sv = 10;	//static 변수 사용 불가능(x)
				
				
				int innerInstanceMethod() {return 100;}	// 인스턴스 메소드	사용 가능.
				//static int innerStaticMethod() {return 20;} //static 메소드 사용 불가능(x)
				
				//외부클래스 멤버 접근
				int outerInstanceVar() {return ov;}
				int outerStaticVar() {return osv;}
				int outerInstanceMethod() {return instanceMethod();}
				int outerStaticMethod() {return staticMethod();}

			}	
			
		}

		public class Test {
			public static void main(String[] args) {

				Outer.InstanceInner in=  new Outer().new InstanceInner();
			
				System.out.println(in.outerInstanceVar()); // -90
				System.out.println(in.outerStaticVar());	//90
				System.out.println(in.outerInstanceMethod()); // -100
				System.out.println(in.outerStaticMethod());	// 100
			}
		}

- static 내부 클래스 

	두 가지 방법의 사용법이 있다

		- 인스턴스화 해서 변수 접근하기 가능
		- "외부클래스명.내부클래스명.static변수명 or static 메소드" 접근 가능.

	static 내부 클래스를 인스턴스로 생성시
	외부 클래스 인스턴스 생성은 필요 없고 , static 내부 클래스 인스턴스만 생성된다.
	이점이 인스턴스 내부 클래스와 다른 점이다.. 
	독립 클래스 같은 느낌이다.
		
	인스턴스 내부 클래스는 외부클래스를 생성하고 내부 인스턴스 클래스를 인스터화 생성해야 기능을 사용할 수 있고,
	내부적으로는 외부클래스 인스턴스와 내부 클래스 인스턴스가 암묵적으로 연결되어 있어서 
	내부 클래스 인스턴스에서 외부 클래스 인스턴스의 멤버들을 접근할 수 있다.

	하지만,
	static 내부 클래스는 인스턴스화 생성시 외부 클래스의 인스턴스가 생기지 않고 독립적으로 내부 클래스 인스턴스만 생기기 때문에
	자동으로 연결되어 있지 않다.
		
	그러므로 외부 클래스 인스턴스와 강제적 자동으로 연결된 인스턴스 내부 클래스와는 달리, 
	static 내부 클래스 인스턴스는 외부 클래스의 인스턴스 멤버는 접근할 수 없고, static 멤버만 접근 가능하다
	외부 클래스 인스턴스 멤버에 접근하고 싶으면 내부 클래스 안에서 외부 클래스 인스턴스를 생성해서 그 참조변수로 접근 해야한다.

		- 인스턴스 멤버와 static 멤버를 모두 선언 가능.
		- 외부 클래스의 인스턴스 멤버는 자동 사용 못함(static 멤버만 사용가능)
		- static 멤버는 인스턴스 멤버를 사용 못하는 일반 클래스 법칙이 똑같이 적용된다.

	static 내부 클래스의 멤버 접근에 대해 살펴보자
		
		class Outer{
			
			static class StaticInner{
				int iv = -10;		//인스턴스 변수
				static int sv = 10;	//static 변수
				
				int instanceMethod() { return -20;}	//인스턴스 메소드	
				static int staticMethod() {return 20;} //static 메소드

			}	
			
		}

		public class Test {
			public static void main(String[] args) {
							
				//static 내부 클래스 인스턴스 생성 접근
				Outer.StaticInner in=  new Outer.StaticInner();
				System.out.println(in.iv); 	// -10
				System.out.println(in.instanceMethod()); // -20
				System.out.println(in.sv); 	// 10
				System.out.println(in.staticMethod()); // 20
				
				//static 직접 접근
				System.out.println(Outer.StaticInner.sv); // 10 , static 변수 접근 가능
				System.out.println(Outer.StaticInner.staticMethod());  //20 , static 메소드 접근 가능
				//System.out.println(Outer.StaticInner.iv); // (x) 인스턴스 변수 접근할 수 없음. 컴파일 에러
				//System.out.println(Outer.StaticInner.instanceMethod());  // (x)인스턴스 메소드 접근할 수 없음.컴파일 에러


			}
		}
	
	외부 클래스 멤버 접근은 기본적으로 static 멤버만 가능하다

		class Outer{
			int ov  = -90;
			static int osv = 90;
			int outerInstanceMethod() {return -100;}
			static int outerStaticMethod() {return 100;}
			
			static class StaticInner{
				
				/int err1 = ov; //외부 클래스 인스턴스 멤버변수는 접근 불가(x)
				//int err2 = outerInstanceMethod(); //외부 클래스 인스턴스 멤버 메소드는 접근 불가(x)
		
				int iv = osv;		//외부 클래스 static 변수 접근 가능, 
				static int sv = outerStaticMethod();	//외부 클래스 static 메소드 접근 가능
				
				int instanceMethod() { return iv;}	//인스턴스 메소드	
				static int staticMethod() {return sv;} //static 메소드

			}	
			
		}

		public class InnerCalssEx {

				public static void main(String[] args) {					
					
					Outer.StaticInner in=  new Outer.StaticInner();
										
					System.out.println(in.instanceMethod()); //90
					System.out.println(in.staticMethod());  // 100
					System.out.println(Outer.StaticInner.staticMethod()); //100
					
				}
		}

	static 내부 클래스 안에서 외부 클래스 인스턴스 멤버 접근을 굳이 해야겠다면, 
	static 내부 클래스 안에서 외부 클래스 인스턴스를 만들고 접근하면 된다.

		class Outer{
			int ov  = -90;
			static int osv = 90;
			int outerInstanceMethod() {return -100;}
			static int outerStaticMethod() {return 100;}
			
			static class StaticInner{
				
				Outer outer = new Outer();
				int outerOv = outer.ov;
		
				int instanceMethod() { return outer.outerInstanceMethod();}	//인스턴스 메소드	
				

			}	
			
		}

		public class InnerCalssEx {

				public static void main(String[] args) {					
					
					Outer.StaticInner in=  new Outer.StaticInner();			
			
					System.out.println(in.outerOv); // -90
					System.out.println(in.instanceMethod()); // -100
					
				}
		}

- 지역 내부 클래스
		메소드 안에 정의하는 inner 클래스
		지역 변수처럼 해당 메소드 내부에서만 한정적으로 사용된다.
		접근제한자와 static을 붙일 수 없다(메소드 지역이므로 당연)

		메소드의 final 지역변수만 메소드 지역 내부 클래스에서 사용될 수 있다.
		
			- JDK 1.8부터는 메소드 지역변수를 메소드 내부 클래스에 사용하면,  
			그 지역변수는 컴파일러가 자동으로 final 변수로 변경하여 컴파일 한다.
			
			- 역으로 생각하면 JDK 1.8부터는 지역 메소드 안에 있는 내부 클래스에서 
			지역변수를 사용하는 순간, 사용된 그 지역변수는 final이 된다는 결론이 나온다.

			- 내부 클래스에서 사용된 지역변수는 자동 final이 되기때문에 값을 변경할 수 없게 된다.
			
		메소드 내 final 지역변수만 내부 클래스에서 접근 가능한 이유는,
		메소드가 수행이 끝난 뒤 지역변수가 소멸한 뒤에도 소멸된 그 지역변수를 지역 내부 클래스가 참조하는 경우가 
		발생할 수 있기 때문이란다. 
		
		-------------//예제로 살펴보자.

			class Outer{
	
				private int outerIv = 1;
				static int outerSv = 11;

				void instanceMethod(){
				
					int iv = 2;  //JDK 1.8 이상에서, 내부 클래스에서 사용되는 순간, 자동 final int(상수)가 된다.
					final int fv = 22; // 명시적 final 상수
					
					class LocalInner{
						int ca1 = outerIv;
						int ca2 = outerSv;
						int ca3 = iv; //JDK 1.8 이상에서, 자동 (final int iv) 되면서 접근가능 OK. 이하 버전에서는 컴파일 에러.
						int ca4 = fv; 
						
					}
					
					LocalInner lo = new LocalInner();
					System.out.println(lo.ca1); // 1
					System.out.println(lo.ca2); // 11
					System.out.println(lo.ca3); // 2
					System.out.println(lo.ca4); // 22
					
					//iv++; //내부 클래스에 의해 상수가 되었으므로 바꿀 수 없음
					
					
				}

				static void staticMethod(){
				
					int sv = 3;  //JDK 1.8 이상에서, 내부 클래스에서 사용되는 순간, 자동 final int(상수)가 된다.
					final int fv = 33; // 명시적 final 상수
					
					class LocalInner{
						//int ca1 = outerSv; // (x) 외부클래스의 인스턴스 변수 접근할 수 없다(static 메소드 내이므로)
						int ca2 = outerSv;
						int ca3 = sv; //JDK 1.8 이상에서, (final int sv) 되면서 접근가능 OK. 이하 버전에서는 컴파일 에러.
						int ca4 = fv; 
						
					}	
				
					LocalInner lo = new LocalInner();
					System.out.println(lo.ca2); // 11
					System.out.println(lo.ca3); // 3
					System.out.println(lo.ca4); // 33
					
					//sv++; //내부 클래스에 의해 상수가 되었으므로 바꿀 수 없음
				
				}
			}

			public class App {
				public static void main(String[] args) {
					Outer obj = new Outer();
					obj.instanceMethod();
						/*
						    1
							11
							2
							22  
						*/
					
					System.out.println("-----------------");
					
					Outer.staticMethod();
						/*
							11
							3
							33
						*/
				}
				

			}
		
- 컴파일 후 생성되는 내부 클래스 .class 파일 이름 형식

	아래 구조와 같은 내부 클래스가 있는 클래스 파일을 컴파일 하면...
		
		class Outer{
			class InstanceInner{}			
			static class StaticInner{}			
			void myMethod(){
				class LocalInner{}
			}
		}

		..
		Outer.class
		Outer$InstanceInner.class
		Outer$StaticInner.class
		Outer$1LocalInner.class // 숫자 1이 앞에 붙은 지역 내부 클래스 .class 파일

	지역 내부 클래스 파일은 숫자가 붙은 .class 파일 생긴다.
	이유는 다른 메소드에도 같은 이름의 지역 내부 클래스 파일이 정의될 수 있기 때문이다.
	
		class Outer{
			class InstanceInner{}			
			static class StaticInner{}			
			void myMethod(){
				class LocalInner{} //같은 이름의 지역 클래스
			}
			void myMethod2(){
				class LocalInner{} //같은 이름의 지역 클래스
			}
		}

		..
		Outer.class
		Outer$InstanceInner.class
		Outer$StaticInner.class
		Outer$1LocalInner.class // 숫자 1이 앞에 붙은 지역 내부 클래스 .class 파일
		Outer$2LocalInner.class // 숫자 2이 앞에 붙은 지역 내부 클래스 .class 파일


- 외부 클래스 this

	일반 클래스에서 인스턴스는 this 로 참조 가능하듯이, 같은 의미를 지닌다.
	인스턴스 내부 클래스, static 내부 클래스, 지역 내부 클래스 를 인스턴스화 하면, this는 그 생선 인스턴스를 의미한다.
	
	인스턴스 내부 클래스는 인스턴스화가 되기 위해서 외부 클래스 인스턴스화가 필요하고, 둘은 암묵적으로 연결 되어 있다고 했다.
	외부 클래스의 인스턴스를 내부 클래스에서 사용할때 참조 키워드가 있을 것이다
		
		외부 클래스명.this

	외부 클래스명.this 는 외부 클래스가 인스터화 되었을때 외부 클래스 인스턴스를 의미한다.

	만약 외부, 내부 클래스화가 인스턴화가 되었는데, 외부, 내부 의 멤버 변수명이 같은게 있다면, 외부, 내부 접근하기 위한 
	구분 this가 필요할 것이다..

	다음과 같이..

		public class Test {
			public static void main(String[] args) {
				
				Outer.InstanceInner in = new Outer().new InstanceInner();
				
				in.method();
			}
		}


		class Outer{
			
			int value = 10;
			
			class InstanceInner{
				
				int value = 20;
				
				void method() {
			
					int value =30;
					
					System.out.println(value); // 30, 지역변수
					System.out.println(this.value); // 20 , 내부 클래스 변수
					System.out.println(Outer.this.value); // 10 , 외부 클래스 변수
					
				}
			}
		}
	
- 익명 클래스 
	
	단 하나의 상속 가능한 클래스나 단 하나의 인터페이스, 단 하나의 추상클래스를 대상으로,
	클래스 내에서 즉석 구현해 버리는 일회용 클래스

		구현 대상:
		- 상속 가능 클래스
		- 인터페이스

	이름이 없는 클래스이긴 하지만, 새로 창조하는 클래스는 아니다(혼동 주의)

	단 한개만 코딩시 즉석에서 구현 후 변수에 담아 사용하는 형식

		조상클래스형 참조변수 = new 상속가능 조상클래스 이름{
			..구현
		};

		인터페이스형 참조변수 = new 인터페이스 이름{
			..구현
		};

		추상클래스 참조변수 = new 추상클래스 이름{
			..구현
		};

	참조변수를 보면 알 수 있듯이  , 그 형의 범위만 참조 할 수 있다.
	상속가능한 클래스로 익명 클래스를 만들어 만약 확장한다 해도, 확장 부분은 어차피 쓸 수 없다는 뜻
		
		Object iv = new Object() {void method(){/*구현*/};};
		// 이렇게 확장했다 더라도 Object 형으로만 받을 수 있으니 확장해봐야 method()는 못 쓴다..무용지물..

	그러므로 상속 가능한 클래스에서는 overriding 만 의미 있을 것이다.
	인터페이스나 추상클래스야 새로 구현해야 하는 당연한 것이고..

	장황하게 설명했지만, 코드를 보면 간단하다
	
	아래는 Object 클래스의 toString 메소드를 overriding 해서 새로 정의한 익명 클래스와
	추상클래스를 즉석 구현한 익명 클래스 , 인터페이스를 즉석 구현한 익명클래스 사용 예제이다

		public class Test {
			
			//object를 상속해서 재정의한 익명 클래스
			Object iv = new Object() {public String toString(){return "인스턴스 익명 클래스";}}; 
			
			
			//object를 상속해서 재정의한  static 익명 클래스
			static Object  sv = new Object() {public String toString(){return "static 익명 클래스";}};
			
			//메소드 안에 object를 상속해서 재정의한 지역 익명 클래스
			String myMethod() {
				Object  sv = new Object() {public String toString(){return "지역 익명 클래스";}};
				return sv.toString();
			}
			
			//추상 클래스를 즉석 구현한 익명 클래스
			InnerAb ab = new InnerAb() { public String print() {return "추상 클래스 구현 익명 클래스";}};
			
			//인터페이스를 즉석 구현한 익명 클래스
			InnerInter inf = new InnerInter() {public String print() {return "인터페이스 구현 익명 클래스";}};
			
			public static void main(String[] args) {
				
				Test ex = new Test();
				
				System.out.println(ex.iv.toString());	//인스턴스 익명 클래스
				System.out.println(ex.sv.toString());	//static 익명 클래스
				System.out.println(ex.myMethod());	//지역 익명 클래스
				System.out.println(ex.ab.print());	//추상 클래스 구현 익명 클래스
				System.out.println(ex.inf.print());	//인터페이스 구현 익명 클래스
			}
		}


		abstract class InnerAb{
			abstract String print();
		}

		interface InnerInter{
			abstract String print();
		}

	실무에서는 GUI 프로그램이나 안드로이드 프로그램 같은 곳에서 인터페이스 또는 추상 클래스를 즉석에서 구현하는 용도로 쓰인다.

	- 컴파일 후 생성되는 파일 형식 (.class)

		익명 클래스는 이름이 없기 때문에 "외부클래스명$숫자.class"의 형식을 가진다.
		위 예제의 컴파일을 했더니 아래와 같은 컴파일된 .class 파일이 생겼다.

			Test.class
			Test$1.class
			Test$2.class
			Test$3.class
			Test$4.class
			Test$5.class
			Test$6.class

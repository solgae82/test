C언어의 열거형은 값이 정수형 상수이지만, java의 열거형은 객체상수다 (C언어 열거형으로 착각하지 말자)

	class Woker{
		public static final Woker WALKING = new Woker();
		public static final Woker RUNNING = new Woker();
		public static final Woker TRACKING = new Woker();
		public static final Woker HIKING = new Woker();
	}

위와 같은 자기 자신 상수형 객체 선언을 아래와 같이 선언한 거라 보면 된다.

	enum Woker {WALKING, RUNNING, TRACKING, HIKING;}

enum 자체가 클래스와 같으므로, 같은 이름의 클래스가 있다면 당연히 충돌난다.
enum 도 클래스 이므로, 생성자, 메소드 , 멤버필드 , 추상메서드 등을 가질 수 있다
enum 생성자는 암묵적인 private 이다. 즉 외부에서 호출 불가 

상수객체 선언 위치도 중요하다.

	enum Type {	
		WALKING, RUNNING, TRACKING, HIKING; // 항상 맨 먼저 선언
		Type(){} //생성자
	}
	
아래는 enum 상수형객체가 위치가 잘못 되어서 컴파일 에러이다

	enum Type {	
		Type(){} //생성자 , 컴파일 에러 (x)
		WALKING, RUNNING, TRACKING, HIKING; // 항상 맨 먼저 선언
		
	}

상수만 정의된 java 파일의 상수 값이 바뀌면, 해당 상수를 참조하는 모든 소스들은 재컴파일 해야한다.
열거형 정의된 java 파일의 상수 값이 바뀌면, 해당 열거형을 참조하는 모든 소스들은 재컴파일 할 필요없다.

1. 열거형 선언하기

	1) 하나의 java파일로 만들어서 enum 선언하기

		<Type.java>
		public enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}

		<Shoes.java>
		public class Shoes {
		    public String name;
		    public int size;
		    public Type type;
		}
	2) 클래스 안에서 선언하기

		<Shoes.java>
		public class Shoes {
		    public String name;
		    public int size;
		    public enum Type {
			WALKING, RUNNING, TRACKING, HIKING   
		    }
		}

	3) 클래스 밖에서 선언하기

		<Shoes.java>
		enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}
		public class Shoes {
		    public String name;
		    public int size;
		    public Type type;
		}

	-------------------//
	열거된 순서에 따라 0 부터 순서값을 가짐(ordinal). 차례대로 증가함.
	enum 열거형으로 지정된 상수는 대문자 사용.
	-------------------//
	
2. 기본 사용하기

	<Shoes.java>
	enum Type {
	    WALKING, RUNNING, TRACKING, HIKING
	}
	public class Shoes {

	    public Type type;
	     
	    public static void main(String[] qrgs) {
		Shoes shoes = new Shoes();
		 
		shoes.type = Type.RUNNING;
		 
		System.out.plintln("신발 종류 = " + shoes.type); //신발 종류 = RUNNING

		if("RUNNING".equals(shoes.type)) {
			System.out.println("문자열 이다");
		}else {
			System.out.println("문자열 아니다"); // # 여기
			
		}
	    }
	}


3. 메소드

	1) values() : 열거된 모든 원소를 배열에 담아 순서대로 반환

		enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}
		public class Shoes {
		     
		    public static void main(String[] args) {
			for(Type type : Type.values()) {
			    System.out.println(type);
			}
		    }
		}
		# 결과
		WALKING
		RUNNING
		TRACKING
		HIKING

	2) ordinal() : 원소에 열거된 순서를 정수 값으로 반환

		enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}
		public class Shoes {

		    public Type type;
		     
		    public static void main(String[] args) {
			Shoes shoes = new Shoes();

			shoes.type = Type.RUNNING;
			 
			System.out.println(shoes.type.ordinal()); // 1
			 
			Type tp = Type.HIKING;
			 
			System.out.println(tp.ordinal()); // 3
		    }
		}


	3) valueOf() : 매개변수로 주어진 String과 열거형에서 일치하는 이름을 갖는 원소를 반환
		(주어진 String과 일치하는 원소가 없는 경우 IllegalArgumentException 예외 발생)

		enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}
		public class Shoes {
		     
		    public static void main(String[] args) {
			Type tp1 = Type.WALKING;
			Type tp2 = Type.valueOf("RUNNING");
			Type tp3 = Enum.valueOf(Type.class, "TRACKING");

			System.out.println(tp1); //WALKING
			System.out.println(tp2); //RUNNING
			System.out.println(tp3); //TRACKING
		    }
		}

		-------------------//
		<값 가져오는 방법>
		* enum 형 으로 값 가져오기
			ex) Type.WALKING
		* valueOf() 메소드를 이용해서 가져오기
			ex) Type.valueOf("WALKING");
		* Enum.valueOf() 로 가져오기
			ex) Enum.valueOf(Type.class, "WALKING");
		-------------------//

	4) name() : 호출된 값의 이름을 String으로 리턴.
	
		enum Type {
		    WALKING, RUNNING, TRACKING, HIKING
		}
		public class Shoes {
		     
		    public static void main(String[] args) {
			 
			for(Type t : Type.values()){
				System.out.println("이름은? " +  t.name());		
			}			
		    }
		}
		 # 결과
		이름은? WALKING
		이름은? RUNNING
		이름은? TRACKING
		이름은? HIKING

	5) compareTo() : 작으면 음수 , 같으면 0 , 크면 양수
	
		enum Direction {EAST, WEST, SOUTH, NORTH}

		public class Shoes {
			public static void main(String[] args) {
				Direction d1 = Direction.EAST;
				Direction d2 = Direction.valueOf("WEST");
				Direction d3 = Enum.valueOf(Direction.class, "EAST");
				Direction d4 = Enum.valueOf(Direction.class, "NORTH");

				System.out.println(d1.compareTo(d3)); //  0
				System.out.println(d1.compareTo(d2)); //  -1
				System.out.println(d4.compareTo(d1)); //  3

			}
		}

	6) equals() : 같은지 비교
	
		enum Direction {EAST, WEST, SOUTH, NORTH}

		public class Shoes {
			public static void main(String[] args) {
				Direction d1 = Direction.EAST;
				Direction d2 = Direction.valueOf("WEST");
				Direction d3 = Enum.valueOf(Direction.class, "EAST");

				System.out.println("값:"+ (d1==d2));		// 값:false
				System.out.println("값:"+ (d1==d3));		// 값:true
				System.out.println("값:"+ d1.equals(d3));	// 값:true

			}
		}
		
4. 생성자 사용하기
	: enum 생성자는 암묵적인 private 이다. 즉 외부에서 호출 불가
	
	enum Type {
		WALKING("워킹화"), RUNNING("러닝화"), TRACKING("트래킹화"), HIKING("등산화");

		private final String name;
		
		Type(String string) {
			this.name = string;
		}
		
		public String getName() {
			return name;
		}
	
	}
	public class Shoes {
		public static void main(String[] args) {
			
			for(Type type : Type.values()) {
				System.out.println(type.getName()); 
			}
			
		}
	}
	#출력
		워킹화
		러닝화
		트래킹화
		등산화

	-------------------//
	생성자 상수는 선언 끝에 ;(세미콜론)을 꼭 붙여야한다.
	-------------------//

5. 상수객체 메서드 사용
	: 추상메서드를 사용하면 상수 열거형 객체는 반드시 추상메서드를 구현해야 한다
	
	enum Type {
		
		BUS(100){
			int fare(int distance) {return distance * BASIC_FARE;}
		},
		TRAIN(150){
			int fare(int distance) {return distance * BASIC_FARE;}
		},
		SHIP(100){
			int fare(int distance) {return distance * BASIC_FARE;}
		},
		AIRPLAN(300){
			int fare(int distance) {return distance * BASIC_FARE;}
		};
		
		abstract int fare(int distance); //abstract  선언
		protected final int BASIC_FARE;	//protected 선언해야 각 상수에서 접근가능
		
		private Type(int m) {
			BASIC_FARE = m;
		}
		
		public int getBasicFare() {return BASIC_FARE;}
		
	}
	public class Shoes {
		public static void main(String[] args) {
			
			System.out.println(""+Type.BUS.fare(100));	//10000
			System.out.println(""+Type.TRAIN.fare(100));	//15000
			System.out.println(""+Type.SHIP.fare(100));	//10000
			System.out.println(""+Type.AIRPLAN.fare(100));	//30000
				
		}
	}
	
6. 비교하기

	== 연산자는 사용가능 , <, > 는 컴파일 에러(비교 불가능, 당연함 객체이므로)
	compareTo , 또는 equals 메소드로 비교하자


7. 조건문

	- if문 : Type.EAST 비교가능
	- switch문 : Type.EAST 하면 에러, EAST로 비교해야함.


	enum Type {EAST, WEST, SOUTH, NORTH}

	public class Shoes {
		public static void main(String[] args) {
			Type d1 = Type.EAST;
			
			switch(d1) { //이미 Type enum임을 알고 있으므로.. case문에는 enum 이름만 사용
		
				case EAST: //Type.EAST 이렇게 하면 에러..
					System.out.println("EAST 다");	break;	//EAST 다
				case WEST:
					System.out.println("WEST");	break;
				case SOUTH:
					System.out.println("SOUTH");	break;
				case NORTH:
					System.out.println("NORTH");	break;
			}

			if(d1 == Type.EAST){ // EAST로 비교 못함(당연)
				System.out.println("east 다"); //east 다
			}else{
				System.out.println("east 아니다");
			}

		}
	}


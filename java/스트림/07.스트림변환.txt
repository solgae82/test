자바의 정석 책에 스트림 변환에 대한 부분이 나오는데, 다 살펴볼 필요는 없다고 판단했는데... 
(이미 정리한 부분이 대부분이고, 변환으로 불리기에 애매한 부분도 있어서)

이미 정리한 부분이라 새로울 것도 없지만, 다시 복습한다고 생각하고 정리한다.

1. Stream -> 기본형 스트림
	
	IntStream mapToInt = strs.mapToInt(Integer::parseInt);
	
2. 기본형 -> Stream
	
	Stream<Integer> boxed = ints.boxed();		
	Stream<String> mapToObj = ints.mapToObj((s)->s+"");
	
3. 기본형 스트림끼리 변환 (요건 새로운 추가 정리)

	: IntStream -> LongStream 또는 DoubleStream
	
		IntStream ints = IntStream.of(1,2,3);
		
		LongStream asLongStream = ints.asLongStream();
		DoubleStream asDoubleStream = ints.asDoubleStream();
	

	: LongStream -> DoubleStream
		- LongStream 에서 IntStream  변환 메서드는 없다
	
		LongStream longs = LongStream.of(1,2,3);
		
		DoubleStream asDoubleStream = longs.asDoubleStream(); 
		

	: DoubleStream 에서 IntStream  또는 LongStream 메서드는 없다
	
4. 스트림 -> 부분 스트림
	
	중간 연산인 skip() 과 limit()
	
5. 두개의 스트림 -> 스트림
	
	중간 연산인 concat(stream1, stream2)
	
6. 스트림의 스트림 -> 스트림
	
	:flatMap()은 이미 정리했다.
	: (02.중간연산txt 에 정리되어 있다)

	Stream<String[]> strArrStream = Stream.of(
		new String[] {"abc","def","ghi"}
		,new String[] {"ABC","DEF","GHI"}
	);
			
	Stream<Stream<String>> stream = strArrStream.map(Arrays::stream);
	Stream<String> stream = strArrStream.flatMap(Arrays::stream); //요기를 보라

7. 스트림 <-> 병렬스트림

	스트림 -> 병렬스트림 : 중간 연산인 parallel()
	병렬스트림 - 스트림 : 중간 연산인 sequential()
	
8. 스트림 -> 컬렉션

	
	List<T>	: collect(Collectors.toList())
	Set<T> : collect(Collectors.toMap("key", Function.identity()))
	Collection<T> : collect(Collectors.toCollection(ArrayList::new))

	: (04.최종연산_collect와_Collectors_기본.txt 에 정리되어 있다)

		stuStrm.map(Student::getName).collect(Collectors.toList());
		
		stuStrm.map(Student::getName).collect(Collectors.toSet());		
		
		ArrayList<String> arrList = namesList.stream().collect(
			Collectors.toCollection(ArrayList::new));


9. 컬렉션 -> 스트림 (요건 새로운 추가 정리)

	: Collection<T>, List<T>, Set<T> 등에 있는 stream()로 스트림 변환 가능하다
	
	Stream<String> stream = arrayList.stream();
	Stream<String> stream2 = set.stream();
	
10. 스트림 -> Map
	
	: (04.최종연산_collect와_Collectors_기본.txt 에 정리되어 있다)
	
	Map<String,Student> map = stuStrm.collect(
			Collectors.toMap(s->s.getBan()+"-"+s.getNum(), Function.identity()));
			
11. 스트림 -> 배열
	
	Object[] array = strs.toArray();
	String[] array = strs.toArray(String[]::new);
	String[] array = strs.toArray(size-> new String[size]);


============================= 복습 테스트


꼭 외워둬야할 부분만 복습겸 테스트 하였다.

	Stream<String> strs = Stream.of("1","2","3");
			
	// Stream<T> -> IntStream , LongStream , DoubleStream
	//IntStream mapToInt = strs.mapToInt(Integer::parseInt);
	//LongStream mapToLong = strs.mapToLong(Long::parseLong);
	//DoubleStream mapToDouble = strs.mapToDouble(Double::parseDouble);
	
	// Stream<T> -> T[]
	//Object[] array = strs.toArray();
	//String[] array = strs.toArray(String[]::new);
	//String[] array = strs.toArray(size-> new String[size]);


	IntStream ints = IntStream.of(1,2,3);
	//Stream<Integer> boxed = ints.boxed();		
	//Stream<String> mapToObj = ints.mapToObj((s)->s+"");
	//LongStream asLongStream = ints.asLongStream();
	//DoubleStream asDoubleStream = ints.asDoubleStream();
	//int[] array = ints.toArray();


	LongStream longs = LongStream.of(1,2,3);
	//Stream<Long> boxed = longs.boxed();
	//Stream<String> mapToObj = longs.mapToObj((lo)->lo+"");
	// LongStream.asIntStream() 은 없다
	//DoubleStream asDoubleStream = longs.asDoubleStream(); 
	//long[] array = longs.toArray();


	DoubleStream doubles = DoubleStream.of(1.0,2.0,3.0);
	//Stream<Double> boxed = doubles.boxed();
	//Stream<String> mapToObj = doubles.mapToObj((d)->d + "");
	// DoubleStream.asIntStream(), DoubleStream.asLongStream() 은 없다.
	//double[] array = doubles.toArray();
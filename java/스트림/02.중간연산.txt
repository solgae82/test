skip()
	: 스트림 요소를 건너뛴다
	
	IntStream intStream = IntStream.rangeClosed(1, 10); //12345678910
	intStream.skip(3).forEach(System.out::print); // 45678910

limit()
	: 스트림 요소를 제한
	
	IntStream intStream2 = IntStream.rangeClosed(1, 10); //12345678910
	intStream2.limit(3).forEach(System.out::print); // 123
	
filter()
	: Predicate<? super T>를 구현한 람다를 인수로 넣는다
	: 스트림 중 설정한 람다연산 -> true인 것만 필터링
	: filter()를 여러번 사용할 수 있다.
	
	IntStream intStream = IntStream.rangeClosed(1, 10); //12345678910
	//짝수만 출력	
	intStream.filter((n)->(n%2)==0).forEach(System.out::print); // 246810
	
distinct() 
	: 스트림 요소 중 중복제거
	
	IntStream intStream = IntStream.of(1,2,2,2,3,4,4); //1,2,2,2,3,4,4
	intStream.distinct().forEach(System.out::print); // 1234
	
sorted()
	: Comparator<? super P_OUT> 를 구현한 람다를 인수로 넣는다
		int compare(T o1, T o2);
	: 스트림 요소 (내림차순, 오름차순)정렬 
	: 매우 다양한 방법이 있다. 

	Stream<String> strStream = Stream.of("dd","aaa","CC","cc","b");
	
	//오름차순 정렬
	strStream.sorted().forEach(System.out::print); //CCaaabccdd
	
	strStream.sorted(Comparator.naturalOrder())
	.forEach(System.out::print); //CCaaabccdd		
		
	strStream.sorted((s1,s2)->s1.compareTo(s2))
	.forEach(System.out::print); // CCaaabccdd
	
	strStream.sorted(String::compareTo)
	.forEach(System.out::print); // CCaaabccdd

	//내림차순
	strStream.sorted(Comparator.reverseOrder())
	.forEach(System.out::print); //ddccbaaaCC
	
	strStream.sorted(Comparator.<String>reverseOrder())
	.forEach(System.out::print); // ddccbaaaCC
	
	strStream.sorted((s1,s2)->s2.compareTo(s1))
	.forEach(System.out::print); // ddccbaaaCC

	//대소문자구분 안하고 오름차순
	strStream.sorted(String.CASE_INSENSITIVE_ORDER)
	.forEach(System.out::print); // aaabCCccdd

	//대소문자구분 안하고 내림차순
	strStream.sorted(String.CASE_INSENSITIVE_ORDER.reversed())
	.forEach(System.out::print); //ddCCccbaaa

	//문자 길이 순 정렬
	strStream.sorted(Comparator.comparing(String::length))
	.forEach(System.out::print); //bddCCccaaa

	//문자 길이 순 정렬 (no 오토박싱)
	strStream.sorted(Comparator.comparingInt(String::length))
	.forEach(System.out::print); //bddCCccaaa

	//문자 길이 역순 정렬
	strStream.sorted(Comparator.comparing(String::length).reversed())
	.forEach(System.out::print); // aaaddCCccb

	//IntStream -> Stream<Integer> -> 역순 정렬
	IntStream intStream = IntStream.of(1,2,2,2,3,4,4); //1,2,2,2,3,4,4
	intStream.distinct()
	.boxed()/*IntStream -> Stream<Integer>*/
	.sorted(Comparator.reverseOrder())
	.forEach(System.out::print); //4231
	
	: 
	reversed() 는 (Comparator)인스턴스 메서드 
	Comparator.reverseOrder() 는 클래스메서드
	Comparator.reverseOrder() 는 Comparable 구현한 객체소스의 자연순서를 역순으로 정렬
	
map
	: Function<? super T, ? extentds R> 를 구현한 람다를 넣는다
	: 요소에 저장된 값 중에서 원하는 필드만 뽑아내거나 특정 형태로 변환
	: map()를 여러번 사용할 수 있다.
	
	class A{
		private String name;
		private int age;
				
		public A(String name, int age) {
			super();
			this.name = name;
			this.age = age;
		}
		
		..setter, getter

	}
	Stream<A> aStream = Stream.of(new A("원.txt",2),new A("삼각형.bak",1),new A("정사각형.hwp",3));
	Stream<String> strStream =  aStream.map(A::getName); // Stream<A> -> Stream<String>
	strStream = strStream.map(s->s.substring(s.indexOf('.')+1)); //확장자 뽑아내기(txt,bak,hwp)
	strStream = strStream.map(String::toUpperCase);	// 대문자 변환	
	strStream.forEach(s -> System.out.print(s + ",")); // TXT,BAK,HWP,
	

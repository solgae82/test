제네릭이란?
	자바에서 제네릭(Generic)은 코드 작성 시 타입을 결정하지 않고, 실행 시점에 타입을 결정하는 기법입니다. 
	컴파일 타임에 타입 검사를 강화하고, 런타임 시 타입 안정성을 보장하는 데 도움이 됩니다. 

제네릭의 특징
	- 코드를 작성할 때는 타입이 결정되지 않지만, 실행 시점에 타입이 결정됩니다 
	- 컴파일 타임에 타입 체크를 하게 만들어 줍니다 
	- 런타임에 추가적인 클래스가 생성되지 않습니다 
	- 코드 작성 시점에서 타입을 명확히 할 수 있습니다. 
	- 코드를 실행하기 전 컴파일 타임에 미리 에러를 찾아 알려줍니다 

제네릭의 활용 및 이점
	- 컬렉션(리스트, 맵 등), 스트림, Optional 등의 내부 구현에서 활용됩니다 
	- 타입이 안 맞는 것을 체크해주는 데 도움이 됩니다 
	- 컬렉션에 제네릭으로 지정해놓은 타입이 아닌 객체를 넣으려면 컴파일 에러가 발생합니다. 
	- 제네릭 타입으로 선언한 변수는 컴파일 타임에 타입 체크를 하기 때문에 
	런타임에서 ClassCastException 과 같은 UncheckedException을 보장 받을 수 있습니다. 
	- 개발자가 실수할 여지를 줄여 줄 수 있습니다. 
	- 코드의 재사용성과 타입 안전성을 높일 수 있습니다.
	
--------- : 아래와 같은 (예제) 클래스가 있다고 가정하고 설명을 이어가 보자
	
	interface Eatable{}

	class Fruit implements Eatable{
		public String toString() {return "Fruit";}
	}
	class Apple extends Fruit{public String toString() {return "Apple";}}
	class Grape extends Fruit{public String toString() {return "Grape";}}
	class Toy{public String toString() {return "Toy";}}
	
	class Box<T>{}
	class FruitBox<T extends Fruit & Eatable> extends Box{}
	
--------- : 

제네릭 용어
	class Box<T>{}
	
	Box<T>  : 제네릭 클래스, 'T의 Box' 또는 'T Box'
	T	: 제네릭 타입변수, 타입 매개변수
	Box	: 원시 타입 (raw type)
	
	Box<String>은 컴파일 후 원시타입인 Box로 바뀐다. 즉. 제네릭 타입이 제거된다.

제네릭 사용 버전
	JDK 1.5 부터 가능
	
변수 대입
	Box<String> bx = new Box<String>();
	Box<String> bx = new Box<>(); // OK, JDK 1.7부터 생략 가능
	
기본
	제네릭 클래스 선언 사용시 : 
		class Box<T>{ // 지네릭 타입 T 선언
			ArrayList<T> list = new ArrayList<T>();
			void add(T item) {list.add(item);}
			T get(int i) {return list.get(i);}
		}
		
		
		(지네릭 클래스 타입 결정)
			Box<String> bx = new Box<String>();
		
		(아래 처럼 변경 됨)	
			class Box<String>{ // 지네릭 타입 T 선언
				ArrayList<String> list = new ArrayList<String>();
				void add(String item) {list.add(item);}
				String get(int i) {return list.get(i);}	
			}
		
		(사용)
			bx.add(new Object); //에러, String 타입만 가능
			bx.add("ABC"); //OK
			String item = bx.get(0); // ABC 반환, (String) 형변환 필요없음.
	
	제네릭 메소드 : 메소드에도 사용할 수 있다. 메소드 실행시에 타입을 결정할 수 있다.
		class Box{
			<T> void cal(T s){
				s.toString();
			}
		}
		
		Box b = new Box();
		
		b.<Apple>cal(new Apple()); // Apple
		
		(제네릭 메소드 타입 결정[1])
			class Box{
				<Apple> void cal(Apple s){
					s.toString();
				}
			}
		(제네릭 메소드 타입 결정[2])
			class Box{
				void cal(Apple s){
					s.toString();
				}
			}


제네릭 클래스 제작시 기본 제한

	1. 참조변수에 설정한 제네릭 타입과 대입하는 생성자 제네릭 타입은 같아야한다
		
		Box<String> bx = new Box<String>();  //OK
		Box<String> bx1 = new Box<Integer>(); //에러
		Box<Fruit> bx2 = new Box<Apple>(); //에러, 상속관계라 될 것 같지만 안된다. 기억해라
			
	2. 부모-자식 관계의 제네릭 클래스끼리 대입은 가능하다.단 제네릭 타입변수는 같아야 한다
		
		Box<Fruit> fruitBox = new FruitBox<Fruit>(); //원시타입만 상속관계이므로 OK
	
	3. 제네릭 클래스 제작시 static 멤버에 클래스 제네릭 타입변수를 사용할 수 없다 
		- 클래스 제네릭 타입<T>은 실행타임에 결정된다, 인스턴스 변수로 접근하는 방식이다.
		- static 멤버는 컴파일 타임에 이미 타입이 결정되어 있어야 한다. (그러므로 사용 불가)
		(※ 제네릭 메소드는 static을 사용할 수 있지만, 일단 안된다고 생각하자)
	
	4. new , instanceof 연산자 대상에 <T> 사용할 수 없다. 
	컴파일 시점에 타입이 뭔지 정확히 알아야 한다. (그러므로 사용 불가)
	(클래스 제네릭 T배열을 생성해야할땐, 그냥,"Collections.toArray(T[] a)" 를 뜯어서 보자)
	
	제작예제)
	
		class Box<T>{
			/* static 멤버에 타입변수 T 지정 불가 */
			//static T item: //에러
			//static int compare(T ta, T t2){..} //에러
			
			T[] items; //OK , T타입 인스턴스 참조 변수는 가능
			
			T[] toArray(){ //OK , T타입 인스턴스 메소드는 가능
				
				// 아래 코드는 컴파일 시점에 정확한 형을 알아야 하므로 (x)
				//T[] arr = new T[3]; // 에러, new T[3],  
				
				return null;
			}
		}		

	
<T> 키워드 
	: 타입 매개변수, E, K, V 등 의미 있는 문자로 지정하면 된다.
	암묵적 네이밍 방식 : 
	<T> : 타입(Type)
	<E> : 요소(Element), 예를 들어 List
	<K> : 키(Key), 예를 들어 Map<k, v>
	<V> : 리턴 값 또는 매핑된 값(Variable)
	<N> : 숫자(Number)
	<S, U, V> : 2번째, 3번째, 4번째에 선언된 타입
	
제네릭 제한 범위 키워드
	제네릭 타입 <..>  안에 쓰는 제한 범위 키워드들
				
	? 키워드 (와일드카드)
		: 와일드 카드, '?' 만으로는 Object 타입이라는 의미다
			<?> // 모든타입 가능, <? extends Object> 라는 의미
		
		※ 제네릭 클래스 선언문, 제네릭 메소드 선언문에는 '?' 못 쓴다.
			class A<? extends Fruit> {} // (x) 선언 못함
			<? extends Fruit> get(){} // (x) 선언 못함	
		
		※ 와일드 카드에는 '&' 연산자 못 쓴다
			List<? extentds Fruit> list = null;
			//List<? extentds Fruit & Eatable> list = null; // (x) '&' 사용 못함
			
		사용형식 : 			
			List<? extends Fruit> arr = new ArrayList<Apple>();
			// 참조 변수에만 가능, 할당하는 생성자일땐 범위지정 못하고 타입을 넣어야 함.
					
	extends 키워드 (extends A , implements A)
		: 특정타입형을 (클래스 ,추상클래스, 인터페이스) 구현, 또는 상속한 범위 내 가능
		: 제네릭 클래스 선언문 , 제네릭 메소드 선언문 , 제네릭 클래스 타입에 사용 가능.
		
		사용형식 :
			class class A<T extends Fruit>{}
			class class A<T extends Fruit & Eatable>{}
			<M extends Fruit> cal(M item){..} //제네릭 메소드
			List<? extends Fruit> list = null; // Apple, Grape, Fruit 가능
			List<? extends Eatable> list = null; //Eatable을 구현한 
		
	super 키워드 
		:  특정한 타입형의 조상 이상범위 가능
			<? super Apple> // Apple, Fruit 가능 
		
		※ 제네릭 클래스 선언과 제네릭 메소드 선언엔 super 못 쓴다
			class FruitBox<T super Apple> {} // (x), 선언 못함
			<T super Apple> get(T s){} // (x) 선언 못함
		
		사용형식 :
			List<? super Apple> list = null;
			
	'&' 키워드
		: & 로 연결한 클래스, 추상클래스, 인터페이스 등을 확장했거나, 구현한 클래스라는 의미
		: 제네릭 클래스 선언문, 제네릭 메소드 선언문에만 사용 가능
			<T extends Fruit & Eatable> //Eatable를 구현한 Fruit형과 Fruit 자손형만 가능
		
		※ '?' 와일드 카드에는 '&' 를 쓸 수 없다
			<? extends Fruit & Eatable> (x) 에러
		
		사용형식 :
			class A<T extends Fruit & Eatable>{}
			<M extends Fruit & Eatable> void method(){}
			
	=========== 포인트
	※ 제네릭 클래스 선언문, 제네릭 메소드 선언문에는 ('?' , 'super') 못 쓴다.
	※ '?' 와일드 카드에는 '&' 를 쓸 수 없다
	===========
제네릭 용어
	class Box<T>{}
	
	Box<T>  : 제네릭 클래스, 'T의 Box' 또는 'T Box'
	T	: 제네릭 타입변수, 타입 매개변수
	Box	: 원시 타입 (raw type)
	
	Box<String>은 컴파일 후 원시타입인 Box로 바뀐다. 즉. 제네릭 타입이 제거된다.

제네릭 사용 버전
	JDK 1.5 부터 가능
	
변수 대입
	Box<String> bx = new Box<String>();
	Box<String> bx = new Box<>(); // OK, JDK 1.7부터 생략 가능
	
기본
	지네릭 클래스 선언 : 
	class Box<T>{ // 지네릭 타입 T 선언
		ArrayList<T> list = new ArrayList<T>();
		void add(T item) {list.add(item);}
		T get(int i) {return list.get(i);}
	}
	
	
	지네릭 클래스 타입 결정
	Box<String> bx = new Box<String>();
	
	아래 처럼 변경 됨	
	class Box<String>{ // 지네릭 타입 T 선언
		ArrayList<String> list = new ArrayList<String>();
		void add(String item) {list.add(item);}
		String get(int i) {return list.get(i);}	
	}
	
	
	bx.add(new Object); //에러, String 타입만 가능
	bx.add("ABC"); //OK
	String item = bx.get(0); // ABC 반환, (String) 형변환 필요없음.
	
--------- : 아래와 같은 (예제) 클래스가 있다고 가정하고 설명을 이어가 보자
	
	interface Eatable{}

	class Fruit implements Eatable{
		public String toString() {return "Fruit";}
	}
	class Apple extends Fruit{public String toString() {return "Apple";}}
	class Grape extends Fruit{public String toString() {return "Grape";}}
	class Toy{public String toString() {return "Toy";}}
	
	class Box<T>{}
	class FruitBox<T extends Fruit & Eatable> extends Box{}
	
--------- : 

제네릭 클래스 제작 및 사용시 기본 제한

	1. 참조변수에 설정한 제네릭 타입변수와 대입하는 생성자 제네릭 타입은 같아야한다(일단 이렇게 생각하자)
		
		Box<String> bx = new Box<String>();  //OK
		Box<String> bx1 = new Box<Integer>(); //에러
		Box<Fruit> bx2 = new Box<Apple>(); //에러, 될 것 같지만 안된다. 기억해라
			
	2.부모-자식 관계의 제네릭 클래스끼리 대입은 가능하다.단 제네릭 타입변수는 같아야 한다
		
		Box<Fruit> fruitBox = new FruitBox<Fruit>();
	
	3. 제네릭 클래스 제작시 static 멤버에 클래스 제네릭 타입변수를 사용할 수 없다 
	: 클래스 제네릭 타입<T>은 실행타임에 결정된다, 인스턴스 변수로 접근하는 방식이다.
	: static 멤버는 실행타임에 전에 이미 타입이 결정되어 있어야 한다.
	: new 연산자는 컴파일 시점에 타입이 뭔지 정확히 알아야 한다. (T 사용 불가)
	: instanceof 연산자도 컴파일 시점에 타입이 뭔지 정확히 알아야 한다. (T 사용 불가)
	[참고] Collections.toArray(T[] a) 를 뜯어서 보자
		
		class Box<T>{
			/* static 멤버에 타입변수 T 지정 불가 */
			//static T item: //에러
			//static int compare(T ta, T t2){..} //에러
			
			T[] items; //OK , T타입 인스턴스 참조 변수는 가능
			
			T[] toArray(){ //OK , T타입 인스턴스 메소드는 가능
				// 에러, new T, 컴파일 시점에 정확한 형을 알아야한다.
				//T[] arr = new T[items.length] 
				
				return null;
			}
		}
		
		
	
확장범위 제네릭 키워드
	제네릭 타입 <..>  안에 쓰는 확장 범위 키워드들
	
	<T> 키워드 
		: 타입 매개변수, E, K, V 등 의미 있는 문자로 지정하면 된다.
	
	? 키워드 
		: 와일드 카드, '?' 만으로는 Object 타입이라는 의미다
			<?> // 모든타입 가능, <? extends Object> 라는 의미
		
	extends 키워드 
		: 클래스 ,추상클래스, 인터페이스 : 구현, 또는 상속했다는 뜻
			<? extends Fruit> // Apple, Grape, Fruit 가능
		
	super 키워드 
		:  특정한 타입형의 조상이라는 뜻
			<? super Apple> // Apple, Fruit 가능 
		
		: 제네릭 클래스 선언엔 super 못 쓴다
			class FruitBox<T super Apple> {} //에러(x), 선언 못함
			
	'&' 키워드
		: & 로 연결한 클래스, 추상클래스, 인터페이스 등을 확장했거나, 구현한 클래스라는 의미
			<T extends Fruit & Eatable> //Eatable를 구현한 Fruit형과 Fruit 자손형만 가능
		
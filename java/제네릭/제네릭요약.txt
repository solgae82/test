
참조변수와 대입된 생성자 타입은 같아야 한다(제네릭 타입끼리 상속관계라도 x)

	Box<Fruit> b = new Box<Fruit>(); // (o)
	Box<Fruit> b = new Box<Apple>(); // (x) 사용 못함.

원시 타입의 상속관계는 상관없다(제네릭 타입은 항상 같아야한다)
	
	Box<Fruit> b = new FruitBox<Fruit>();

static 멤버에는 타입변수 <T> 사용 못한다.

	- new T[10] : 사용 못함, new 연산자는 컴파일 시점에 타입 T를 알아야 한다.
	- instanceof T : 사용 못함, instanceof 연산자는 컴파일 시점에 타입 T를 알아야 한다.

<T> 타입 설정은 제네릭클래스, 제네릭메소드만 가능하다
	: '?','super' 못 쓴다
	: 'extends','&' 사용가능
	
	class FruitBox<T extends Fruit>{}
	class FruitBox<T extends Fruit & Eatable>{}
	//class FruitBox<T super Fruit>{} (x) 제네릭 클래스에는 super 못 쓴다
	//class FruitBox<? super Fruit>{} (x) 제네릭 클래스에는 ? 못 쓴다

	<M extends Fruit> void cal(M f){}
	<M extends Fruit & Eatable> void cal(M f){}
	//<M super Fruit> void cal(M f){} (x) 제네릭 메소드에는 super 못 쓴다
	//<? super Fruit> void cal(M f){} (x) 제네릭 메소드에는 ? 못 쓴다
	
'?' 와일드 카드 제한 설정은 참조 변수에만 설정한다
	: '&' 사용불가
	: 'super','extends' 사용 가능
	
	class A<T>{
		List<?> arr1 = new ArrayList<>(); // List<?> arr1 = new ArrayList<Object>(); 와 같다
		List<? super T> arr2 = new ArrayList<T>();
		List<? extends Fruit> arr3 = new ArrayList<Apple>();
		//List<? extends Fruit & Eatable> arr3 = new ArrayList<Apple>(); (x) '&' 사용 불가
	}
	

생성자 제네릭타입 생략은 JDK 1.7부터 가능 
	Box<String> bx = new Box<>(); // OK, JDK 1.7부터 생략 가능
	
생성자 대입은 확실한 제네릭타입으로 설정되어 있어야 한다.
	
	class A<T>{
		List<? extends Fruit> arr = new ArrayList<Apple>;
		List<? super Apple> arr2 = new ArrayList<T>;
		// List<? super Apple> arr2 = new ArrayList<? super Apple>; // (x) 이렇게 못함
	}
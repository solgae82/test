변성(variant)

- 공변, 무변성, 반공변 이라는 개념이 있다.
- 자바에서는 제네릭 타입에서 구현된다
- 자바 제네릭 기본은 무변성이다

-------------------
1. 무변성 : A가 B의 상위 타입일때, T<A> 가 T<B>의 상위 타입이 아니면, 무변성(invariant)
	
	T<A> ≠ T<B> (대입할 수 없다)
	
2. 공변 : A가 B의 상위 타입일때, T<A> 가 T<B>의 상위 타입이면, 공변(covariant)
	
	T<? extends A> p = new T<B>(); //상한경계 와일드카드로 구현
	
3. 반공변 : A가 B의 상위 타입일때, T<A> 가 T<B>의 하위 타입이면, 반공변(contravariant)

	T<? super B> p = new T<A>(); // 하한경계 와일드카드로 구현
	
※ PECS
: producer 이면 'extends' 로 공변처리, consumer 이면 'super' 로 반공변 처리.

------------------- 예제

class MyArrayList<T> {
    Object[] element = new Object[5];
    int index = 0;

    // 외부로부터 리스트를 받아와 매개변수의 모든 요소를 내부 배열에 추가하여 인스턴스화 하는 생성자
    public MyArrayList(Collection<? extends T> in) {
        for (T elem : in) {
            element[index++] = elem;
        }
    }

    // 외부로부터 리스트를 받아와 내부 배열의 요소를 모두 매개변수에 추가해주는 메서드
    public List<T> clone(Collection<? super T> out) {
        for (Object elem : element) {
            out.add((T) elem);
        }
        
        return (List<T>) out;
    }

    @Override
    public String toString() {
        return Arrays.toString(element); // 배열 요소들 출력
    }
}

public class App {

	public static void main(String[] args) {

		MyArrayList<Number> list;
		 
		//생성하기
		Collection<Integer> col = Arrays.asList(1, 2, 3, 4, 5);
		list = new MyArrayList<>(col);

		System.out.println(list); // [1, 2, 3, 4, 5]

		//복사하기
		List<Object> temp = new LinkedList<>();

		List<Number> cloneList = list.clone(temp); 

		System.out.println(cloneList); // [1, 2, 3, 4, 5]
	}

}
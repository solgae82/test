제네릭 클래스 제작시,  클래스명<T>에서 T 범위제한

	: 클래스에 타입매개변수 선언시 (class Fruit<T> 등에서 T 설정)
	: 익명형<T> 또는 특정형 범위 설정<T extends Fruit> 형식을 쓸 수 있다.
	: super 키워드 사용 못함.
	(<T extends Fruit> => Fruit 포함, Fruit 상속 클래스만 타입변수로 사용 가능 하다는 뜻)
	

	// class FruitBox<T super Fruit> (x) super 사용 못함
	
	class FruitBox<T extends Fruit>{ //Fruit클래스 포함, 자손 클래스 포함
		ArrayList<T> list = new ArrayList<T>();
	}
	
	FruitBox<Apple> appleBox = new FruitBox<Apple>(); // OK, 자식 클래스
	FruitBox<Fruit> fruitBox = new FruitBox<Fruit>(); // OK
	FruitBox<Toy> toyBox = new FruitBox<Toy>();	// 에러, Fruit 가족 클래스가 아님
	
	

제네릭타입 참조 변수 범위 제한
	: 제네릭 변수를 사용시, 특정형을 지정하거나, 확장범위를 지정 사용할 수 있다
	: 제네릭 제작시 클래스 내부의 멤버, 매개변수 사용하거나,
	: 외부에서 제네릭 클래스 참조 변수로 선언에도 사용한다.
	: 특정형을 사용하거나, '?' 를 사용한다.
	: <?> 에서 '?'는 Object형라는 뜻

	
	
	(제네릭 클래스 제작시 사용)
		<?> , <? extends T> , <? super T>
		
		(? : 와일드 카드, '?' 만으로는 Object 타입이라는 의미다)
		<?> : 제한없음. 모든 타입 가능. <? extends Object>와 동일
		<? extends T> :  와일드 카드의 상한 제한,  T와 그 자손들만 가능
		<? super T> : 와일드 카드의 하한 제한, T와 그 조상들만 가능
		
		//-----------------------//
		class Juice<T extends Fruit>{
			
			FruitBox<? extends T> f = null; // OK
			
			static void makeJuice1(FruitBox<Fruit> b) {
				//FruitBox<? extends T> T 사용 못함. 
				//왜냐. static에 instance 타입 매개변수 못 쓰니까
				// <Fruit 형만 가능>
			}
			
			static void makeJuice2(FruitBox<? extends Fruit> b) {
				
				// <Fruit 형과 그 자식형만 사용 가능>
			}
			
			static void makeJuice2(FruitBox<? super Apple> b) {
				// <Fruit 형과 그 조상형만 사용 가능>
			}
			
			//인스턴스 메소드 
			void makeInsJuice(Box<? extends T> b) { //인스턴스 메소드는 클래스<T> 타입 사용 가능
				T s = b.get(0);
				System.out.println(s.toString());
			}
		}
		-------- 외부 사용
		Juice.makeJuice1(new FruitBox<Fruit>());
		Juice.makeJuice1(new FruitBox<Apple>()); // 에러,  FruitBox<Fruit>만 가능
		
		Juice.makeJuice2(new FruitBox<Fruit>());
		Juice.makeJuice2(new FruitBox<Apple>()); //OK, Fruit 자식형 가능
		
		Juice.makeJuice3(new FruitBox<Fruit>()); // OK, 조상
		Juice.makeJuice3(new FruitBox<Apple>()); // Ok, Apple
		Juice.makeJuice3(new FruitBox<Grape>()); //에러 ,Apple 아니고 , 조상도 아님
		//-----------------------//
		//인스턴스 메소드 사용
		Juice<Apple> juice = new Juice<>();
		
		Box<Apple> aBox = new Box<>();
		aBox.add(new Apple());
		
		juice.makeInsJuice(aBox); //Apple
		//-----------------------//
		
	(제네릭 클래스 변수 선언 사용시는 특정형을 지정한다)
		<?> , <? extends Fruit> , <? super Fruit>
		
		(? : 와일드 카드, '?' 만으로는 Object 타입이라는 의미다)
		<?> : 제한없음. 모든 타입 가능. <? extends Object>와 동일
		<? extends Fruit> :  와일드 카드의 상한 제한,  Fruit와 그 자손들만 가능
		<? super Fruit> : 와일드 카드의 하한 제한, Fruit와 그 조상들만 가능
	
		//-----------------------//
		Box<?> b = null;	//ok
		Box<? extends Fruit> b1 = null;//ok
		Box<? super Fruit> b2 = null;//ok
		Box<Toy> b3 = null;//ok
		
		//FruitBox<Toy> f= null; // 에러, 제한 범위
		FruitBox<?> f = null; //ok
		FruitBox<Fruit> f1= null; //
		FruitBox<? extends Fruit> f2= new FruitBox<Apple>(); //ok
		FruitBox<? super Apple> f3= new FruitBox<Fruit>();	//ok
		FruitBox<? super Apple> f4= new FruitBox<Apple>();	//ok
		//FruitBox<? super Apple> f5= new FruitBox<Grape>(); //에러 , 제한 범위
		
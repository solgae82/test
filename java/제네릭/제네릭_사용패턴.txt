예제 테스트 기준	
	interface Eatable{}

	class Fruit implements Eatable{
		public String toString() {return "Fruit";}
	}
	class Apple extends Fruit{public String toString() {return "Apple";}}
	class Grape extends Fruit{public String toString() {return "Grape";}}
	class Toy{public String toString() {return "Toy";}}
	
	class Box<T>{}
	class FruitBox<T extends Fruit & Eatable> extends Box{}

1. 제네릭 클래스 선언에 쓰이는 패턴
	class<T>
	class<T extends Fruit>
	//class<T super Fruit> , (x) 클래스 선언시에는 super 못 쓴다

	FruitBox<Apple> appleBox = new FruitBox<Apple>(); // OK, 자식 클래스
	FruitBox<Fruit> fruitBox = new FruitBox<Fruit>(); // OK
	FruitBox<Toy> toyBox = new FruitBox<Toy>();	// 에러, Fruit 가족 클래스가 아님
	

2. 제네릭 메소드 패턴
	: 메소드를 제네릭 하게 쓰는 방식
	: static , instanct 메소드 둘 다 쓸 수 있다.
	
	
	예제 1)--------------------------// 
		/*
		클래스 제네릭 Test<T> 의 'T' 와 
		메소드 제네릭<T extends Fruit> 의 'T'는 서로 다른 영역의 것이다
		*/
		class Test<T>{	
			
			//static 메소드 , 형이 미리 지정되어 있어야 한다 (Fruit)
			static <T extends Fruit> int listSize2(List<T> list1 , List<T> list2) {}
			
			//인스턴스 메소드, 클래스<T> 를 쓸 수 있다.
			<M extends Fruit> int listSize3(List<T> list1 , List<M> list2) {}
			<M extends T> int listSize3(List<T> list1 , List<M> list2) {}
		}
	
	예제 2)--------------------------//  
		class Juice<T extends Fruit>{
			
			FruitBox<? extends T> f = null; // OK
			
			static void makeJuice1(FruitBox<Fruit> b) {
				//FruitBox<? extends T> T 사용 못함. 
				//왜냐. static에 instance 타입 매개변수 못 쓰니까
				// <Fruit 형만 가능>
			}
			
			static void makeJuice2(FruitBox<? extends Fruit> b) {
				
				// <Fruit 형과 그 자식형만 사용 가능>
			}
			
			static void makeJuice2(FruitBox<? super Apple> b) {
				// <Apple 형과 그 조상형만 사용 가능>
			}
			
			//인스턴스 메소드 
			void makeInsJuice(Box<? extends T> b) { //인스턴스 메소드는 클래스<T> 타입 사용 가능
				T s = b.get(0);
				System.out.println(s.toString());
			}
		}
		-------- 외부 사용
		Juice.makeJuice1(new FruitBox<Fruit>());
		Juice.makeJuice1(new FruitBox<Apple>()); // 에러,  FruitBox<Fruit>만 가능
		
		Juice.makeJuice2(new FruitBox<Fruit>());
		Juice.makeJuice2(new FruitBox<Apple>()); //OK, Fruit 자식형 가능
		
		Juice.makeJuice3(new FruitBox<Fruit>()); // OK, 조상
		Juice.makeJuice3(new FruitBox<Apple>()); // Ok, Apple
		Juice.makeJuice3(new FruitBox<Grape>()); //에러 ,Apple 아니고 , 조상도 아님
		//-----------------------//
		//인스턴스 메소드 사용
		Juice<Apple> juice = new Juice<>();
		
		Box<Apple> aBox = new Box<>();
		aBox.add(new Apple());
		
		juice.makeInsJuice(aBox); //Apple
		//-----------------------//
		
3. 참조변수, 메소드 매개변수등에 쓰이는 패턴
		
	class GenTest<T>{
		Box<?> b = null;		//ok
		Box<? extends T> b1 = null;	//ok
		Box<? super T> b2 = null;	//ok
		
		Box<? extends Apple> b3 = null;	//ok
		Box<? super Fruit> b4 = null;	//ok
	}
	
	
	Box<?> b = null;	//ok
	Box<? extends Fruit> b1 = null;//ok
	Box<? super Fruit> b2 = null;//ok
	Box<Toy> b3 = null;//ok
	
	//FruitBox<Toy> f= null; // 에러, 제한 범위
	FruitBox<?> f = null; //ok
	FruitBox<Fruit> f1= null; //
	FruitBox<? extends Fruit> f2= new FruitBox<Apple>(); //ok
	FruitBox<? super Apple> f3= new FruitBox<Fruit>();	//ok
	FruitBox<? super Apple> f4= new FruitBox<Apple>();	//ok
	//FruitBox<? super Apple> f5= new FruitBox<Grape>(); //에러 , 제한 범위
		
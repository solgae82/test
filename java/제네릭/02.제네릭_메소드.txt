제네릭 메소드 기본
	: 메소드 범위에 제네릭타입을 설정하는 방식
	: static , instanct 메소드 둘 다 쓸 수 있다.
	
	형식:
		class Test{
			static <T> String makeJuice(T f) {return f.toString();}
			<T> String makeJuice2(T f) {return f.toString();}
		}
		
	static 제너릭 메서드 호출:
					
		Test.<Fruit>.makeJuice(new Apple()); // Apple 출력
		
		호출하면 아래처럼 결정되어서 호출됨.
		-> static <Fruit> String makeJuice(Fruit f) {..}
		-> static String makeJuice(Fruit f) {..}
		
	인스턴스 제너릭 메서드 호출:
		
		Test t  = new Test();
		t.<Fruit>.makeJuice2(new Grape()); // Grape 출력
		
		호출하면 아래처럼 결정되어서 호출됨.
		-> <Fruit> String makeJuice2(Fruit f) {..}
		-> String makeJuice2(Fruit f) {..}
		
제네릭 메소드 주의사항
	class Test<T>{
		T type = b;
		static <T> String makeJuice(T f) {return f.toString();}
		<T> String makeJuice2(T f) {return f.toString();}
	}
	
	: Test<T> 와 메소드의 <T>는 서로 다른 영역이다.
	: 메소드의 T는 메소드 영역에서 재설정한 타입이고, 그 메소드 범위에만 영향을 준다.
		
제네릭 메소드 테스트 

	-----------기본 설정:
	
	interface Eatable{}

	class Fruit implements Eatable{
		public String toString() {return "Fruit";}
	}
	class Apple extends Fruit{public String toString() {return "Apple";}}
	class Grape extends Fruit{public String toString() {return "Grape";}}
	class Toy{public String toString() {return "Toy";}}


	-----------예제 1: (static 제네릭 메소드 호출)
	: GenTest<T> 과 스택틱 메소드 static <T> 의 타입은 서로 다른 것이다.
	
	class GenTest<T>{	
		static <T> String makeJuice(T f) {		
			return "주스:" + f.toString();
		}
	}
	
	GenTest.<Apple>makeJuice(new Apple()); //주스:Apple , (FM 정석 방법)
	GenTest.makeJuice(new Apple()); // 주스:Apple , (생략,컴파일러 타입추론 가능)
	
	GenTest<Grape> apple = new GenTest<Grape>();
	apple.makeJuice(new Apple());		// 주스:Apple
	apple.<Apple>makeJuice(new Apple());	//주스:Apple
	apple.<Fruit>makeJuice(new Apple());	//주스:Apple
	apple.<Apple>makeJuice(new Grape()); // 에러
	
	-----------예제 2: (static 제네릭 메소드 호출)
	
	class GenTest{
		static <T extends Fruit> String makeJuice(T f) {
			return "주스:" + f.toString();
		}	
	}
	
	GenTest.makeJuice(new Fruit());//주스:Fruit
	GenTest.makeJuice(new Apple()); //주스:Apple
	GenTest.<Grape>makeJuice(new Grape()); //주스:Grape
	GenTest.<Apple>makeJuice(new Grape()); //컴파일 에러
	GenTest.makeJuice(new Toy()); //컴파일 에러
	
	-----------예제 3: (static 제네릭 메소드)
	
	아래 같은 static 메소드 매개변수를 
	
		static  int listSize(List<? extends Fruit> list1 , List<? extends Fruit> list2) {
			return list1.size() + list2.size();
		}
	
	아래로 바꿀 수 있다
	
		static <T extends Fruit> int listSize2(List<T> list1 , List<T> list2) {	
			return list1.size() + list2.size();
		}
	
	코드가 짧아져서 가독성이 좋아졌다.
	근데 차이가 약간 있다
	
	GenTest.listSize(List<Apple> list, List<Grape> list); 
	서로 다른 타입 매개변수 타입이 가능하지만,
	
	GenTest.<Apple>listSize2(List<Apple> list, List<Apple> list); 
	로 제네릭 메소드 <Apple> 설정한 대로 같은 <Apple>의 매개변수타입만 사용 된다.
	
	-----------예제 4: (인스턴스 제네릭 메소드 호출)
	
	: 인스턴스 제네릭 메소드는 실행타임에 결정된다.(잊지 말자)
	: GenTest<T> 와 메소드의 <T>는 다른 것 , 
	: 메소드 <T>는 메소드에서 타입을 설정해서 메소드 범위에 사용
	: 메소드 <M extends T> 는 GenTest<T> 의 <T>를 물려받아서 확장한 M 타입이라는 뜻
	변경 방식 : 
		GenTest<T>{
			<M extends T> String makeToString2(M f);
		}
		
		GenTest<Fruit> f = new GenTest<Fruit>();
		..
		
		GenTest<Fruit>{
			<M extends Fruit> String makeToString2(M f); //1차 변경
		}
		..
		
		f.<Apple>makeToString2(new Apple());
		
		GenTest<Fruit>{
			String makeToString2(Apple f); //최종 변경
		}
	
	테스트 : 
		class GenTest<T>{	
			
			<T> String makeToString(T f) {		
				return "문자열:" + f.toString();
			}
			
			<M extends T> String makeToString2(M f) {		
				return "문자열:" + f.toString();
			}
		}
		
		GenTest<Toy> gen = new GenTest<Toy>();
		gen.<Apple>makeToString(new Apple()); // 문자열:Apple
		// gen.<Apple>makeToString2(new Apple()); //에러,  <M extends Toy> 인데 <Apple>을 설정했으니 
		
		GenTest<Fruit> gen = new GenTest<Fruit>();
		gen.<Grape>makeToString(new Grape()); // 문자열:Grape
		gen.<Fruit>makeToString2(new Fruit()); // 문자열:Fruit
		gen.<Apple>makeToString2(new Apple()); // 문자열:Apple
		gen.<Grape>makeToString2(new Grape()); // 문자열:Grape	
		//gen.<Toy>makeToString2(new Toy()); //에러, <M extends Fruit> 인데 <Toy>을 설정했으니
		
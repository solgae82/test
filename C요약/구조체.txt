1. 구조체 정의

	//---------기본 구조체 정의
	struct point{
		int x;
		int y;

	};

	void main(){
		struct point p1;

		p1.x=1;
		p1.y=2;
		printf("%d \n",p1.x); //1
	}
	
	//---------구조체정의와 동시에 변수 선언
	struct point{
		int x;
		int y;

	}p1,p2;
	
	void main(){
		
		p1.x=1;
		p1.y=2;
		p2.x=3;
		p2.y=4;
		printf("%d \n",p1.x); //1
	}

	//--------- 구조체 변수 초기화
	struct point{
		int x;
		int y;
		char name[20];

	};
	
	void main(){
		struct point p1 ={10, 20, "Navi"};
		struct point p2 ={.x=10, .y=20, .name="Navi"};
	}

2. 구조체와 배열

	//--------- 구조체 배열 기본
	struct point{
		int x;
		int y;
		char name[20];
	};

	int main(void){
		struct point p1[2];
		struct point p2[2]={{10,20,"dong"},{30,40,"dong1"}};

		p1[0].x = 10;
		p1[0].y = 20;
		p1[0].name ="dong";
		return 0;
	}

3. 구조체와 포인터
- (*p).name == p->name 같다
- 구조체변수 주소와, 구조체 첫 멤버 주소는 같다.

	//--------- 구조체변수를 포인터변수로 대입해서 접근
	
	struct point{
		int x;
		int y;
		char name[20];
	};

	int main(void){
		struct point p1={10,20,"dong"};
		struct point *sPtr = &p1; // <-대입
		
		printf("%s \n",(*sPtr).name); //dong
		printf("%d \n",sPtr->x); //10
		printf("%d \n",sPtr->y); //20
		return 0;
	}

	//--------- 구조체변수 안에 다른 구조체 포인터변수 사용하기

	struct point{
		int x;
		int y;
		char name[20];
		struct person *man; //다른 구조체 포인터 변수
	};

	struct person{
		char name[20];
		int age;
	};

	int main(void){
		struct point p1={10,20,"dong"};
		struct person ps={"pointer_dong",38};
		
		p1.man = &ps; // <- person 구조체 point 내부 멤버인  person 포인터에 주소대입
		
		printf("%s \n",p1.man->name); //pointer_dong
		printf("%d \n",p1.man->age); //38
		
		return 0;
	}

	//--------- 구조체변수 안에 자기자신 구조체 포인터변수 사용하기
	struct point{
		int x;
		int y;
		char name[20];
		struct point *ptr; // <- 자기자신 구조체 선언
	};

	int main(void){
		struct point p1={10,20,"dong"};
		struct point p2={30,40,"pointer_dong"};
		
		p1.ptr = &p2; //구조체 변수 대입
		
		printf("%s \n",p1.ptr->name); //pointer_dong
		printf("%d \n",p1.ptr->x); //30
		printf("%d \n",p1.ptr->y); //40
		return 0;
	}

4. 구조체와 함수
	struct person{
		char name[20];
		int age;
	};

	void show1(struct person s){ 
		s.age++;
		printf("%s \n",s.age); // <-복사된 값 접근
	}
	void show2(struct person* ps){ 
		printf("%s \n",ps->age); // <-포인터 접근
	}
	struct person get_person(){ //person
		struct person p1 ={"dong2",30};
		return p1;
	}
	void main(){
		struct person p1 ={"dong",20};
		struct person r;

		//call by value

		show1(p1);		//21
		printf("%d \n",p1.age); //20

		//call by reference

		show2(&p1);		//21
		printf("%d \n",p1.age);	//21

		//구조체 리턴
		r = get_person();
		printf("%s , %d세 \n",r.name,r.age);
	}

5. 구조체와 대입
	struct person{
		char name[20];
		int age;
	};

	void main(){
		struct person p1 ={"dong",20};
		struct person p2;

		p2 = p1; //값 복사가 이뤄진다.
	}

6. 중첩 구조체
- 포함될 구조체를 먼저 정의한 후 포함할 구조체를 정의 한다
	struct point{	// 먼저 정의 해야한다
		int x;
		int y;
	};
	struct circle{
		struct point p; //다른 구조체 정의
		int radius;
	};

	void main(){
		struct circle c1 ={{1,2},3.14}; 
		struct circle c2 ={3,4,3.14};
		
		/*
		c1.p.x <- 1
		c1.p.y <- 2
		c1.p.radis <- 3.14

		c2.p.x <- 3
		c2.p.y <- 4
		c2.p.radis <- 3.14
		*/
	}

7. typedef 로 구조체 정의하기
	
	//--------- 기본 정의
	struct person{
		char name[20];
		int age;
	};

	typedef struct person PERSON;
	typedef int INT;

	void main(){
		INT a = 10;
		PERSON person = {"dong",28};
	}

	//---------- 정의와 동시에 typedef 사용하기
	//구조체 변수이름이 있는 형식
	typedef struct person{
		char name[20];
		int age;
	} PERSON;

	//또는 구조체 이름 없이도 가능
	
	typedef struct{
		char name[20];
		int age;
	} PERSON2;

	void main(){
		
		PERSON person = {"dong",28};
		struct person p2; //선언 가능

		//구조체 이름 없이 정의했을때
		PERSON2 person2 = {"dong2",38};
		//struct PERSON2 p2; //불가능

	}
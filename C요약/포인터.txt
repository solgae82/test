1. 포인터 기본

- 포인터 변수 : 시스템에 따라 4byte(32bit) , 8byte(64bit) 
- 포인터 타입은 메모리를 참조하는 방법을 알려준다

	int a = 5;
	int *ptr = &a; //a 변수의 주소값 대입

	printf("%d \n",ptr); //ptr변수 값, 변수 a의 주소

	/* ptr변수값이 a변수 주소로 가서 int형 자료만큼 읽는다 */
	printf("%d \n",*ptr); // 5 반환 

	(*ptr)++;  //포인터 내부값 연산 , a++;
	printf("%d \n",*ptr); // 6 반환 

- call by value(값 복사) 
	function echo (int a){printf("%d \n",a);}
	void main(void){
		int v = 10;
		echo (v); // v 값을 복사해서 함수에 넘겨준다		
	}
- call by reference
	function echo (int* a){printf("%d \n", *a);}
	void main(void){
		int v = 10;
		echo (&v); // v 값의 주소를 복사해서 함수에 넘겨준다		
	}

2. 포인터와 배열

- 배열이름은 '상수 포인터', 상수이다.
- 배열 첫번째 요소는 주소값을 나타낸다
- int *p =0; : NULL 과 같다
- 배열은 '상수 포인터' 이므로 포인터 연산 안된다,
- arr[i] == *(arr+i) 

	int arr[5] = {1,2,3,4,5};
	int *ptr = arr;

	printf("%d \n",arr); //첫번째 주소반환
	printf("%d \n",*arr);  // 첫번째요소 반환 , 1
	printf("%d,%d \n",ptr[0], ptr[1]); // 1,2

	printf("%d %d \n",*ptr ,*(ptr)); // 1, 1
	printf("%d \n",*(ptr+1));	// 2
	printf("%d \n",*(ptr+2));	// 3
	printf("%d \n",*(++ptr));	// 2 , 포인터 연산(2번째 요소로 이동됨)
	printf("%d \n",*(ptr));		// 2
	printf("%d \n\n",*(ptr+1));	// 3

	printf("%d %d \n",*arr ,*(arr)); // 1, 1
	printf("%d \n",*(arr+1));	// 2
	printf("%d \n",*(arr+2));	// 3
	//printf("%d \n",*(++arr)); //error , 배열은 상수


3. 문자열 상수

- 문자열을 표현하는 방법으로는 char[]배열과, char * 포인터 방법이 있다.
- 문자열 상수는 메모리 공간에 저장되면, 그 순간 문자열 상수 주소값이 반환된다.

	char str1[5]="ABCD";
	char *ptr2 ="ABCD";	//문자열 상수, ptr2에는 상수주소값이 있다.

	str1[1] = 'Z'; //변경가능
	ptr2[1] = 'Z'; //error, 변경 불가능, 상수문자열이므로

4. 포인터와 const

- 가르키는 변수 조작 금지 시키는 상수화(포인터로 가르키는 변수값 변경 못함)
	 int a = 10, b=20;
	 const int* ptr = &a;
	 //*ptr = 30; //Error!, 포인터를 통해 변수값 변경 불가능
	 a = 30; // 가능

	 ptr = &b; //다른 변수 주소 대입 가능
	 //*ptr = 40; //Error!, b 값 수정 불가

- 포인터 상수화(한번 지정한 포인터 주소값을 바꿀 수 없다, 포인터로 가르키는 변수값 변경 가능)
	int a = 10 , b = 20;
	int* const ptr = &a;
	*ptr = 30; //a 값 수정 가능
	//ptr = &b; //다른 변수 주소 대입 불가
	a = 30; // a 값 수정 가능

- 포인터 상수화 + 가르키는 변수 조작 금지
	int a = 10, b=20;
	const int* const ptr = &a;
	ptr = &b; //Error!
	*ptr = 30; //Error!
	

5. 포인터 배열

- 포인터를 요소로 지니는 배열

	int a=10, b=20, c=30;
	int* ptr[3] = {&a, &b, &c};
	printf("%d \n", ptr[2]);  //변수 c의 주소값
	printf("%d \n", *ptr[2]);  //변수 c의 값 30 반환

6.배열 포인터

- 배열을 가르킬 수 있는 포인터

	int arr[3][2] == int (*ptr)[2]; //같다
	int arr[3][2][2] == int (*ptr)[2][2]; //같다

- 다차원 배열포인터

	void show_data(int (*ptr)[4]);
	
	와 아래는 같다. 함수 인자에만 예외적으로 표현되는 문법인다
	
	void show_data(int ptr[][4]); // 예외적 문법


- 다차원 배열포인터 : 아래 표현은 모두 같다

	/* 기본공식 -> arr[i] == *(arr+i) */

	arr[i][j] 
	*(arr[i] + j)
	(*(arr + i))[j]
	*(*(arr + i) + j)

7. 더블포인터(이중포인터)

	int a = 10;
	int* ptr = &a;
	int** ptr2 = &ptr;

8. 함수포인터

- 함수이름은 메모리상에 존재하는 함수의 위치를 가르키는 포인터
- 함수포인터는 우리가 정의한 함수를 운영체제(윈도우즈,리눅스)에게 알려줄때 유용하게 사용되는 개념.
	
	void add(int a, int b){
		pritnf("%d \n", a + b);
	}

	void maint(void){
		void (*fptr)(int, int) = add;
		fptr(10, 20); // 30출력
	}

9. void 포인터 

- void 포인터는 모든 타입의 포인터를 담을 수 있다.
- void 포인터는 명시적 형변환 후 사용가능한다
- 메모리 동적할당에서 쓴다

	char c = 'a';
	int n = 1;
	void *vp; //모든형의 포인터를 다 담을 수 있다
	
	vp = &c;
	vp = &n;

	*vp = 20; //error , 타입을 모르잖아

	*((int *) vp) = 20; // 요렇게 형변환 해야한다
	
- main 함수
	int main(int args, char **argv){..}
	int main(int args, char* argv[]){..}

	/* 테스트 */
	int main(int args, char* argv[]){
		
		int i=0;
		printf("전달될 매개변수 수 : %d \n",args);

		for(i=0; i<agrs; i++){
			printf("%d번째 문자열 : %s \n",i, argv[i]);
		}
	}

	//위 파일을 컴파일하고 실행 한 경우

	d:\test abcd 1234
	전달될 매개변수 수 : 3
	0번째 문자열 : test
	1번째 문자열 : abcd
	2번째 문자열 : 1234
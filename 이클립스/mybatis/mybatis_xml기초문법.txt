1. <typeAlias>

	마이바티스는 <typeAliases> 태그에 <typeAlias>를 메인 환경파일에 한꺼번에 등록하고 사용한다.
	sql-mapper-config.xml
		<configuration>
		  <typeAliases>
			<typeAlias alias="profileVO"  type="com.solgae.board.domain.profileVO"/>
		  </typeAliases>
		</configuration>

	mapper.xml

		<mapper namespace="com.solgae.board.mapper.BoardMapper">
			<select id="read" resultType="profileVO"> <--  resultType을 alias명으로 대체-->
				<![CDATA[
				..쿼리
				]]>
			</select>
		</mapper>

2. <resultMap>

	1번에서 설정한 <typeAlias> 설정을 기준으로 설명.

	<resultMap type="profileVO" id="resultVO">
		<id property="id" column="PR_ID"/>
		<result property="name" column="PR_NAME"/>
		<result property="age" column="PR_AGE"/>
	</resultMap>
		
	<select id="read" resultType="resultVO"> <--  resultType을 resultMap태그 id명 대체-->
		<![CDATA[
		..쿼리
		]]>
	</select>

3. insert
	: insert 처리 갯수(int) 반환함

	<insert id="create" parameterType="boardVO">
		insert into tbl_board (title, content, writer) 
		values(#{title},#{content},#{writer})
	</insert>

	자동키 생성해서 넣기
	<insert id="create" parameterType="boardVO">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT SAMPLE_SEQ.NEXTVAL AS ID FROUM DUAL <!--오라클-->
			<!-- 또는 -->
			SELECT max(id) + 1 FROM tbl_board 
		</selectKey>

		<!-- insert 실행 전(BEFORE) boardVO.id = id 로 들어가게 된다 -->

		insert into tbl_board (id, title, content, writer) 
		values(#{id},#{title},#{content},#{writer})
	</insert>
	
	삽입한 레코드 id값 반환 셋팅
	<insert id="create" parameterType="boardVO">
		<selectKey keyProperty="id" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>

		<!-- insert 실행 후 (AFTER) boardVO.id = id 로 들어가게 된다 -->

		insert into tbl_board (id, title, content, writer) 
		values(#{id},#{title},#{content},#{writer})
	</insert>
	
	ServiceImpl.java 코드
		public Integer create(BoardVO boardVO) throws Exception {
			
			Integer cnt = mapper.create(boardVO);
			
			return boardVO.getId(); //담겨진 삽입 ID 반환
					
		}

4. select
	
	<select id="read" parameterType="boardVO" resultType="boardVO">
		select bno, title, content, writer, regdate, viewcnt 
		from tbl_board 
		where bno = #{bno}
	</select>

5. update
	: update 처리 갯수(int) 반환함

	<update id="update" parameterType="boardVO">
		update tbl_board 
		set
			title=#{title},
			content=#{content},
			writer=#{writer}
			
		where
			bno = #{bno}
	</update>

6. delete
	: delete 처리 갯수(int) 반환함

	<delete id="delete" parameterType="boardVO">
		delete from tbl_board where bno = #{bno}
	</delete>


7. sql, include
	<sql id="search">
		ane title= #{title}
	</>
	<select id="countPaging" parameterType="boardVO"  resultType="int">
		<![CDATA[
			select count(bno) 
			from tbl_board
			where bno > 0 
			
		]]>
		<include refid="search"></include>
	</select>

8. 동적쿼리
	4개 정도가 많이 쓰인다
	OGNL 사용한다(jstl이 이걸로 구현했다고 함)

	if
	choose (when, otherwise)
	trim (where, set)
	foreach


	----------- <if>
		<if test="saerchType !=null and searchType == 't'.toString()">
			and title like concat('%',#{keyword},'%')
		</if>
	
	----------- <choose>

		<choose>
			<when test="searchType == 'c'.toString()">
				and title like concat('%',#{keyword},'%')
			</when>
			<when test="searchType == 'w'.toString()">
				and title like concat('%',#{keyword},'%')
			</when>
			<otherwise>
				and title like concat('%',#{keyword},'%')
			</otherwise>
		</choose>

	----------- <trim> (where, set)
	trim은 쿼리 문장의 앞이나 뒤의 중복 단어를 제거해주는 역할을 한다

		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="searchType == 't'.toString()">
				AND title = '하늘'
			</if>
			<if test="searchType == 'tc'.toString()">
				AND title = '땅'
			</if>
		</trim>

	만약 두개 조건이 모두 맞아 출력해야한다면 설정한 AND 또는 OR 문장이 제일 앞에 있을때 지워준다
	그러므로 
		WHERE AND title = '하늘' AND title = '땅' (x)
		WHERE title = '하늘' AND title = '땅' (O)

	이렇게 출력된다.

	똑같은 기능태그로 <where>가 있다 

		<where>
			<if test="searchType == 't'.toString()">
				AND title = '하늘'
			</if>
			<if test="searchType == 'tc'.toString()">
				AND title = '땅'
			</if>
		</where>

	뒤 문자를 제거하는 것도 해보자
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">
				 title = #{title},
			</if>
			<if test="content != null">
				 content = #{content},
			</if>
		</trim>

	이것도 마찬가지로 뒤의 , 문자를 제거해서 
		SET title = #{title},content = #{content}, (x)
		SET title = #{title},content = #{content}  (o)

	이렇게 문장을 만들어 줄 것이다.

	같은 기능을 하는 태그로 <set> 태그가 있다
		<set>
			<if test="title != null">
				 title = #{title},
			</if>
			<if test="content != null">
				 content = #{content},
			</if>
		</set>

	trim 태그에 suffix 속성도 있다 이것은 말 그대로 모든 문장 조합 후 뒤에 설정된 단어를 붙여준다.
	

	----------- <foreach>
	배열이나 리스트등에 담긴 데이터를 직렬화 문장으로 만들 경우가 있다.
	예를 들어 IN (1, 2, 3..) 등 인데 , 이런 문장을 만들때 유용한 동적 반복문 태그이다

		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="commentNos != null">
				comment_no IN 
				<foreach collection="commentNos" item="cno" index="index" open="(" close=")" separator="," >
					#{cno}
				</foreach>
			</if>
		</trim>

		결과 comment_no IN (1,2,3...) 

	속성을 잘 관찰해보면 이해가 갈 것이다 
	index는 루프 돌면서 0부터 시작하는 숫자값을 반환하는 가보다.. 쓸일이 있을지 모르겠지만..

	----------- 정정메소드 또는 필드 사용하기
	정적 메소드등을 동적쿼리에 사용할때 쓰는 문법이다

	예를들어 이런식이다

		<if test="@org.apache.commons.lang.StringUtils@isNotEmpty(userId)">
			..추가 쿼리 문장
			${userId} <!-- #{userId} 로 하면 에러가 난다고 함. 버그(확인해야 함)-->
		</if>

	@클래스명@정적메소드 또는 @클래스명@정적필드


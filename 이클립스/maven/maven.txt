특징
	프로젝트 구조와 빌드단계가 정형화 되어 있다
	중앙저장소 지원(템플릿 archetype, 의존 관계 라이브러리, 메이븐 플러그인 등 관리, 자동 다운로드)

메이븐 버전 확인
	mvn -v , mvn -version

기본 자바프로젝트 생성

	메이븐은 프로젝트 종류에 따라 미리 구조가 갖춰진 템플릿 프로젝트가 제공된다.
	이 같은 기능을 'archetype(아키타입)' 이라 한다
	archetype은 메이븐 중앙저장소에서 관리한다.

	생성방법1. 옵션 설정으로 프로젝트 생성
		mvn archetype:generate 
		-DgroupId=com.solgae 
		-DartifactId=myfirst 
		-DarchtypeArtfactId=maven-archetype-quickstart 
		-DinteractiveMode=false

	생성방법2. 템플릿 프로젝트 생성
		archetype 종류에 따라 카다로그를 선택 후 리스트를 보고 대화형 모드로 생성
		
		mvn archetype:generate -DarchetypeCatalog=internal
		
		카다로그
		- internal : 'http://docs.codehaus.org/display/MAVENUSER/Archetypes+List' 에서 관리하는 목록
		- local : 본인이 만든 아키타입 카다로그
		- remote : 외부 사이트에서 제공하는 아키타입 카다로그.

		직접 대화형으로 설정값들을 입력하며 생성하면 된다.


	생성명령어로 'myfirst' 프로젝트 디렉토리가 생성되었을 것이고, 그 디렉토리 안에 pom.xml이 생겼을 것이다

	pom.xml 내용을 보면,
		<groupId>com.solgae</groupId>
		<artifactId>myfirst</artifactId>
		<version>1.0-SNAPSHOT</version>
		<packaging>jar</packaging>
		<name>myfirst</name>
		<url>http://maven.apache.org</url>

	등을 주목해 보면, 프로젝트 생성시 설정한 값들이다. 
	packaging 값이 'jar' 인 것으로 볼때 일반 자바 애플리케이션 프로젝트이다.


	생성된 디렉토리 구조
		myfirst
			-src
				-main
					-java
						-com
							-solgae
				-test
					-java
						-com
							-solgae

			pom.xml

메이븐 빌드 대략적인 기본
	- 메이븐 명령은 option , goal, phase 조합으로 실행할 수 있다
		mvn [options] [<goal(s)>] [<phase(s)>]

	- 옵션(option)은 pom.xml이 없는 곳에서도 실행 가능.
	- 골(goal)과 페이즈(phase)는 메이븐 기반 프로젝트 디렉토리에서 실행 가능.

	- 사용가능 옵션 보기
		mvn -help
	- '-D' 옵션은 인자를 전달하는 접두어이다
	  ex)단위테스트 실행 정지
	  	mvn -Dmaven.test.skip=true

	- 페이즈 와 골을 조합하여 빌드를 진행한다
		mvn clean test : clean과 test페이즈를 실행
		mvn clean compiler:compile : clean 페이즈 실행, compiler플러그인의 complile 골을 실행.
		mvn -Dmaven.test.skip=true test : 옵션으로 단위테스트 실행 정지, test페이즈 실행.

	- mvn test : 프로젝트 디렉토리에서 test 페이즈 명령어로 컴파일 및 테스트등의 빌드를 진행한다 

메이븐 설정파일
	setting.xml : 메이븐 빌드 툴 관련한 설정 파일
			-MEVEN_HOME/conf/setting.xml 디렉토리에 기본 파일 위치
			-사용자별로 다른 설정을 한다면 윈도우즈의 경우
				USER_HOME/.m2/setting.xml 추가 설치 할 수 있다

			로컬저장소 설정 : 
			메이븐은 필요로 하는 의존관계 라이브러리, 플러그인등을 사용자 pc의 로컬 저장소에 다운로드 한다.
			setting.xml > settings 태그 > localRepository 태그에 값을 설정할 수 있다.
				ex) <localRepository>D:\repo</localRepository>

			설정된 값이 없다면 윈도우즈 기본 값은 MEVEN_HOME/.m2/repository 디렉토리이다

	pom.xml	: 메이븐 기반 프로젝트 설정 파일. 생성한 프로젝트 디렉토리 바로 안에 있다

pom.xml 
	메이븐은 프로젝트 디렉토리 안의 pom.xml을 읽어들여 빌드를 진행한다.
	다른 설정 파일로 빌드를 원할 경우 빌드시 -f , --file 옵션을 사용한다.

		ex)mvn -f mypom.xml test 
	
	pom.xml 기본 카테고리 영역
		-프로젝트 기본정보
		-빌드설정
		-프로젝트 관계 설정
		-빌드환경

	기본값 분석
		<groupId>com.solgae</groupId>
		<artifactId>myfirst</artifactId>
		<version>1.0-SNAPSHOT</version>
		<packaging>jar</packaging>
		<name>myfirst</name>
		<url>http://maven.apache.org</url>


		- groupId : 프로젝트 생성 조직 고유 아이디

		- artifactId : 프로젝트 식별 아이디 

		- version : 프로젝트 버전명. 뒤에 접미사 'SNAPSHOT'은 메이븐 예약어이며,
			'SNAPSHOT'이 붙으면 라이브러리를 다른 방식으로 관리한다.
		
		- packaging : jar, war, ear, pom 등
		
		- name : 프로젝트 이름
		
		- url : 프로젝트 사이트가 있다면 site url등록.

		메이븐을 중앙 저장소에 모든 프로젝트를 관리하기 때문에 이름 충돌이 없어야 한다.
		'groupId' + 'artifactId' 아이디는 전세계적으로 유일해야 한다.


	최상위 pom.xml 설정파일

		pom.xml 파일은 상속 구조로 되어 있다.
		최상위 pom.xml은 어디엔가? 있을 것이며, 
		이 최상위 pom.xml을, 생성한 프로젝트의 pom.xml이 상속 받는 구조로 되어있다.
		
		생성한 프로젝트 디렉토리에 안으로 들어가서 아래 명령어로 최상위 pom.xml 에 상속받은 설정된 값들을 확인 할 수 있다.
			
			mvn help:effective-pom

		프로젝트 디렉토리의 pom.xml에는 없는 값들이 있을 것이다.
		이 값들을 재정의 하고 싶다면, 해당 프로젝트 디렉토리의 pom.xml중 해당 태그들을 재정의 하면 된다.
		기본 설정값이 아닌 플러그인의 설정값들은 해당 프로젝트 pom.xml build > plugins > plugin 태그 안에서 재정의 하면된다.

			ex) 아래 예는 웹프로젝트(war)의 웹 자원 관리 디렉토리를 수정하는 예제이다
			기본은 src/main/webapp 인데, 줄여서 webapp 디렉토리로 수정한다.
			웹프로젝트 템플릿은 'maven-war-plugin' 플러그인을 쓴다.
			-----------------pom.xml
			<xml>
				<build>
					<plugins>
						<plugin>
							<artifactId>maven-war-plugin</artifactId>
							<configuration>
								<warSourceDirectory>
								wabapp
								</warSourceDirectory>
							</configuration>
						</plugin>
					<plugins>
				<build>
			<xml>

		하지만, 메이븐의 기본 빌드 라이프 사이클은 변경 할 수 없다.


빌드 

	- 간단한 빌드를 해보자

		mvn package (페이즈명령어)로 빌드하면 컴파일 , 테스트, war파일로 압축 진행한다.
		메이븐의 빌드 산출물은 target 디렉토리이다.
	
	- 페이즈(phase), 플러그인, 골(goal)
		빌드 라이프 사이클은 각 단계를 '페이즈(phase)'라고 한다.
		'페이즈' 마다 플러그인들이 있으며, 플러그인은 pom.xml에서 플러그인 연결 후 사용한다.
		'플러그인'의 각 실행 명령어들을 '골(goal)' 이라 한다
		
		페이즈는 빌드 단계를 명시하는 명령어이고, 
		실제적 빌드는 페이즈에 연결된 플러그인의 '골'이 한다.


		예를 들어 complile 페이즈를 실행해보자

			mvn compile

		이 페이즈를 실행하면 'compile' 페이즈에 연결된 'compiler' 플러그인의 'compile'골이 실행된다.

		이 플러그인을 직접 명령어로 실행할 수도 있다
		플러그인을 직접 실행하는 명령어 형식은 다음과 같다

			mvn [groupId]:[artifactId]:[version]:[goal]

		다음 예제는 풀네임 플러그인 실행 명령어이다.
			
			mvn org.apache.maven.plugins:maven-compiler-plugin:2.1:compile

		너무 명령어가 길다. 생략할 수 있는 규칙들이 있다
		
		버전은 생략가능하다. 생략할 경우 로컬 저장소의 가장최신 버전으로 실행한다.
			
			mvn org.apache.maven.plugins:maven-compiler-plugin:compile
		
		artifactId 이름이 maven-$name-plugin, $name-maven-plugin 규칙을 따른다면 
		$name 만을 사용할 수 있다
			
			mvn org.apache.maven.plugins:compiler:compile

		중앙저장소에 위치한 플러그인을 찾기 위한 groupId가,
		MEVEN_HOME/conf/settings.xml 
		USER_HOME/.m2/settings.xml 
		파일 중에 아래와 같이 설정되어 있다면 생략할 수 있다
			<pluginGroups>
				<pluginGroup>mvn org.apache.maven.plugins</pluginGroup>
			</pluginGroups>

		최종적으로 artifactId의 생략된 이름과, goal 이름으로 최종적으로 줄여서 실행시킬 수 있다.
			
			mvn compiler:compile

		이 최종 명령어가 compile 페이즈에 연결되어 있으므로 아래와 같이 페이즈 명령어로 해도 같은 
		플러그인을 실행 시키는 것이 된다.
					
			mvn compile  # compile 페이즈 실행 (=compiler:compile)
			(==)
			mvn compiler:compile #compiler 플러그인의 compile 골 실행


		메이븐에서 모든 실행 명령은 플러그인 명령어이다.
		위에서 프로젝트 생성시 사용했던 명령어도 사실은 플러그인의 골을 실행 시킨 것이다
			mvn archetype:generate # 'maven-archetype-plugin' 플러그인의 'generate' 골 실행

	- 메이븐 라이프사이클	
		
		메이븐 라이프사이클은 크게 3가지로 나뉜다
		-기본 라이프 사이클
		-clean 라이프 사이클
		-site 라이프 사이클
		
		메이븐의 기본페이즈에 연결되어 있는 플러그인은 메이븐 중앙저장소에서 자동 다운로드한다.
		따라서 빌드할때 추가적인 설정을 하지 않아도 된다.

		3가지 라이프사이클 별로 페이즈는 대략 다음과 같다

			- 기본 라이프 사이클 페이즈
			기본 라이프 사이클의 페이즈들은 순서대로 의존관계를 가지며, 특정 페이즈를 실행하면 의존관계에 있는 
			페이즈를 실행하고 해당 실행 페이즈를 실행한다.
			아래는 페이즈이 순서를 나타내며 서로 의존 관계로 연결되어 있다
			mvn test 를 실행하면
			process-resource -> compile -> test 페이즈 식으로 서론 의존관계 페이즈를 실행한다
			
				
				1. mvn process-resource : 자원 복사
				2. mvn compile : 소스 코드 컴파일
				3. mvn test : Junint 단위 테스트.테스트 실패하면 빌드도 실패(기본)
				4. mvn package : jar, war, ear 등으로 압축
				5. mvn install : 현재 빌드 로컬 저장소(pc)에 압축파일 배포
				6. mvn deploy : 원격저장소에 압축파일 배포
				
			- clean 라이프 사이클 페이즈
				mvn clean : 이전에 빌드한 산출물을 모두 삭제. target 디렉토리 모두 삭제

			- site 라이프 사이클 페이즈

				mvn site : 빌드 후 문서 사이트 생성, target/site 디렉토리에 생성.
				mvn site-deploy : 빌드 후 새성한 문서사이트를 서버에 배포.

		기본 라이프 사이클 페이즈 => 플러그인 (좀더 상세히 보기)
		
				process-resource => resources:resources
				compile => compiler:compile
				process-classes
				process-test-resources => resources:testResources
				test-compile => compiler:testCompile
				test => surefire:test
				prepare-package
				package => jar:jar

				- process-resource
					resources 플러그인의 resources 골이 
					src/main/resources 디렉토리 의 모든 자원들을 target/classes로 복사

				- compile
					compiler 플러그인의 compile 골이
					src/main/java 의 모든 자바소스를 target/classes에 컴파일
				
				- process-test-resources
					resources 플러그인의 testResources 골이
					src/test/resources 디렉토리의 모든 자원들을 target/test-classes로 복사
				
				- test-compile
					src/test/java 의 모든 자바소스를 자바소스를 target/test-classes에 컴파일

				- test
					targer/test-classes 의 모든 클래스파일을 단위 테스트 실행 하고,
					테스트 결과를 target/surefire-reports 디렉토리에 파일로 생성
					
					테스트에 실패하면 빌드 진행을 멈춘다. 하지만,
					테스트를 건너 뛰거나 특정 클래스만 실행한다든지 등을 설정 할수 있다 
					 
					# HelloTest 클래스만 테스트
						mvn -Dtest=HelloTest test

					# HelloTest 와 HelloTest2 클래스만 테스트
						mvn -Dtest=HelloTest,HelloTest2 test 

					# 테스트 건너뛰기(실행하지 않기)
						mvn -Dmaven.test.skip=true test

					# pom.xml에 테스트 건너뛰기 지정하기
							
						<!-- properties 에서 지정하기 -->
						<properties>
							<maven.test.skip>true</maven.test.skip>
						</properties>
						또는
						<!-- surefire 플러그인에 설정하기도 가능 -->
						<plugin>
							..
							<configuration>
								<skipTests>true</skipTests>
							</configuration>
						</plugin>
				
						<!-- 테스트 실패하더라도 빌든 단계 진행시키기 -->
						<plugin>
							..
							<configuration>
								<testFailureIgnore>true</testFailureIgnore>
							</configuration>
						</plugin>
				- package
					pom.xml 의 <packaging /> 값인 jar,war,ear등으로 프로젝트를 빌드 후 압축한다
					pom.xml 의 <finalName />값이 파일명이 되며, 해당 태그가 지정되어 있지 않다면,
						${artifactId}-${version}.${packaging} 
					형식의 파일명으로 지정되어서 target 디렉토리 아래에 생성된다.
						예)
							- target
							wikibook.jar
							또는 
							wikibook-1.0-SNAPSHOT.jar 

				- install OR deploy
					mvn install #로컬저장소에 pakaging한 파일(.jar.war등)을 배포한다
					mvn deploy  #외부저장소에 pakaging한 파일(.jar.war등)을 배포한다

			clean 라이프 사이클 페이즈
				mvn clean 을 실행하면 target 디렉토리가 삭제된다. 다른 페이즈등과 연관 없다.
				mvn clean test  등으로 새 빌드시마다 같이 실행하는 경우가 많다.

			clean 라이프 사이클 페이즈
				site , site-deploy 가 있다.
				빌드 리포트등의 결과물 사이트를 생성
				
의존성 라이브러리 관리

	저장소 종류
		
		- 로컬 저장소 : 
			메이븐 설치된 pc의 로컬 저장소
			기본 설정시 ${USER_HOME}/.m2/repository

		- 원격 저장소 :
			- 중앙 저장소 : 
				메이븐 중앙 저장소. 오픈소스 라이브러리, 플러그인, 아키타입을 관리하는 곳
				개발자가 임의로 라이브러리 배포할 수 없다.
			- 사내원격저장소 : 프로젝트 하는 장소에 설치해서 사용하는 형태
			- 외부(공개)원격저장소 : 유명 라이브러리등을 제공하는 사이트등이 제공하는 공개 저장소

	저장소 설정
		<repository> Element에서 설정.
		<id> , <name>, <url> 설정하면 된다.

		저장소가 설정된 순서대로 다운로드 되고, 다운로드 되었다면 다음 저장소에 접근하지 않는다.
		메이븐 기본 부모 pom.xml에 이미 설정된 메이븐 중앙저장소 값이 있다.


	라이브러리 설정 관리 


		pom.mxl : 
			<dependencies>
				<!-- junit 설정 -->
				<dependency>
					<groupId>junit<groupId>
					<artifactId>junit<artifactId>
					<version>3.8.1<version>
					<scope>test</scope>
				</dependency>
				..
			</dependencies>

	
		
		작동 과정 : 
			빌드 명령어 실행(mvn compile, test, package, install등)
			중앙저장소 junit 3.8.1 버전 검색
				http://repository_url/groupId/artifactId/version/${artifactId}-${version}.jar 파일 다운로드
			로컬저장소에 다운로드(중앙저장소 형식과 똑같은 디렉토리 생성 후 받는다)
				${USER_HOME}/.m2/repository/artifactId/version/${artifactId}-${version}.jar
			groupId 가 "com.solgae" 같은 형식의 도메인일 경우 '.'을 기준으로 디렉토리 생성되고 다운로드.
				com/solgae/version/${artifactId}-${version}.jar
			다운로드 뿐만이 아니라 'maven install' 명령어등으로 배포시에도 같은 작동 방식이 적용되어 배포된다.

		라이브러리 검색

			직접 메이븐 리포지터리(http://repo1.maven.org/maven2/junit/junit)에 접속해서 검색해도 되지만,
			대부분 구글 -> maven 라이브러리명으로 검색 또는..
			메이븐 검색 사이트인 mvnrepository.com 에 접속해서 검색하고픈 라이브러리 검색
			하는 것이 편리하다
		
		version 범위 지정
			(,) : 해당 버전을 제외
			[,] : 해당 버전을 포함
				

				ex) <version>[3.8,4.8)</version>
				(3.8 과 같거나 크고 4.8보다 작은 범위의 라이브러리 중 최신버전과 의존관계 형성) 

			<version>LATEST</version> , <version>RELEASE</version>
				: 항상 로컬저장소와 메이븐 저장소를 검색해 로컬버전보다 최신버전이 있다면, 최신으로 다운로드
				(항상 최신 버전을 받기 때문에, 개발 중 바뀐 버전으로 인해 에러를 만날 확률이 높다)

			SNAPSHOT :
				버전명에 SNAPSHOT 이라는 단어가 포함할 경우 
				현재 개발버전임인 라이브러리를 뜻하고 처리 프로세스도 달라진다
				예를 들어 아래처럼 1.0-SNAPSHOT 이라고 한다면
					
					<version>1.0-SNAPSHOT</version>
				
				1.0버전이 현재 개발중임을 뜻하고, 저장소에 1.0-SNAPSHOT 있다는 것은
				계속 개발 중이라 어제와 오늘의 1.0-SNAPSHOT 버전은 같아도 
				내용은 업데이트가 되었을 수도 있다는 것을 암시한다(개발중이므로).
				실제로 버전 + 년도,날짜 시간등이 붙은 파일명이 되는 것같다..
				이렇게 자잘하게 계속 업데이트 되는 버전을 , 
				pom.xml 의 snapshots 태그 업데이트 정책 설정을 통해

					<repositories>
						<snapshots>
							<enable>true</enable>
							<updatePolicy>
							always ,daily interval, never 등등
							</updatePolicy>
						</snapshots>
					</repositories>

				항상 가져오기, 매일, 일정 시간(분 설정), 아예 업데이트 하지 않기 등 
				업데이트 빈도수를 정할 수 있는 것같다

		의존 라이브러리 스코프
			예제:
			<dependency>
				..
				<scope>test</scope>
			</dependency>
			
			* compile : 
				(default)
				컴파일(필요), 배포(필요)
			* provided : 
				컴파일(필요), 배포(불필요)
				예로 servlet.jar는 was에서 제공된다

			* runtime : 
				컴파일(불필요), 배포(필요)
				실행시(실행, test) 필요한 옵션

			* test : 테스트 컴파일과 테스트 실행 시점에만 사용됨.


			* system :
				컴파일(필요), 배포(불필요)
				provided 와 같지만 라이브러리 제공은 직접 해줘야함(maven이 관리해주지 않음)
				명시적으로 라이브러리가 있는 시스템 경로를 적어 줘야 함. 
				예) D:\jar\junit.jar


			* import (Maven 2.0.9 이후에서만 적용) : 
				다른 pom 설정파일에서 정의되어 있는 의존 관계를 이 프로젝트로 가져옵니다.
				이 영역은 <dependencyManagement>에서만 pom의 의존관계에 대해서 사용됨. 
				(<dependency /> 태그의 <scope / > 에서는 사용안됨)

				<dependencyManagement>
				    <dependencies>
					<dependency>
					    <groupId>com.fasterxml.jackson</groupId>
					    <artifactId>jackson-bom</artifactId>
					    <version>2.9.0</version>
					    <scope>import</scope>
					    <type>pom</type>
					</dependency>
				    </dependencies>
				</dependencyManagement>
		
		의존 라이브러리 프로젝트로 복사
			메이븐 저장소에 있는 라이브러리를 프로젝트로 복사하는 플러그인 명령어
				
				mvn clean dependency:copy-dependencies package
				(target/dependency 디레토리에 복사 된다)
			

		의존성 전이 

			의존성 중개(dependency mediation)
				버전이 다른 두 개의 라이브러리가 의존 관계에 있다면 메이븐은 더 가까운 의존 관계에 있는 pom 설정 버전과 의존 관계를 가진다.
				A->B->C->D 2.0 버전, A->E->D 1.0 버전의 의존관계가 있을 경우, A프로젝트는 D 1.0 버전과 의존 관계를 가진다. (2.0을 사용하고 싶을 경우, 명확하게 의존 관계를 명시해야 한다.)

			의존성 관리(dependency management)
				메이븐 설정파일인 <dependencyManagement/>엘리먼트에 의존 관계에 있는 라이브러리와 버전을 명시적으로 정의한다.
				앞의 예에서 A 프로젝트에서 D라이브러리의 2.0버전을 사용한다고 <dependencyManagement/>에 설정할 수 있다.
			
			의존성 스코프(dependency scope)
				현재 빌드 상태에 맞는 라이브러리인 경우 의존 관계를 갖는다. (<scope/> 참고)
			
			의존성 예외(excluded dependencies)
				의존 관계에 있는 라이브러리를 <exclusion/> 엘리먼트를 활용하여 명시적으로 제외시킬 수 있다.
			
			선택적 의존성(optional dependencies)
				A->B->C와 같은 구조로 의존 관계를 가지는 경우 
				B 프로젝트에 C가 optional로 설정되어 있다면, 
				A 프로젝트를 빌드 할 때 C는 의존 관계를 가지지 않도록 설정하는 기능이다. 
				<optional/> 엘리먼트를 활용하여 설정할 수 있다.


		의존성 라이브러리 구조 파악

			mvn dependency:tree

		의존성 스코프와 의존성 전이와의 관계

			라이브러리 구조 
				A -> B -> C

			
			A->B:compile +  B->C:compile = A->C의 의존관계는, compile
			A->B:compile +  B->C:provided = A->C의 의존관계는, 관계 없음(제외)
			A->B:compile +  B->C:runtime = A->C의 의존관계는, runtime
			A->B:compile +  B->C:test = A->C의 의존관계는, 관계 없음(제외)

			A->B:provided +  B->C:compile = A->C의 의존관계는, provided
			A->B:provided +  B->C:provided = A->C의 의존관계는, provided
			A->B:provided +  B->C:runtime = A->C의 의존관계는, provided
			A->B:provided +  B->C:test = A->C의 의존관계는, 관계 없음(제외)

			A->B:runtime +  B->C:compile = A->C의 의존관계는, runtime
			A->B:runtime +  B->C:provided = A->C의 의존관계는, 관계 없음(제외)
			A->B:runtime +  B->C:runtime = A->C의 의존관계는, runtime
			A->B:runtime +  B->C:test = A->C의 의존관계는, 관계 없음(제외)

			A->B:test +  B->C:compile = A->C의 의존관계는, test
			A->B:test +  B->C:provided = A->C의 의존관계는, 관계 없음(제외)
			A->B:test +  B->C:runtime = A->C의 의존관계는, test
			A->B:test +  B->C:test = A->C의 의존관계는, 관계 없음(제외)
		

속성
	propertiies 속성
		pom.xml에서 <propertiies/> 요소에 설정해서 쓰는 변수명 같은 속성 
	
		<propertiies>
			<spring.version>3.0.1</spring.version>
		</properties>
		..
		<dependency>
			..
			<version>${spring.version}</version>
		</dependency>

	pom/project 속성
		pom.xml에 쓰는 속성
		pom , project 은 같은 속성명이지만 pom은 최신버전에서는 안씀(3.0 이상)
		
		${project.build.directory} : target 디렉토리
		${project.build.outputDirectory} : target/classes 디렉토리
		${project.name} : <project>/<name> 설정값
		${project.version} , ${version} : <project>/<version> 설정값
		${project.build.finalName} : <project>/<build>/<finalName> 설정값

	
	settings 속성
		settings.xml 에 쓰는 속성

		${settings.localRepository} : 로컬 저장소 경로 참소

	env 속성
		시스템 환경변수 참조

		${env.PATH} : 시스템의 PATH 설정값 참조
		${env.JAVA_HOME} 시스템 JAVA_HOME 설정 값을 참조

	자바 시스템 속성
		메이븐은 자바 시스템 속성으로 설정된 모든 속성을 참조할 수 있다.
		예를 들어 ${basedir} 같은 것이다

		${basedir} : pom.xml 설정 파일이 위치하는 디렉토리
	
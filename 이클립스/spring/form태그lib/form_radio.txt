요약 : 
	
	<form:radiobuttons path ="radioes" items="${codeTypes}" itemValue="code" itemLabel="label">
	<form:radiobutton path="radioes" value="data1"  label="일반회원">

	<form:radiobuttons>
		path : 필수 속성 , command오브젝트 필드명 설정
		items : 
			HashMap : 순서지정이 없다
				키=radio 태그의 value 
				값=radio 태그의 text(label)
			
			LinkedHashMap : 순서지정 가능하다
				키=radio 태그의 value 
				값=radio 태그의 text(label)
				
			Collection 도메인 객체 :  (getter,setter가 있는) , 순서지정 가능하다			
				itemValue : radio 태그의 value 값. 도메인 객체에서 매핑할 속성명 지정
				itemLabel : radio 태그의 text(label) 값. 도메인 객체에서 매핑할 속성명 속성명 지정

	<form:radiobutton>
		path : 필수 속성 , command오브젝트 필드명 설정
		value : radio 태그의 value 값 수동 지정.
		lable : radio 태그의 text 값 수동 지정.

	------ 기타 공통 속성들(html에 대응하는 속성들이 더 있다)

	cssClass : 바인딩 오류 없을시 출력될 css 속성명
	cssErrorClass : 바인딩 오류시 출력될 css속성명

	특이사항 : 
		form:checkbox 와 같은 필드마커가 없다.
		form:checkbox 와 같은 true, false 타입 출력 방식이 없다
		위 두개 빼고 checkbox와 사용방식은 같다.
		
-------------------//
User.java
	public class User {
		
		private String[] radioes = {"data1","data3"};
		private boolean smsAllow;
		private boolean emailAllow;
		
		..getter, setter
	}

Code.java
	public calss Code{
		private String code;
		private String label;
		
		..getter, setter
	}

TestController.java

	public class TestController {
		
		@ModelAttribute("loginTypes")
		protected List<String> basicData() throws Exception{
			List<String> loginTypes = new ArrayList<String>();
			
			loginTypes.add("일반회원");
			loginTypes.add("기업회원");
			loginTypes.add("헤드헌터");
			
			return loginTypes;
		}
		
		@RequestMapping(value = "/login.do")
		public String loginView(@ModelAttribute User user,  ModelMap model) throws Exception{
			return "test/loginForm";
		}

		@ModelAttribute("codeTypes")
		protected List<Code> selectCodeData() throws Exception{
			List<Code> codeList = new ArrayList<Code>();
			
			Code c = new Code();
			c.setCode("data1");
			c.setLabel("일반회원");
			codeList.add(c);
			
			Code c1= new Code();
			c1.setCode("data2");
			c1.setLabel("기업회원");
			codeList.add(c1);
			
			Code c2 = new Code();
			c2.setCode("data3");
			c2.setLabel("헤드헌터");
			codeList.add(c2);
			
			return codeList;
			
		}
	}


-----------test.jsp
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

1. form:radiobuttons

	예제(1) ---------------

	<form:form commandName="user" action="" method="POST">
		<form:radiobuttons path ="radioes" items="${loginTypes}" />
	</form:form>
		
	출력 : 
		<span><input id="radioes1" name="radioes" type="radio" value="일반회원"/>
		<label for="radioes1">일반회원</label></span>

		<span><input id="radioes2" name="radioes" type="radio" value="기업회원"/>
		<label for="radioes2">기업회원</label></span>

		<span><input id="radioes3" name="radioes" type="radio" value="헤드헌터"/>
		<label for="radioes3">헤드헌터</label></span>


	예제 (2) ----------------

	<form:form commandName="user" action="" method="POST">
		<form:radiobuttons path ="radioes" items="${codeTypes}" itemValue="code" itemLabel="label" />
	</form:form>

	출력 : 
		<span><input id="radioes1" name="radioes" type="radio" value="data1" checked="checked"/>
		<label for="radioes1">일반회원</label></span>

		<span><input id="radioes2" name="radioes" type="radio" value="data2"/>
		<label for="radioes2">기업회원</label></span>

		<span><input id="radioes3" name="radioes" type="radio" value="data3" checked="checked"/>
		<label for="radioes3">헤드헌터</label></span>		

	예제 (3) ----------------
	
	<%
		/* HashMap 사용 , 순서대로 출력 되지 않는다 */
		
		Map<String,String> code = new HashMap<String,String>();
		code.put("data1","일반회원");
		code.put("data2","기업회원");
		code.put("data3","헤드헌터");
		
		request.setAttribute("code", code);
	%>

	<form:form commandName="user">
		<form:radiobuttons path="radioes" items="${code}"></form:radiobuttons>
	</form:form>

	출력 : 
		<span><input id="radioes1" name="radioes" type="radio" value="data3" checked="checked"/>
		<label for="radioes1">헤드헌터</label></span>

		<span><input id="radioes2" name="radioes" type="radio" value="data2"/>
		<label for="radioes2">기업회원</label></span>

		<span><input id="radioes3" name="radioes" type="radio" value="data1" checked="checked"/>
		<label for="radioes3">일반회원</label></span>
	
	예제 (4) ----------------
	
	<%
		/* LinkedHashMap 사용 , 순서대 출력 된다 */
		
		Map<String,String> code = new LinkedHashMap<String,String>();
		code.put("data1","일반회원");
		code.put("data2","기업회원");
		code.put("data3","헤드헌터");
		
		request.setAttribute("code", code);
	%>

	<form:form commandName="user">
		<form:radiobuttons path="radioes" items="${code}"></form:radiobuttons>
	</form:form>

	출력 : 
		<span><input id="radioes1" name="radioes" type="radio" value="data1" checked="checked"/>
		<label for="radioes1">일반회원</label></span>
		
		<span><input id="radioes2" name="radioes" type="radio" value="data2"/>
		<label for="radioes2">기업회원</label></span>

		<span><input id="radioes3" name="radioes" type="radio" value="data3" checked="checked"/>
		<label for="radioes3">헤드헌터</label></span>
		

2. form:radiobutton

	<form:form commandName="user" action="" method="POST">
		<form:radiobutton path="radioes" value="data1"  label="일반회원"/>
		<form:radiobutton path="radioes" value="data2"  label="기업회원"/>
		<form:radiobutton path="radioes" value="data3"  label="헤드헌터"/>
	</form:form>

	출력 : 
		<input id="radioes1" name="radioes" type="radio" value="data1" checked="checked"/>
		<label for="radioes1">일반회원</label>

		<input id="radioes2" name="radioes" type="radio" value="data2"/>
		<label for="radioes2">기업회원</label>

		<input id="radioes3" name="radioes" type="radio" value="data3" checked="checked"/>
		<label for="radioes3">헤드헌터</label>

	
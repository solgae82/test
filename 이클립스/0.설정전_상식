------------------- 퍼온 블로그
출처: https://iamyourfavorite.tistory.com/128 [/*+ HINT */:티스토리]

Eclipse는 Java 용 Eclipse Compiler (ECJ) 라는 자체 컴파일러를 구현했습니다. 
Sun JDK와 함께 제공되는 컴파일러 인 javac과 다릅니다. 
주목할만한 차이점은 Eclipse 컴파일러는 실제로 제대로 컴파일되지 않은 코드를 실행할 수 있다는 것입니다. 
오류가있는 코드 블록이 실행되지 않으면 프로그램이 올바르게 실행됩니다. 
그렇지 않으면 컴파일하지 않은 코드를 실행하려고했음을 나타내는 예외가 throw됩니다.

또 다른 차이점은 Eclipse 컴파일러는 Eclipse IDE 내에서 증분 빌드를 허용한다는 것입니다. 
즉, 입력이 끝나자 마자 모든 코드가 컴파일됩니다.
Eclipse가 자체 컴파일러와 함께 제공된다는 사실은 Java SDK를 설치하지 않고도 Eclipse에서 Java 코드를 작성, 
컴파일 및 실행할 수 있기 때문에 분명합니다.

javac보다 ECJ가 선호되는 몇 가지 예는 다음과 같습니다.

	- Apache Tomcat 은 ECJ를 사용하여 JSP를 컴파일하고,
		IntelliJ IDEA 는 ECJ ( Java for GNU Compiler for Java ) 4.3을 지원합니다.
	- GCJ는 ECJ
	- Liferay는 ECJ로 구축됩니다.

모두는 이미 그들이 다르다고 설명했습니다. 
다음은 두 컴파일러 사이에서 내가 알아 차린 행동의 몇 가지 차이점입니다. 
그것들은 구현 중 하나 (적어도)에서 버그로 가득 차 있습니다.
컴파일 타임 최적화 관련
	
	- 이클립스 버그? 기본 사례 만 사용하여 null 전환

일반 유형 유추 관련

	- Generics는 Eclipse에서 컴파일되고 실행되지만 javac에서는 컴파일되지 않습니다.
	- 컴파일러는 제네릭 메서드의 null 매개 변수와 다르게 동작합니다.

Eclipse의 내장 컴파일러는 IBM의 Jikes Java 컴파일러를 기반으로 합니다. (이클립스도 IBM에서 생명을 시작했다. JDK의 Sun의 Java 컴파일러와 완전히 독립적입니다. 
그것은 Sun의 랩퍼가 아닙니다 
javac.Jikes는 오랫동안 존재 해 왔지만, 표준 JDK Java 컴파일러보다 훨씬 빠릅니다 (하지만 여전히 사실인지는 모르겠습니다). 
왜 IBM은 자신의 Java 컴파일러를 작성하려고했는지에 관해서 : 

	- 어쩌면 라이센스 이유 때문일 것입니다 (그들은 자신의 Java 구현도 가지고 있습니다).

이 컴파일러는 별도의 컴파일러입니다. 
이것은 javac가 Eclipse 사이트 에서 약간 깨진 코드를 컴파일 할 수 없기 때문에 필요 합니다.


------------------- 퍼온 댓글
출처 : https://okky.kr/questions/410161

이클립스에 대해서 얘기할라면 참긴데 짧게 얘기해볼게요

일단 이클립스는 JDK를 통해서 컴파일 하지 않습니다. 기본적으로 내장된 컴파일러를 사용해요

런타인 환경은 사용자가 설치한 (그리고 설정한)것을 사용합니다.

케플러 버전은 1.7까지 컴파일러를 제공합니다. 

그렇기 때문에 Use an execution Environment설정을 이용할때 케플러 버전이 컴파일하고 있는 버전까지만 런타임 환경 목록을 보여주는거죠(잘 생각해보면 당연하죠 케플러 당시의 1.8버전이 없었다고 생각해보세요 그런데 런타임 목록을 1.8버전을 만들어 놨을리가 없잖아요)

Use default JRE는 사용자가 이클립스에 설정한(installed jre) jre중 default로 체크한 jre로 런타임 환경을 설정하는 거죠 글쓴이님은 해당 1.8 버전의 jre를 설정해 놓으셨네요

Use a project sp~~ jre 는 이건  이클립스에 설정한(installed jre) 여러 jre중에서 사용자가 선택할수 있도록 제공해주는거구요 

그래서 이 두 설정은 사용자가 설정한 1.8버전의 런타임 환경이 있으면 보여주는게 가능하죠

그럼 컴파일 레벨일 1.7이면 1.7로만 컴파일 되고 런타임은 1.8로 되냐? 라는 질문을 할수 있는데 

맞습니다. 그렇게 동작합니다. 그러니까 1.8JDK를 깔았고 런타임 환경을 1.8로 했지만 컴파일 레벨은 1.7이므로 1.7로 컴파일 되고 실행은 1.8로 됩니다. 아마 해당 설정을 가진 프로젝트에서는 람다식을 사용하지 못할꺼에요 람다는 1.8부터 지원 되니까요

그럼 케플러 버전의 이클립스를 1.8버전의 컴파일 레벨 설정 하는 방법은 무엇이냐? 

2가지가 있스빈다.

1 . 이클립스를 새 버전을 새로 설치 한다

2. 케플러 이클립스를 1.8을 지원하는 플러그인으로 업데이트를 하는겁니다.

-------------------

이클립스는 내부 자체 컴파일러가 있다고 한다.
컴파일러 최상위 버전은 고정이므로, 이클립스 버전마다 다르다 (검색하라)
jdk를 설정했다고 해서 그 jdk 버전의 컴파일러를 사용하는게 아니라는 것이다
jdk 설정은 jre를 위한 것이다

사용자가 수동 설정하는 것은 JRE로서 사용자가 설정할 수 있다.
그러므로 이클립스 내장 컴파일러가 어느 버전으로 컴파일 하는지 알아야 한다.

만약, 이클립스가 jdk 1.7로 컴파일하는 버전이라면, 람다식을 사용하지 못할 것이다
어디서 받은 java 소스를 이클립스에 프로젝트로 등록하려면, java 소스 버전과 이클립스 버전(내장 컴파일러)
을 맞춰야 한다. 

java source 버전과 맞는 버전의 이클립스를 선택해야한다는 것이다

------------------- JDK(JRE) 설정
이클립스는 버전별로 java jre 최소버전 지원 제한이 있다
대충 아래와 같다(검색해서 확인해야 한다)

	이클립스 4.6부터는 JDK 8 이상
	이클립스 4.17부터는 JDK 11 이상
	이클립스 4.25부터는 JDK 17 이상

출처: https://esoog.tistory.com/entry/스프링spring-버전-관리 [Blue Whale Wave:티스토리]

------------------- STS
STS(Spring Tool Suite)도 이클립스를 확장한 버전이므로, 
jdk 지원 버전 확인하려면 이클립스 빌드 버전을 확인해야한다.
Help>about Spring Tool Suite 4>Installation Details(버튼)>
Features(탭)>Feature Name : Eclipse Platform 버전 확인

예)
STS : 4.15.1.RELEASE
Eclipse Platfrom : 4.24.0
(해당 sts 이클립스 버전은 4.24.0 이다)
work tree(working copy) : 작업공간
index(staging area) : 커밋 전 등록하는 곳
HEAD : 최종확정본 

--------- 식별자 설정
#global 설정 
git config --global --list			#전역 설정 리스트 보기
git config --global user.name "dong"		#전역설정에 user.name설정
git config --global user.email "dong@ggg.com"	#전역설정에 user.email설정
git config --global user.name
dong #설정값 출력 

#local 디렉토리 설정 
mkdir test2
cd test2
git init					#test2 디렉토리 git으로 관리 초기화
git config --local --list			#test2 디렉토리 로컬 설정 보기
git config --local user.name "dong2"		#test2 디렉토리 로컬 user.name설정
git config --local user.email "dong2@ggg.com"	#test2 디렉토리 로컬 user.email설정
git config --local user.email
dong2@ggg.com #설정값 출력

--------- 로컬 저장소 만들기
mkdir project	# 저장소 생성, 디렉토리생성
git init	# git 초기화, git에 의해 이 디렉토리 관리됨.
git status	# 저장소 상태 확인

		#디렉토리에 .git 파일 삭제하면 로컬 저장소 삭제됨

--------- 로컬 저장소에 파일 등록하기(add , commit)
git add hello.txt	#hello.txt 파일 커밋 전 index(staging area)등록.
git commit		# index(staging area)에 등록된 파일 git에 버전 저장.
			(저장전 커밋메시지 작성 후 저장하면 커밋 완료.)

git commit -a		#저장소에 변경된 모든 파일들 index(staging area)에 add후 바로 commit
			(저장전 커밋메시지 작성 후 저장하면 커밋 완료.)

git commit -am "add first"	#저장소에 변경된 모든 파일들 index(staging area)에 add후 메시지까지 작성 후 바로 commit


--------- 브랜치 생성
git branch		# 현재 브랜치들 보기, 기본(master)만 있음
git branch ver2		# ver2 브랜치 생성
git branch		# master, ver2 2개 있음.

git checkout ver2	# ver2 브랜치로 이동.
git checkout -b ver3	# ver3 브랜치 만들고 ver3 브랜치로 이동.

git branch -a		#원격저장소에 fetch로 가져온 remote-tracking 도 보여준다


---------병합하기
master + ver2 합치기

git checkout master	# 병합될 기준되는 위치로 이동
git merge ver2		# 다른 branch인 ver2를 master로 합침.

---------병합충돌(파일 내용)
<<<<< HEAD
abc		#현재 위치한 branch 파일에 내용
=====
abcd		# 병합을 가져오는 곳에 파일에 내용
>>>>> ver2
		# git은 충돌난 지접을 알려줄 뿐이고 처리는 사용자에게 위임한다.
		# 충돌난 파일을 편집하고, 다시 commit하면 된다
git commit -a -m "conflict resolved"	#편집 후 커밋

-------- git log보기
다음보기 이동(스페이스바), 끝내기 : 'q' 입력.
git log --graph		# 병합내역 아스키로 보여줌
git log --stat		# 커밋 수정 통계정보

---------파일등록 무시하기
.gitignore	#파일 생성  
.gitignore	#파일에 git에 등록되지 말아야할 파일패턴 입력.
git add .gitignore
git commit -m "add .ignore"	#git에 등록함. 다른 사람과 연동시에 저 법칙을 공유하게 됨.

--------- 취소하기
1.discard  : 최신 work tree에서 작업하다 취소하면 최근 커밋했던 상태로 다시 돌아감.

2.reset(hard) : 이전 커밋 버전을 선택해서 실행, 이전 커밋버전 모두삭제, 
		work tree 상태는 선택버전으로 교체.
	-v3 (삭제)
	-v2 (삭제)
	-v1 (여기서 실행,새로운 work tree HEAD)

3.reset(mixed) : 이전 커밋 버전을 선택해서 실행, 이전 커밋버전 모두삭제, 
		 working tree상태는 유지.
	-v3 (삭제)
	-v2 (삭제)
	-work tree 유지(이전 최신(v3) 커밋되지 않은 상태 생성, 새로운 work tree HEAD)
	-v1 (여기서 실행)

4.revert : 현재 선택버전 이전으로 커밋버전 추가.(증가)
	-v2 : revert 실행
	-v1
	#결과	
	-new v1(v1과 같은 커밋된 새로운버전, 새로운 work tree HEAD)
	-v2
	-v1



##################################################원격 저장소
---------원격저장소 설정
git remote 	:현재 로컬과 현재 원격저장소 상태보기
git remote -v 	:현재 로컬과 연결된 원격저장소 상태(주소까지 함께보기)
git remote add <저장소명(origin)> <원격서버주소> : 현재 로컬저장소에 원격저장소 정보 설정

git remote add origin  https://github.com/solgae82/test.git
git remote -v
  origin  https://github.com/solgae82/test.git (fetch)
  origin  https://github.com/solgae82/test.git (push)

--------- 원격저장소 가져오기(clone)
#git init 할 필요없다 바로 clone명령하면 됨.
#git init + git pull 이라고 생각하면됨.
#git clone <원격주소> [복사할 로컬주소:없으면 원격저장소 이름으로 디렉토리 생성됨]

git clone https://github.com/solgae82/test.git test1	# test1디렉토리 만들고 그 안에 복제
git clone https://github.com/solgae82/test.git		#원격저장소 이름이 test이면 test 디렉토리 만들고 복제

git remote -v # 클론 후 확인해보면 자동 원격저장소가 설정되었음을 알 수 있다
  origin  https://github.com/solgae82/test.git (fetch)
  origin  https://github.com/solgae82/test.git (push)



---------원격저장소 가져오기(fetch)
# fetch는 현재 브랜치와 바로 병합하는 것이 아니라, 임시 저장소(origin/master)에 가져오고,
충돌 났는지, 비교등을 하고  직접 수정해서 반영하라는 수동모드.

git fetch
git brach -a
  remotes/origin/master		#origin/master 가 원격저장소에서 가져오 브랜치

git merge origin/master		#현재 master에 가져온 origin/master를 합친다

---------- 원격저장소 가져오기(pull)
#fetch + merge 명령이라고 생각할 수 있음.
git pull <원격주소이름> <가져올 로컬브랜치>

git pull origin master


--------- 처음 가져오기 예제(clone, fetch, pull)
test1에 가져온다고 가정할 경우

1. clone으로 가져오기
git clone https://github.com/solgae82/test.git test1	# init과정 필요없음. 바로 원격설정등 자동으로 연결됨.

cd test1		#복사된(로컬저장소) 위치로 이동
git branch -a		#branch 확인
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master

git status	 #확인

2.fetch로 가져오기
mkdir test1		#로컬저장소 디렉토리 생성
cd test1		#이동
git init		#로컬저장소 생성
git remote add origin https://github.com/solgae82/test.git	#원격저장소 설정
git remote -v		#원격저장소 설정 확인
  origin  https://github.com/solgae82/test.git (fetch)
  origin  https://github.com/solgae82/test.git (push)

git fetch		#원격저장소에서 가져오기
git branch -a		#임시로 받은 원격저장소 브랜치 확인
  remotes/origin/master		#원격으로 가져온 브랜치

git merge remotes/origin/master		#(편집수정할 내용없음) 현재 master로 합침 
git branch -a		#브랜치 다시 확인
* master		#원격으로 가져온 브랜치와 합쳐서 새로 생성된 master
  remotes/origin/master	#원격으로 가져온 브랜치

git status		#상태확인

3.pull로 가져오기
mkdir test1		#로컬저장소 디렉토리 생성
cd test1		#이동
git init		#로컬저장소 생성
git remote add origin https://github.com/solgae82/test.git	#원격저장소 설정
git remote -v		#원격저장소 설정 확인
  origin  https://github.com/solgae82/test.git (fetch)
  origin  https://github.com/solgae82/test.git (push)

git pull origin master		#가져오기 (fetch + merge)
git branch -a			#가져온 브랜치 확인,master가 생겼음을 볼 수 있음(병합되었음)
* master			#원격으로 가져온 브랜치와 병합된 새로운 master브랜치
  remotes/origin/master		#원격 브랜치

git status	#상태확인

------------ 원격저장소에 올리기
1. 먼저 fetch 또는 pull을 한다...그리고 병합 수정등 작업 후 commit

git push origin master
기본용어
-작업트리, working tree, working directory
-stage, staging area
-저장소, repository

#디렉토리 초기화
git init
git init test # test 디렉토리 만들고 그안에 설정

현재 디렉토리 git상태 보기
git status

#staging 하기
git add [파일명,.,*]
.git/index 에 staging 내용이 저장된다

#커밋하기
	git commit [파일명,.,*]
	git commit -m "message test"
	git commit -am "commit with add"

#최신버전 커밋메시지 변경
	git commit --amend

#깃 로그보기
	git log
	git log --stat (다음:enter , 실행중지: q)

#깃 비교하기
	git diff

#깃 수정된 사항 리포지터리 최신버전으로 복구
	git restore [파일명,.,*]
	git checkout -- [파일명,.,*]

#stage에 올린 파일 unstage 하기
	git reset HEAD [파일명,.,*]
	git restore --staged [파일명,.,*]

#커밋, staged, update 취소
 
 - 커밋취소 (stated 상태로)
	git reset --soft HEAD^

 - 커밋취소 + not staged 상태 
	git reset --mixed HEAD^
	git reset HEAD^ (기본으로 하면 mixed 옵션과 같다)

 - 커밋취소 + not staged + before update = 결론은 이전 커밋상태
	git reset --hard HEAD^


#특정 커밋 해쉬 이전으로 되돌리기
	- [git해쉬id] 이전의 버전이 새로 커밋된다
	
	git revert [git해쉬id]

# 브랜치 보기(현재 체크아웃된 브랜치는 (*)표시가 있다)
	git branch
	*master #현재 브랜치
	apple

# t1 브랜치 만들기
	git branch t1

# t1 브랜치로 체크아웃하기
	git checkout t1

#깃 로그 각 브랜치별로 한 라인씩 보기
	git log --oneline --branches

#깃 로그 각 브랜치별로 그래프 표시로 보기
	git log --oneline --branches --graph

#깃 로그 브랜치 vs 브랜치로 비교
	- 아래 예제는 master 브랜치에는 없고, apple 브랜치에만 있는 commit 로그를 보여준다

	git log master..apple

# 병합
	- 체크아웃 한 기준에서 합쳐진다. 아래는 master 브랜치에 합쳐진다고 가정.
	
	git merge t1

#





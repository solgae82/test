mapper interface 로 mybatis를 사용하기 위한 설정이다

--------- pom.xml
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version> <!--버전 올려주고 -->
			<scope>test</scope>
		</dependency>   
		
		<!-- mysql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.36</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>2.0.3</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

--------- root-context.xml

네임스페이스 중 mybatis-spring을 꼭 지정해야 한다
mybatis-spring 이 인터페이스 구현을 자동으로 생성해준다고 한다.

아래 내용은 설정 추가

	<!-- mysql 데이터 베이스 connection dataSource 설정 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://192.168.0.7:3306/test"></property>
		<property name="username" value="dong"></property>
		<property name="password" value="100you"></property>
		
	</bean>
	
	<!--  mybatis 설정정보 (dataSource 사용)-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		 <property name="dataSource" ref="dataSource"></property>
		 <!-- 
		 <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		 --> 
		 <property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
		 
	</bean>
	
	<!--  mapper 인터페이스 자동스캔영역 지정 -->
	<!-- 이 mapper영역은 mybatis 매퍼 인터페이스만 있어야 한다. 
	@Controller,@Service 등 기타 잡스런 클래스와 같이 있으면 에러를 뿜는다-->

	<mybatis-spring:scan base-package="com.solgae.*.mapper"/>

--------- 테스트 해보자
package com.solgae.test;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class TestController {

	@Inject
	TestService service;
	
	@RequestMapping("/mapper")
	public void test() throws Exception{
		System.out.println("=========time:" + service.getTime() );
		System.out.println("=========name:" + service.getName("user00", "user00"));
		System.out.println("=========xmlname:" + service.getXmlName("user03", "user03"));
		
	}
}

--------- TestService.java

package com.solgae.test;

public interface TestService {

	public String getTime() throws Exception;
	
	public String getName(String id1, String pw1) throws Exception;
	
	public String getXmlName(String uid ,String upw) throws Exception;
}

---------  TestServiceImpl.java

package com.solgae.test;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.solgae.test.mapper.TestMapper;

@Service
public class TestServiceImpl implements TestService {
	
	@Inject
	TestMapper mapper;
	
	
	public String getTime() throws Exception{
		System.out.println("==>" + mapper.getClass().getName());
		return mapper.getTime();
	}
	
	public String getName(String id1, String pw1) throws Exception {
		
		return mapper.getName(id1, pw1);
	}
	
	public String getXmlName(String uid ,String upw) throws Exception{
		return mapper.getName(uid, upw);
	}
	
	
}

--------- TestMapper.java (이 매퍼파일의 full네임은 com.solgae.test.mapper.TestMapper 이다)

package com.solgae.test.mapper;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

public interface TestMapper {
	
	@Select("select now()")
	public String getTime() throws Exception;
	
	@Select("select uname from tbl_user where uid=#{id} and upw = #{pw}")
	public String getName (@Param("id") String id1 , @Param("pw") String pw1) throws Exception;
	
	public String getXmlName(String uid ,String upw) throws Exception;
}

--------- mappers/testMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  	<!-- 아래 namespace 값이 매퍼 인터페이스의 풀네임과 같아야 찾는다 -->
	<mapper namespace="com.solgae.test.mapper.TestMapper">
		
		<!-- 아래 id="값" 은 매퍼 파일의 메소드 이름과 같아야 매칭 된다 -->
		<select id="getXmlName" resultType="string">
			select uname from tbl_user where uid = #{uid} and upw = #{upw}
		</select>
					
		
	</mapper>


--------- 정리

1. Mapper 인터페이스의 full 도메인명과 XML 파일의 namespace(네임스페이스) 가 일치되어야 한다
	
	com.solgae.test.mapper.TestMapper.java  
	==
	<mapper namespace="com.solgae.test.mapper.TestMapper">

2. XML의 id값은 Mapper 인터페이스의 메소드 명과 일치해야 매핑된다 

	public String getXmlName(String uid ,String upw) throws Exception;

	<select id="getXmlName" resultType="string">
		select uname from tbl_user where uid = #{uid} and upw = #{upw}
	</select>
	
3. Mapper 패키지 영역은 Mapper 인터페이스만 있게 해야 한다. 안 그러면 에러를 뿜고 was 기동도 되질 않는다.

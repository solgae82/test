퀵 AOP 예제이다

pom.xml

	<!-- 트랜잭션 라이브러리 -->		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
	<!-- aop -->		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
	<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>
		
				
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjtools</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		    <version>3.7</version>
		</dependency>

servlet-context.xml

	네임스페이스 확장 : aop , tx 추가

	<!-- AOP -->
	<context:component-scan base-package="com.solgae.aop"></context:component-scan>
	
	<aop:config></aop:config> 
	<!--  AOP auto proxy -->
	<aop:aspectj-autoproxy />

root-context.xml

	<!--  transaction 매니저 설정 -->
	<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:annotation-driven/>


com.solgae.aop.SampleAdvice.java

	package com.solgae.aop;

	import java.util.Arrays;

	import org.apache.commons.lang3.ArrayUtils;

	import org.aspectj.lang.JoinPoint;
	import org.aspectj.lang.ProceedingJoinPoint;
	import org.aspectj.lang.annotation.Around;
	import org.aspectj.lang.annotation.Aspect;
	import org.aspectj.lang.annotation.Before;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import org.springframework.stereotype.Component;


	@Aspect
	@Component
	public class SampleAdvice {

		private static final Logger logger = LoggerFactory.getLogger(SampleAdvice.class);
		
		@Before("execution(* com.solgae.board.service.MessageService*.*(..))")
		public void startLog(JoinPoint j) throws Throwable {
			
			System.out.println("===================================SamepleAdvice getArgs():"+j.getArgs());
			System.out.println("===================================SamepleAdvice getArgs():"+Arrays.toString(j.getArgs()));
			System.out.println("===================================SamepleAdvice getArgs():"+ArrayUtils.toString(j.getArgs()));
			System.out.println("===================================SamepleAdvice getKind():"+j.getKind());
			System.out.println("===================================SamepleAdvice getSignature():"+j.getSignature());
			System.out.println("===================================SamepleAdvice getTarget():"+j.getTarget());
			System.out.println("===================================SamepleAdvice getThis():"+j.getThis());
			
		}
		
		
		//@Around("execution(* com.solgae.board.service.MessageService*.*(..))")
		public Object timeLog(ProceedingJoinPoint pjp) throws Throwable{
			
			long startTime  = System.currentTimeMillis();
			logger.info("AROUND ===> " + Arrays.deepToString(pjp.getArgs()));
			
			Object obj = pjp.proceed();
			
			long endTime  = System.currentTimeMillis();
			logger.info("AROUND ===> " + pjp.getSignature().getName() + " : " + (endTime - startTime));
			logger.info("============================================================");
			
			return obj;
		}

		
	}


MessageService.java

	@Repository
	public class MessageServiceImpl implements MessageService {


		@Inject
		private MessageDAO messageDAO;
		
		@Inject
		private PointDAO pointDAO;
		
		
		@Transactional // 트랜잭션 애노테이션
		public void addMessage(MessageVO vo) throws Exception {
			
			this.getDate();
			
			messageDAO.create(vo); //메시지 입력
			pointDAO.updatePoint(vo.getSender(), 10); //메시지 입력한 사람에게 포인트 10 증가

		}

	}

MessageController.java

	@RestController
	@RequestMapping("/messages")
	public class MessageController {
	
		@Inject
		private MessageService service;
		
		@RequestMapping(value="/", method = RequestMethod.POST)
		public ResponseEntity<String> addMessage(@RequestBody MessageVO vo){
			
			ResponseEntity<String> entity = null;
			
			try {
				System.out.println("==========================start");
				service.addMessage(vo);
				entity = new ResponseEntity<>("SUCCESS",HttpStatus.OK);
				
				
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
				entity = new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
			}
			
			return entity;
			
		}
		
	}


--------- 테스트 @Before

	postMan등의 프로그램으로 json형식으로 파라미터 전달 테스트

	url : /messages/ (끝에 '/'  꼭 붙여야 한다)
		{
		  "targetid":"user01",
		 "sender":"user02",
		 "message" : "Good Luck!"
		}

	SampleAdvice.startLog() 가
		service.addMessage(vo); 실행 이전에 실행되어 로그가 출력 될 것이다.

	
		@Before("execution(* com.solgae.board.service.MessageService*.*(..))")
	 
	 위 설정에 의해 해당 패키지 MessageService로 시작하는 모든 메소드에 @Before 가 걸려 있어서, 
	 메소드 실행 전에 startLog() 메소드가 실행하게 된다.


--------- 테스트 @Around

	이번엔 @Before 를 주석처리 하고

	아래에 @Around 주석을 풀어서 테스트해 본다..
	이 방식은 해당 타겟 메소드(service.addMessage(vo);)를 @Around의 메소드 안에서 직접 실행하며, 
	타겟 메소드의 전, 후로 추가적인 실행 처리를 할 수 있는 방식이다.

		Object obj = pjp.proceed(); 

	위 메소드가 service.addMessage(vo); 메소드를 실행하는 코드이고 ,
	전 후 추가 실행 처리 하는 예를 보여 준다.

	반환 타입 Object 와   throws Throwable 타입으로 익셉션 처리하는 것등을 눈여겨 보라.


--------- transaction

	@Transaction 우선순위

		1. 메소드의 @Transaction
		2. 클래스의 @Transaction
		3. 인터페이스의 @Transaction



	
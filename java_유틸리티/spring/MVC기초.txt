@RequestMapping 핸들러 매핑

	속성들 : 
		value : URL패턴 (String[])

			@RequestMapping(value="/hello")
			@RequestMapping(value={"/hello","/hello2"})
			@RequestMapping("/hello")
			@RequestMapping("/hello.*")
			@RequestMapping({"/hello.*","/hello2"})

			디폴트 접미어 패턴이 기본(아래는 모두 같은 매핑이다)
			@RequestMapping({"/hello","/hello/","/hello.do","/hello.html"})

		method : http 요청 메소드 (String[])

			@RequestMapping(value="/hello", method=RequestMethod.GET)
			@RequestMapping(value="/hello", method={RequestMethod.GET,RequestMethod.POST})

		params : 요청 파라미터 (String[])

			@RequestMapping(value="/hello", params="type=admin")
			@RequestMapping(value="/hello", params={"type=admin","type=member"})
			@RequestMapping(value="/hello", params="!type")
		
		headers : HTTP 헤더
			@RequestMapping(value="/hello", headers="content-type=text/*")


	타입레벨 매핑 + 메소드레벨 매핑

		ex)
		@RequestMapping("/user")
		public class userController{
			@RequestMapping("/add") public String add(){}
		}
	메소드 레벨 단독 매핑
		@RequestMapping
		public class userController{
			@RequestMapping("/add") public String add(){}
		}

		@Controller
		public class userController{
			@RequestMapping("/add") public String add(){}
		}


	타입레벨 단독 매핑
		@RequestMapping("/user/*")
		public class userController{
			public String add(){} // url=> /user/add
		}
		
	
메소드 파라미터 종류

	HttpServletRequest , HttpServletResponse

	HttpSession

	WebRequest , NativeWebReqeust

	Locale

	InputStream, Reader

	OutputStream , Writer

	@PathVariable

		@RequestMapping("/user/{id}")
		public String add(@PathVariable("id") int id){}

	@RequestParam
		
		public String add(@RequestParam("id") int id){}
		public String add(
			@RequestParam(value="id",required=false, defaultValue="-1" ) int id
		){}
		
		모든 파라미터 받기
			public String add(@RequestParam Map<String,Object> params){}

			
	@CookieValue

		public String add(@CookieValue("auth") String auth){}
		public String add(@CookieValue(value="auth",required=false, defaultValue="NONE") String auth){}

	@RequestHeader

		public String add(@RequestHeader("Host") String host){}
		public String add(@RequestHeader(value="Host",required=false, defaultValue="NONE") String host){}

	@ModelAttribute


	Map , Model , ModelMap
		모델정보를 담을 수 있는 오브젝트이다

	Erros , BindingResult
		순서에 유의해야한다
		public add(@ModelAttribute User user, BindingResult bindingResult);

	SessionStatus
		모델 오브젝트를 세션에 저장했다가 다음 페이지 Url 호출시 다시 활용해주는 기능 구현시
		해당 세션을 꼭 제거해야할때 쓰는 파라미터

	@RequestBody , @ReponseBody
	
	@Value
		public String add(@Value("#{systemProperties['os.name']}")){}
	@Valid
		JSR-303 빈 검증기로 모델 오브젝트 검증시 사용하는 지시자

자동추가 모델 오브젝트
	@ModelAttribute 메소드 파라미터
		public void add(@ModelAttribute() User user){}

	Map , Model , ModelMap 메소드 파라미터

		public void add(Map map){}

	@ModelAttribute 메소드
		@ModelAttribute("codes")
		public List<Code> codes(){
			return codeService.getList();
		}


	BindingResult 타입 메소드 파라미터

		public void add(@ModelAttribute() User user, 
		BindingResult bResult){}

리턴타입의 종류

	ModelAndView

		public ModelAndView add(){
			return new ModelAndView("hello").addObject("name",name);
		}

	String

	void

	모델오브젝트

	Map,Model,ModelMap

	View

	@ResponseBody


@SesssionAttribute


모델바인딩과 검증

	PropertyEditor

	Converter와 Formatter

	WebDataBinder 설정 항목

	Validator와 BindingResult, Erros


Spring EL과 form태그 라이브러리


---------커스텀  태그파일

1. line.tag 파일 작성. 
	<%@ tag body-content="empty" language="java" pageEncoding="UTF-8"%>
	-----<br />
2. /WEB-INF/tags 안에(이하 디렉토리에) line.tag 파일 설치(꼭 이곳에 넣어야 컨테이너가 인식함)
3. jsp 파일에 설정
<%@taglib prefix="util" tagdir="/WEB-INF/tags" %>
<util:line/> // '-----<br />' 출력

--------- 속성값 설정하기
	- 액션태그로 태그파일에 전달하는 값은 문자열이다.
	- attribute 지시자를 써서 정의한다.
	- 숫자형을 써야할때는 스크립트에서 바꾸던가, attribute 속성 type="java.lang.Integer" 로 설정
	- 액션 태그에 지정하지 않은 속성을 쓸 경우엔 에러가 발생한다.
	- body-content="empty" 은 body(내용) 사용하게 할 경우에 쓴다.(ex <util:line /> , <util:line>< /util:line> )
		ex): <util:line>이게 body다</util:line>

		-line.tag
			<%@ tag body-content="empty" language="java" pageEncoding="UTF-8"%>
			<%@attribute name="color" %>
			<%@attribute name="size" %>
			<span style="color: ${color}">----------</span><br />
			<%
				int s = Integer.parseInt(size);

				for(int cnt=0; cnt< s; cnt++){
					
					out.print("-");
				}
				out.print("<br />");
			%>
		
		-tagfile.jsp
			<util:line color="#ff4800" size="5"/>
				아래와 같이 출력됨
				<span style="color: #ff4800">----------</span><br />
				-----<br />

		- type속성 사용하기
			-line.tag
				<%@attribute name="size" type="java.lang.Integer" %>
				<%
					for(int i=0; i<size; i++) //<- 이렇게 사용할 수 있다.
				%>
			-tagfile.jsp
				<util:line size="5"/> // size 속성에 문자를 넣으면 에러

--------- 태그파일의 내장변수
	request , response, out, application, session, config, jspContext

--------- 속성 required="true"
	- size 속성을 쓰지 않으면 에러를 내보낼 수 밖에..
	- 의무적으로 속성을 쓰게 알려주고 싶다면, 해당 attribute 속성에 required="true" 를 사용.

	<%@attribute name="size" type="java.lang.Integer"%>
	An exception occurred processing JSP page /tagfile.jsp at line 11

	<%@attribute name="size" type="java.lang.Integer" required="true"%>
	자세한 에러 출력
	According to the TLD or the tag file, attribute size is mandatory for tag line

--------- dynamic-attribute
	- 동적 속성을 지정하면 아무 속성이나 정해서 쓸수 있다
	- 쓰지 않는 속성을 써도 에러가 발생하지 않는다.

	- line.tag
		<%@tag import="java.util.Map"%>
		<%@ tag body-content="empty" language="java" pageEncoding="UTF-8"%>
		<%@tag dynamic-attributes="attrs" %>
		<span style="color: ${attrs.color}">----------</span><br />
		<%
			Map attrs = (Map) jspContext.getAttribute("attrs"); //dynamic-attributes Map 객체 반환
			String strSize = (String) attrs.get("size"); //size 속성 반환
			int size = Integer.parseInt(strSize); //숫자형으로 변환
			for(int cnt=0; cnt< size; cnt++){
				
				out.print("-");
			}
			out.print("<br />");
		%>

	- tagfile.jsp
			<util:line color="#ff4800" size="5"/>
				아래와 같이 출력됨
				<span style="color: #ff4800">----------</span><br />
				-----<br />
--------- body-content 속성, <jsp:doBody />

	- body-content란 : <util:line>여기가 body</util:line>
	- body-content 속성 : empty , scriptless , tagdependent
	- empty : 없어야 된다
		<util:line /> 또는 <util:line></util:line>

	- scriptless : body 속에 스크립틀릿,표현식<%%>이 있으면 에러, EL, 표준액션은 에러 아님.
		<util:line>여기가 body <%=num %> </util:line>  //에러

	- tagdependent : body 속에 스크립트, el, 액션 요소가 있으면 문자열로 출력
		<util:line>여기가 body <%=num %> ${num} </util:line>
		<jsp:doBody /> 하면 body안 문자열로 출력
			"여기가 body <%=num %> ${num}"

	- 구조 파악

		- /WEB-INF/tags/util/util.tag
			<%@ tag body-content="scriptless"%>

			<table border="1" cellpadding="2">
				<tr>
					<td>
						<jsp:doBody />
					</td>
				</tr>
			</table>

		- tagfile.jsp
			<%@taglib prefix="util" tagdir="/WEB-INF/tags/util" %>
			<util:line >하늘사랑</util:line>

		- 출력
			<table border="1" cellpadding="2">
				<tr>
					<td>
						하늘사랑
					</td>
				</tr>
			</table>


--------- 태그파일에서 jsp파일에 변수 넘기기 , 방법 (1)

	- .jsp 파일에서 ->  .tag 파일에 변수값 넘길때는	@attribute
	- .tag 파일에서 ->  .jsp 파일에 변수값 넘길때는	@variable

	- 기본 형식
		1. 태그 파일 지시자(@variable) 
			<%@variable name-given="maximum" variable-class="java.lang.Integer" scope="AT_END" %> //1번
			- name-given="maximum" 사용할 변수명 설정.
			- 이렇게 선언해 놓은 변수는 태그파일과 .jsp파일에서 사용할 수 있다.
			- 기본 변수 값은 모두 문자열이므로 int 형으로 하고 싶을때 래퍼클래스를 설정
				variable-class="java.lang.Integer"

			- scope는  아래 다른 섹션으로 다시 설명.

		2. 태그파일 안에 jstl set 변수 액션으로 셋팅(설정한 maximum 변수명 사용해서 설정)
			<c:set var="maximum" value="<%=result %>" />
		3. jsp 파일에서 EL 형식으로 호출
			${maximum}
		

		- test.tag		
			<%@ tag body-content="empty" language="java" pageEncoding="UTF-8" %>
			<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
			<%@attribute name="num1" type="java.lang.Integer" %>
			<%@attribute name="num2" type="java.lang.Integer" %>
			<%@variable name-given="maximum" variable-class="java.lang.Integer" scope="AT_END" %> //1번
			<%
				int result = 0;
				if(num1 > num2){
					result = num1;	
				}else{
					result = num2;
				}	
			%>
			<c:set var="maximum" value="<%=result %>" /> //2번


		- test.jsp
			<%@taglib prefix="util" tagdir="/WEB-INF/tags/util" %>

			<util:test num1="200" num2="30"  ></util:test>
			${maximum} //3번
--------- @variable scope 속성

	- NESTED (디폴트) , AT_BEGIN , AT_END

	- 예제) body-content = "scriptless" 했을 경우
	
		- test.tag
			<%@ tag  body-content="scriptless" pageEncoding="UTF-8" %>
			<%@variable name-given="result" variable-class="java.lang.Integer" scope="요기에 속성 적용" %>
			<c:set var="result" value="200" />
			<jsp:doBody />

		- test.jsp
			<%@taglib prefix="util" tagdir="/WEB-INF/tags/util" %>

			<util:test>태그 안 : ${result} </util:test> , 태그 이후 : ${result}
		
		- scope 속성 적용 결과
			- NESTED (디폴트)
				태그 안 : 200 , 태그 이후 :
			- AT_BEGIN
				태그 안 : 200 , 태그 이후 :200
			- AT_END
				태그 안 : , 태그 이후 :200

--------- 태그파일에서 jsp파일에 변수 넘기기 , 개선된 방법 (2)

	방법(1)에서는 maximum 변수를 태그 파일에 고정해서 한다.
	jsp 파일에서 태그를 사용할때 그 변수명 사용에 실수가 있을 수도 있고, 충돌이 있을 수도 있다
	그래서 변수명 설정권을 jsp 태그 사용에서 하고 싶다.

	아래 처럼 만들면 태그변수 var에 사용할 변수명을 내가 정해서 쓸수 있다.(어디서 본 것 같지 않나?jstl에서?)
		<util:test var="maximum" num1="200" num2="30"  ></util:test> // 이 태그에서 계산한 결과를
		${maximum}  //요기로

	1. jsp에서 쓸 태그 속성 설정
		<%@attribute name="var"  required="true" rtexprvalue="false" %>
			
			name="var" : var 속성을 쓸 것이고
			required="true" : 필수 속성이라 꼭 써야하고
			rtexprvalue="false" 변수명을 쓸 것이므로, 스크립팅 요소나 표현식을 사용 못하게 한다.

	2. .tag 파일과 .jsp 파일에서 쓸 변수 설정
		<%@variable name-from-attribute="var" alias="result" variable-class="java.lang.Integer" scope="AT_END" %>
			name-from-attribute="var" : .jsp 파일에서는 태그의 속성값을 변수명으로 사용한다.
			alias="result" : .tag파일 안에서는 이 값으로 변수명을 사용한다.
			variable-class="java.lang.Integer" : 변수명의 값은 숫자형 값으로..
			scope="AT_END" : 태그 끝난 후 사용하겠다.


	- test.tag
		<%@ tag  body-content="scriptless" pageEncoding="UTF-8" %>
		<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		<%@attribute name="var"  required="true" rtexprvalue="false" %> <-(1)
		<%@attribute name="num1" type="java.lang.Integer" %>
		<%@attribute name="num2" type="java.lang.Integer" %>
		<%@variable name-from-attribute="var" alias="result" variable-class="java.lang.Integer" scope="AT_END" %> <-(2)
		<%
			int max = 0;
			if(num1 > num2){
				max = num1;	
			}else{
				max = num2;
			}	
		%>
		<c:set var="result" value="<%=max %>" /> <-(3)

	- test.jsp
		<util:test var="maximum" num1="200" num2="30"  /> <-(4)
		${maximum} // 200 

--------- 태그파일에서 jsp파일에 변수 넘기기 , 개선된 방법 (3)
	
	개선된 방법(2)를 응용해 jstl 태그 같은 기능을 만든다.

		- compute.tag

			<%@ tag body-content="scriptless" language="java" pageEncoding="UTF-8"%>
			<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
			<%@attribute name="var" required="true"  rtexprvalue="false" %>
			<%@attribute name="start" required="true" type="java.lang.Integer" %>
			<%@attribute name="end" required="true" type="java.lang.Integer" %>

			<%@variable name-from-attribute="var" alias="number" variable-class="java.lang.Integer" scope="NESTED" %>

			<%
				for(int i=start; i<=end; i++){
					
			%>
				<c:set var="number" value="<%=i %>" />
				<jsp:doBody />
			<%} %>

		- compute.jsp

			<%@ page language="java" contentType="text/html; charset=UTF-8"  pageEncoding="UTF-8"%>
			<%@taglib prefix="util" tagdir="/WEB-INF/tags/util" %>
			<!DOCTYPE html>
			<html>
			<head>
			<meta charset="UTF-8">
			<title>제곱근실험</title>
			</head>
			<body>
				<h3>제곱근 계산</h3>
				<util:compute  var="num" start="1" end="5">
					${num} 의 제곱근은? ${num * num } <br />
				</util:compute>
			</body>
			</html>

		- html 출력

			<!DOCTYPE html>
			<html>
			<head>
			<meta charset="UTF-8">
			<title>제곱근실험</title>
			</head>
			<body>
				<h3>제곱근 계산</h3>

					1 의 제곱근은? 1 <br />
							
					2 의 제곱근은? 4 <br />
								
					3 의 제곱근은? 9 <br />
				
					4 의 제곱근은? 16 <br />
				
					5 의 제곱근은? 25 <br />
			</body>
			</html>
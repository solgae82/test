암호화개론
	암호화 방식에는 크게 두가지가 있다.

	대칭키 방식: 암호화 하는 하나의 키로 암호화하고, 다시 동일한 키로 복호화 하는 것.
	공개키 방식: 암호화키를 두개를 만든다
		private-key (개인키,비밀키,비공개키) : 암호화 제작자만이 가지고 있을 수 있는 소중한 키(절대 잃어버려선 안된다)
		public-key (공개키) : 아무나에게 줄 수 있는 키, 공개된 키.

		암호화 저음 만드는 자(제작자)가 두개의 키를 동시에 만든다 (출력한다).
		만들어낸 두개의 키중 하나는  private-key, 또 다른 하나는  public-key .

		private-key 는 이름 그대로 개인키이므로 제작자 자신만 소유하고, 
		public-key 는 암호로 소통하려는 자(하나 또는 다수 대상자) 에게 공개한다.

		다시,
		private-key는 제작자 자신만이 컨트롤 할 수 있게 해야한다.(절대 유출되선 안된다. 유출되면 암호화 신뢰성 깨진것)
		pubic key 는 소통해야할 자에게 전달한다.(제 3자에게 유출되어도 상관없는 어떤 방식에 쓰면 된다)

		그럼 두 키의 작동방식을 보자.

			public-key로 암호화하면 => private-key 로만 복호화 가능(public-key로 복호화 못함).
			private-key로 암호화하면 => public-key 로만 복호화 가능(private-key로 복호화 못함).

		이런 특징이 있다.

		위의 private-key 특징(제작자만 소유)과 public-key 특징(아무나 소유)과 , 작동방식을 조합하면 
		일반적인 암호화 방식과 인증(?)[전자서명] 매카니즘을 구현할 수 있다.

		1) public-key => private-key
			
			public-key는  암호 제작자가 아닌 소통하려는 상대, 심지어 전혀 모르는 다수가 가질 수도 있다.
			그래서 퍼블릭 키라고 한다.
			그런데, 왜 아무나에게 공개했을까?
			
			일단 보자
			위에서 설명했듯이, 일반 대상자가 public-key로 암호하 해서, 암호 제작자에게 넘겨줬다고 가정해보자.
			public-key로 암호화 한 것은 private-key로만 복호화 할 수 있다.
			private-key는 누설되지 않는 지켜져야할 비밀키이고, 그걸 가지고 있는자만 복호화 할 수 있다.

			첫번째 응용분야는 암호화 전달 및 풀기용이다.
			public-key는 세상에 마구 뿌려진 개나소나 다 습득할 수 있는 키이고,
			그걸로 암호화 한 암호문서를 private-key 소유자(암호 제작자)에게 전달했고 그걸 복호화(풀기) 했다는 것은, 
			어떤자가 분명 어딘가에서 public-key를 습득했고, 그걸로 암호화해서 전송했다는 것이 확실하다.

			그 분명 어딘가를 어떤 특정한 곳에 가야만 습득할 수 있다면, 거길 간게 확실하다? 
			뭐 이런식으로 응용 가능할 것 같기도..

			어쨌든 이 방식은 이러한 특징이 있다.
			
		2) private-key => public-key
			
			private-key 가진자가 신뢰를 받아야 할 대상이라고 해보자.
			
			public-key는 개나소나 다 주워서 가지고 있다.
			'난 니가 갖고 있는 public-key의 창조자(神)이다' 를 세상사람들이 믿게 하고 싶다.
			
			그렇다면 제작자는 자신만이 가지고 있는 private-key로 암호한 문서를 세상의 개나소나에게 뿌린다.
			다수의 개나소나는 public-key를 모두 가지고 있으므로, 전달받은 암호화 문서를 public-key로 복호화 시도한다.
			이때 복호화가 되었다면
				'오! 당신은 이 public-key를 창조하신 신(神)이 맞군요' 할 것이다.
			복호화가 실패라면
				'니미시벌눔아 어디서 사기쳐!' 하며 다구리 당하겠지..

			기본적인 암호화 <=> 복호화 특징 이외에도, 특정 신뢰받아야할 자가 맞는지 인증하는 매커니즘도 되는 것이다.
			이런 매카니즘으로 '전자서명' 이라 불리는 방식이 이뤄진다.

https 개통하는 형식과 작동방식 

	위 암호화개론를 잘 이해했다면,
	웹브라우저와 서버 사이의 https의 큰 그림과 더 상세한 설명도 이해하게 될 것이다.

	처음 접속 탐색(handshake) 단계에서는 공개키 방식 암호화&복호화로 신뢰성 인증하고, 
	신뢰성 인증 후 데이터 전송단계는 컴퓨팅 파워가 덜 소모되는 대칭키 방식으로 암호화해서 사용한다.

	CA (Certificate authority)  이해하기
		웹브라우저(클라이언트) 와 서버 사이의 통신중에 
		CA라는 기관에서 발급한 ssl인증서가 해당 서버가 신뢰되는 도메인임을 보장한다.
		
		도메인을 가진 서버는 해당 도메인과 서버가 신뢰되는 사이트임을 CA기관과 여러절차를 거쳐 인증하게 되고, 
		그 인증된 결과로 CA기관이 발급한 ssl인증서를 받아서 서버에 설치한다.

		웹 브라우저는 제작 단계부터 모든 CA 인증 기관 리스트를 내장해서 출시 되는데,
		CA 인증기관별 공개키도 함께 가지고 있게 된다.

		일단 여기까지만 알아두고 아래 큰 그림을 이해하자
		

	개통과 작동방식의 큰 그림:
		일단 서술로 해보자.
			CA라는 존재가 있다. 당신 도메인을 검사해서 신뢰되는 도메인임을 인증하고 ssl인증서를 발급해준다.
			CA에서 여차저차 절차를 거쳐서 해당 도메인 ssl인증서를 받급 받는다(돈을 내야한다.또는 무료도 있다)
			CA에게 받은 ssl인증서를 서버에 설치하면 서버는 이제 https가 요청을 받을 수 있게된다.
			
			서버가 웹브라우저와 첫 접속시 서버에 설치된 ssl인증서를 웹브라우저에게 건네고,
			웹브라우저는 모종의 방법으로 ssl인증서를 검사해서 현재 접속한 도메인 서버가 CA에게 인증받은 안전한 사이트임을 알게되고,
			신뢰할 수 있음을 알게 된다.

			ssl인증하고 나서, 서로의 암호화 통신 방법을 협상한 후 그 협상한 암호화 통신 방법으로 서로 정보를 건네고 ,
			끝나면 세션 종료한다.

		다시 정리해보자.
			1) 내 도메인을 https를 사용하게 하고 싶으면, 여러 CA인증기관중 하나를 선택해서 그 기관이 발행하는 ssl인증서를 발급 받아야 한다.(비용이 들어간다는 말)

			2) 발급받은 ssl인증서를 서버에 설치한다
			
			3) 웹 브라우저의 https 요청이 서버에 도착하면 서버는 설치된 ssl인증서를 웹브라우저에게 보내준다.

			4) 웹브라우저는 받은 인증서를 모종의 매커니즘으로 검토해서 현재 접속요청한 도메인이 CA인증기관의 인증을 받은 도메인임을 신뢰하게 된다.

			5) ssl인증이 끝나면 서버와 웹브라우저는 서로가 암호화하고 복호화가 가능한 암호방식을 협상과 형식을 정한 후 협상한 암호화 방식으로 서로 정보를 주고 받는다.
			
			6) 정보가 모두 전달 완료되면 세션 종료한다.
		

	개통과 작동방식을 더 상세하게 보기:

		https 통신을 할 서버가 (dong.com) 이라고 하자.

		1) CA인증기관에서 ssl인증서 발급받기
			
			(dong.com) 서버에서 공개키방식으로 (private-key, public-key) 를 생산해낸다.
			생산된 public-key + 도메인 주소 + 암호화 방식 등을 CA기관에게 전송한다.(ssl인증서 등록하기 위해)
			private-key는 (dong.com)서버가 가지고 있다.

			CA기관도 자체적으로 공개키방식으로 (private-key, public-key) 생산된게 이미 있다.
			웹브라우저 제작단계때 삽입되는 CA리스트에 CA기관 + public-key 로 포함되게 이미 제출된 상태이다. 
			그러므로 모든 웹브라우저는 이미 해당 CA기관 + public-key를 보유하고 있는 상태이게 된다.
			private-key는 해당 CA기관이 가지고 있다.

			CA기관에서는 ssl인증서 요청을 한 (dong.com) 서버 정보들(public-key + 도메인 주소 + 암호화 방식 등) 검토하고,
			또한 해당 도메인이 운영되는 진짜 도메인인지 등을 점검하고 맞으면 
			받은 (dong.com)의 [서버 정보들 + 인증서를 발급한 CA 정보도 포함해서]정보들 부터 ssl인증서를 만들게 되는데,
			이때 CA기관이 가지고 있던 private-key로 암호화해서 ssl인증서를 만들어 낸다.

			CA기관의 private-key로 암호화되어서 만들어진 (dong.com) ssl인증서를 메일등을 통해 해당 (dong.com) 서버관련자에게 전달된다.
			
			
		2) 서버에 ssl인증서 설치하기
			
			서버관리자는 메일로 받은 ssl인증서를 서버에 설치하게 된다.
			그리고 서버에에서 생산한 private-key도 설치한다.
			
			각 서버별로 설치법은 대동소이 하다. 어쨌든 설치하고 서버 재부팅을 하면 https를 사용할 수 있는 상태가 된다.

		3) ssl 통신 방식 이해하기

			서버(dong.com)
				
				CA기관에서 CA의 private-key로 암호화된 ssl인증서가 설치되어있다.
				ssl인증서 정보에서는 서버(dong.com)가 제출한 (public-key + 도메인 주소 + 암호화 방식등)이 있다.
				ssl인증서를 복호화하려면 해당 CA기관의 public-key 만이 복호화 할 수 있다.


			웹브라우저
				웹 브라우저 제작때부터 이 CA 인증기관 리스트와 CA 인증기관의 공개키등이 브라우저에 내장된다.

				CA	| 공개키
				---------------
				toSign	| caXy..
				comodo	| kkxy..

				이런 식으로 내장되었다고 생각하자.

				그러므로 어떤 CA기관이던지 그 CA기관이 자사 private-key로 발급한 ssl인증서를 복호화 할 수 있는 장치가 
				이미 웹브라우저에 내장 되어있다. 

				또한 복호화를 했다는 것은!!
				웹브라우저가 가지고 있는 CA기관이 발급한 ssl인증서임에 틀림없는 사실이 되는 매커니즘이 있다.
				이게 그 서버의 신뢰성 인증이 된다.


			자 통신 절차 요약을 진행해보자

			handshake:
				(1) 웹브라우저가 https://dong.com/ 에 접속 요청
					- 클라이언트에서 만든 랜덤데이터 전송.(암호화에 사용할)
					- 해당 웹브라우저가 사용할 수 있는 대칭키 암호방식 리스트를 전송
					- 세션 아이디(연결된 상태를 확인하는..) 전송
				(2) 서버가 웹브라우저에게 응답
					- 서버에서 만든 랜덤데이터 전송.(암호화에 사용할)
					- 받은 웹브라우저가 사용 가능한 대칭키 암호방식 리스트 중에 하나 선택해서 전송.(협상선택)
					- ssl인증서 
					([인증서를 발급한 CA + 서버 public-key + 도메인 주소 + 암호화 방식]등이 CA private-key로 암호화 된) 전송
					

				(3) 서버 응답 받은 웹브라우저
					- 어떤 방법으로 ssl인증서를 발급한 CA명을 알아내는지는 모르겠으나 어쨌든 ssl인증서를 발급한 CA명을 받았다고 치고..
					- 받은 CA명을 내장된 CA리스트에서 검색
						- 있으면 해당 CA의 공개키로 받은 ssl 인증서 복호화
						- (없으면, 너 뭐냐..연결 종료.)
					- ssl인증서가 복호화가 되었다면, (너 진짜가 맞구나!)
						신뢰하는 CA기관이 만들어낸 ssl인증서가 맞고, 
						그 신뢰있는 CA가 인증해준 도메인이 맞다고 보장됨.
						ssl인증서 복호화로 신뢰 인증은 해결 되었음.
						(복호화 실패면, 너 뭐냐..연결 종료.)
					- 현재 웹브라우저 가지고 있는 정보.
						- 인증서 내용(복호화된)
							- 서버 public-key
							- 도메인
							- 암호화 방식 (서버의 private-key로 복호화 할 수 있는)
						- 서버가 보내 준 랜덤 데이터
						- 웹브라우저가 만든 랜덤 데이터
						- 협상으로 서버가 선택해준 대칭키 암호화 방식
					- 웹브라우저 랜덤데이터 + 서버랜덤데이터 조합으로 pre master secret 만듬
					- 받은 인증서 안 서버 public-key 와 암호화 방식으로 pre master secret 암호화해서 서버에 전송.
					- pre master secret 가 이후 데이터 전송에 쓰일 대칭키 암호방식의 복화키의 한 형태가 된다.

				(4) 웹브라우저의 재전송을 받은 서버
					- 받은 암호화돈 pre master secret 를 
					가지고 있던 private-key와 암호화(인증서에 설정된) 방식으로 복호화 한다.
					- 현재 서버에 알고 있는 정보
						- 웹브라우저 랜덤데이터
						- 서버 랜덤데이터
						- 받은 pre master secret


					(이제부터는 대충 뇌피셜이다)
					뭐 여차저차 해서 받은  pre master secret -> master secret -> session key
					가 되어서, 만들어진 session key가 
					웹브라우저와 서버에서 서로 정보를 보낼때 암호화를 할텐데, 그 암호화를 하고 복호화를 해줄 대칭키란다.

					그럼 이걸 다시 웹브라우저에 전송하는 것인지, 아님 동시에 알아서 웹브라우저도 저 과정을 거쳐서 session key를
					만들어 내는지 알 수가 없다.(왠지 각자 알아서 도출하는 것같다)

					대충 결론은 저 대칭키 session key가 
					웹브라우저와 서버가 연결된 세션상에서 각자 갖고 있는 상태라는 것이다.

					여기까지가 handshake 단계라고 한다.

			데이터 전송(session):
				session key로 암호화 복호화를 하면 서로 통신한다.

			세션 종료 : 
				통신이 끝나면 지금까지 설정한 세션이 폐기되면서 정보도 초기화 된다.
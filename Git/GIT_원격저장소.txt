기본 요약

	- 원격저장소 가져오기 : clone, fetch, pull 
	- 원격저장소로 내보내기 : push
	- 로컬 저장소와 원격 저장소를 연결해야 한다
		- 연결 방법
		1. 로컬 리포지터리 생성 후 원격 리포지터리에 연결 하는 방법
			- git init으로 로컬 저장소 생성
			- git remote로 원격 저장소 연결
			
		2. clone 연결하기
			- 원격 저장소 소스 복제 기능으로 
			로컬저장소 자동생성 + 원격 저장소 연결(remote)
			한번에 이루어진다.

원격 저장소 연결하기

	1. 로컬 리포지터리 생성 후 원격 리포지터리에 연결 하는 방법
		
		- 로컬 리포지터리를 생성해야한다.
			$ mkdir test1
			$ cd test1
			$ git init

		- 생성한 로컬 저장소와 원격저장소를 연결하는 작업을 해야한다
		- 연결 후 ferch, pull(가져오기), push(내보내기) 등을 할 수 있다.

			#원격 저장소 연결하기
				$ git remote add github https://github.com/solgae82/test.git

			#원격 저장소 내역 보기
				$ git remote -v
				github   https://github.com/solgae82/test.git (fetch)
				github   https://github.com/solgae82/test.git (push)

	2. clone 명령어로 복제해서 연결하기

		로컬리포지터리 생성 없이 원격 저장소 소스를 로컬로 받아오면서 
		init(로컬 저장소생성) + remote 과정이 한번에 해결되는 방법이다
		아래에서 다룬다



처음 가져오기

	- 처음 가져오기 예제(clone, fetch, pull)
	- test1(로컬저장소) 에 가져온다고 가정

	
	1. fetch로 가져오기

		- 사용법 : git fetch <원격 저장소 별칭> <원격 저장소 브랜치명>
		- 로컬 저장소를 만들고 원격저장소를 연결하는 과정이 필요하다
		- fetch는 현재 브랜치와 바로 병합하는 것이 아니라, 임시 저장소(remotes/github/main)에 가져오고,
		충돌 났는지, 비교등을 하고  직접 수정해서 반영하라는 수동모드.

		$ mkdir test1		#로컬저장소 디렉토리 생성
		$ cd test1		#이동
		$ git init		#로컬저장소 생성
		$ git remote add github https://github.com/solgae82/test.git	#원격저장소 설정
		$ git remote -v		#원격저장소 설정 확인
		  github  https://github.com/solgae82/test.git (fetch)
		  github  https://github.com/solgae82/test.git (push)

		$ git fetch github main	#원격저장소에서 가져오기
		$ git branch -a		#임시로 받은 원격저장소 브랜치 확인
		  remotes/github/main		#원격으로 가져온 임시 브랜치

		$ git merge remotes/github/main		#(편집수정할 내용없음) 현재 master로 합침 
		$ git branch -a		#브랜치 다시 확인
		* master		#원격으로 가져온 브랜치와 합쳐서 새로 생성된 master
		  remotes/github/main	#원격으로 가져온 임시 브랜치

		$ git status		#상태확인

	2. pull로 가져오기
		
		- 사용법 : git pull <원격 저장소 별칭> <원격 저장소 브랜치명>
		- 로컬 저장소를 만들고 원격저장소를 연결하는 과정이 필요하다
		- fetch + merge 명령이라고 생각할 수 있음.
			
		$ mkdir test1		#로컬저장소 디렉토리 생성
		$ cd test1		#이동
		$ git init		#로컬저장소 생성
		$ git remote add github https://github.com/solgae82/test.git	#원격저장소 설정
		$ git remote -v		#원격저장소 설정 확인
		  github  https://github.com/solgae82/test.git (fetch)
		  github  https://github.com/solgae82/test.git (push)

		$ git pull github main		#가져오기 (fetch + merge)
		-----------------------
		★ 에러발생시 : fatal: refusing to merge unrelated histories
			(--allow-unrelated-histories 옵션주면 해결 됨)

			$ git pull github main --allow-unrelated-histories

		-----------------------
		$ git branch -a			#가져온 브랜치 확인,master가 생겼음을 볼 수 있음(병합되었음)
		* master			#원격으로 가져온 브랜치와 병합된 로컬 master브랜치
		  remotes/github/main		#원격 브랜치

		$ git status	#상태확인

	3. clone으로 가져오기
		
		- 로컬 저장소를 만들고 원격저장소를 연결하는 과정이 필요없다
		- 사용법 :  git clone <연결한 원격주소 url> <생성될 로컬 저장소명>
		
		$ git clone https://github.com/solgae82/test.git test1	
		

		$ cd test1		#복사된(로컬저장소) 위치로 이동
		$ git branch -a		#branch 확인
		* master
		  remotes/github/HEAD -> github/main
		  remotes/github/main

		$ git status	 #확인


	
원격저장소에 올리기(push)

	- 먼저 fetch 또는 pull을 한다...그리고 병합 수정 작업 후 commit
	- 사용법 : git push <원격 저장소 별칭> <로컬 저장소 브랜치명> 
		 git push <원격 저장소 별칭> <로컬 저장소 브랜치명>:<원격 저장소 브랜치명>

	예제)
	로컬 브랜치명 : master
	원격저장소 브랜치명 : main

		$ git push github master 
		# 로컬저장소 master 브랜치 -> 원격 저장소의 master 브랜치에 업로드,없다면 새로운 원격브랜치(master)생성

		$ git push github master:main
		# 로컬저장소 master 브랜치 -> 원격 저장소의 main 브랜치에 업로드,없다면 새로운 원격브랜치(main)생성
				
	* 브랜치명은 원격 브랜치명과 로컬 브랜치명을 같게 하는게 일관성 측면에 좋다
			
		$git branch -M main
		# 현재 위치의 브랜치명인 master -> main 으로 변경 
		
		# 이렇게 일치 시키면 명령어 길이도 줄어든다
		$ git push github main 

	- 깃 허브 올려 보기(현재 로컬 브랜치 master 가정)

			$ git push github master:main	
		
			# 깃허브 기본 브랜치명이 master 이었는데, main으로 바뀌었음(노예제 연상시킨다고)
			# ex) 계정(dong) , 깃허브 비밀번호 등을 입력한다

		- 아래처럼 -u옵션 한번만 해주면 다음 push 부터는   'git push' 만 해도 된다.

			$ git push -u github master:main 

원격 저장소 삭제
	
	- 사용법 : git push <원격 저장소 별칭> --delete <원격저장소 브랜치명>
		또는
		git push <원격 저장소 별칭>:<원격저장소 브랜치명>

		$ git branch -r #현재 3개의 원격저장소(깃허브) 브랜치가 있다
		github/main
		github/master
		github/test1

		$ git push github --delete test1  #원격저장소 test1 브랜치 삭제

		$ git branch -r # test1 로컬 리스트 삭제 확인
		github/main
		github/master

		# 실제 원격저장소의 브랜치도 삭제되었는지 확인한다.


원격저장소 브랜치 리스트와 로컬 원격 저장소 리스트 동기화 하기
	
	: 예를 들어 원격 저장소의 브랜치를 해당 사이트 웹프로그램에서 직접 지웠을 경우
	로컬에 연결된 원격저장소 리스트가 자동으로 삭제되는 것은 아니다
	이럴때 로컬 원격 저장소 브랜치 리스트 <-> 원격 저장소 브랜치 리스트의 동기화가 필요하다

	$ git fetch --all --prune
	또는
	$ git remote prune github




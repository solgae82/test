기본용어
-작업트리, working tree, working directory
-stage, staging area
-저장소, repository

#디렉토리 초기화
	$ git init
	$ git init test # test 디렉토리 만들고 그안에 설정

현재 디렉토리 git상태 보기
	$ git status

#staging 하기
	- .git/index 에 staging 내용이 저장된다
	$ git add [파일명,.,*]
	
	

#커밋하기
	$ git commit [파일명,.,*]
	$ git commit -m "message test"
	$ git commit -am "commit with add"

#최신버전 커밋메시지 변경
	$ git commit --amend

#깃 로그보기
	$ git log

	# 관련 파일 세부변경까지 함께 보기
	$ git log --stat (다음:enter , 실행중지: q)

#비교하기 (작업트리와 리포지터리 버전과 비교하는 것)
	$ git diff

#수정파일 (stage 올리기 전) 리포지터리 최신버전으로 복구
	
	$ git checkout -- [파일명,.,*]
	또는
	$ git restore [파일,.,*]

#stage에 올린 파일 unstage 하기
	- 수정된 파일은 그대로 있다.
	- staged 상태만 취소된다.(modified 상태)

	$ git reset HEAD [파일명,.,*]
	또는
	$ git restore --staged [파일명,.,*]

#커밋 취소
 
 - 커밋취소 (staged 상태로)
	$ git reset --soft HEAD^

 - 커밋취소 (modified 상태로) 
	$ git reset --mixed HEAD^
	또는
	$ git reset HEAD^ (기본으로 하면 mixed 옵션과 같다)

 - 커밋취소 (수정 이전상태 = 이전 커밋 상태로)
	$ git reset --hard HEAD^


#특정 커밋 해쉬 이전으로 되돌리기
	- [git해쉬id] 바로 *이전버전이 새로 커밋된다
	- 되돌리기 효과 , git log는 늘어남.
	- 다른 브랜치 해쉬id라도 그것으로 변경되고, 결국 연결이 끊어진 브랜치 커밋은 삭제됨.

	$ git revert [git해쉬id]

# 브랜치 보기(현재 체크아웃된 브랜치는 (*)표시가 있다)
	$ git branch
	*master #현재 브랜치
	apple

# t1 브랜치 만들기
	$ git branch t1
	
# t1 브랜치로 체크아웃하기
	$ git checkout t1
	
	# 깃 t1 브랜치 만들고 t1 브랜치로 체크아웃하기(동시)
	$ git checkout -b t1

#깃 로그 각 브랜치별로 한 라인씩 보기
	$ git log --oneline --branches

#깃 로그 각 브랜치별로 그래프 표시로 보기
	$ git log --oneline --branches --graph

#깃 로그 브랜치 vs 브랜치로 비교
	- 아래 예제는 master 브랜치에는 없고, apple 브랜치에만 있는 commit 로그를 보여준다

	$ git log master..apple

# 병합
	- 체크아웃 한 기준에서 합쳐진다. 아래는 master 브랜치에 합쳐진다고 가정.
	
	$ git merge t1

#수정중인 파일 감추기 및 되돌리기(임시로 어딘가에 잠깐 저장하기)
	- 현재 modified 상태의 파일이 있다면
	
		$ git stash (또는  git stash save)

	하고 git status 해보면 

	modified 상태가 사라진 것을 확인 할 수 있다. 수정된 파일은 수정전으로 바뀌고..
	실제로는 사라진 것이 아니고 어딘가에 저장 되어 있는 것..(이게 stash)

	git stash list  명령을 하면

		stash@{0}: WIP on master: 438851f f2
	처럼 {0} 의 숨겨진 stash list 를 볼 수 있다.
	같은 식으로 여러번 git stash  명령을 내렸다면..
		stash@{0}: WIP on master: 438851f f2
		stash@{1}: WIP on master: 438851f f2
	위에 처럼 스택 형식으로 쌓인다(최신 것이 위에 있는 구조)

	저장한 형식을 다시 불러내고 싶으면 
		
		$ git stash pop

	그려면 {0} 작업이 다시 modified 상태로 돌아온다.
	그리고 다시 git stash list 명령으로 숨겨진 stash 리스트를 보면 제일 위에 것이 
	pop이 되고 제일 아래 {1} -> {0}으로 변경되었음을 확인 할 수 있다

		stash@{0}: WIP on master: 438851f f2
	
	일반 프로그래밍 언어 배열 사용법과 같다

	아래처럼 
		$ git stash pop 1

	index를 명시적으로 줘서 {1}을 pop 할 수도 있다.

	
	stash 리스트를 변경하지 않고 그 변경 이력 상태만 가져올 수있다.
		$ git stash apply

	이렇게 하면 최신 stash 상태가 modified 상태로 불려와지고 
	pop 과 는 달리  git stash list 하면 저장 상태 그대로 있다
		 
		$ git stash list
		stash@{0}: WIP on master: 438851f f2
		stash@{1}: WIP on master: 438851f f2

	apply 도 index를 쓸 수 있다
		$ git stash apply 1

	명시적인 삭제도 있다
		
		$ git stash drop  # stash 리스트 최신 위에 것 삭제
		또는 
		$ git stash drop 1 # stash 리스트 명시적 인덱스 삭제

	요약:
		git stash
		git stash list
		git stash pop
		git stash apply
		git stash drop

--------------------------------------- 원격저장소
#원격 저장소 연결하기
	$ git remote add test1 https://github.com/solgae82/git_study.git
	
#원격 저장소 내역 보기
	$ git remote -v
	test1   https://github.com/solgae82/git_study.git (fetch)
	test1   https://github.com/solgae82/git_study.git (push)


#원격 저장소에 올리기

	사용법 : git push <원격 저장소 별칭> <원격 저장소 브랜치명> 
	
	$ git push test1 main

	$ git push -u test1 main #이렇게 -u옵션 한번만 해주면 다음번엔  'git push' 만 해도 된다.

#원격 저장소 최신 커밋 현재 브랜치에 가져와서 합치기
	
	사용법 : git pull <원격 저장소 별칭> <원격 저장소 브랜치명>

	$ git pull test1 main

	★ 에러발생시 : fatal: refusing to merge unrelated histories
			(--allow-unrelated-histories 옵션주면 해결 됨)

		$ git pull test1 main --allow-unrelated-histories

#원격 저장소 최신 커밋 임시 저장소에 가져오기

	사용법 : git fetch <원격 저장소 별칭> <원격 저장소 브랜치명>

	$git fetch test1 main

	- fetch 는 임시로 가져오는 것이다
	- FETCH_HEAD라는 임시 브랜치에 있다.
	- 임시 브랜치에서 확인 후 수동으로 현재 브랜치로 합친다..
	- 그러므로 git pull 기능은 (fetch + merge)라고 볼수 있다.

	$ git checkout FETCH_HEAD
	$ ls -al #파일등을 확인 후 이상 없으면..

	$ git checkout master

	$ git merge FETCH_HEAD


	

--------------------------------------- 깃 허브
# pull request
	
	지역 로컬에서 브랜치(mybranch 라고 하자)를 만들고
	그 브랜치를 깃허브에 push 하면, 깃허브 브랜치 란에 있게 된다.

	push 한 깃허브 저장소 올린 브랜치(mybranch)를  깃허브 master 에 merge 하는 과정중에 
	pull request  라는 모드(?)가 있다.

	이 과정을 거쳐서 merge 하게 되면 깃허브 master에 병합된다.
	공동작업자 누구나 그 브랜치 내용을 보고 merge 할 수 있다.

	과정은 아래와 같다
	
	1) New pull request
	2) Merge pull request
	3) Confirm merge (commit)

	복잡한 용어를 쓴다..
	깃허브만의 규칙 같다..깊이 생각하지 말자.

	또는
	
	fork한 (깃 허브에서)
	원본 저장소의 개발자에게 내가 수정한 것을 반영(merge)해 달라고 요청하는 것을 풀 리퀘스트(pull request) 라고 한다.

	1) New pull request
	2) create pull request
	3) create pull request (commit)

	원본 저장소 개발자가 검토 후 merge 를 결정했다면,

	1) Merge pull request

	고로 결론을 종합해보면,

	원본 저장소 주인에게 그 소스를 내려받고 수정한 사람이 원본 브랜치에 검토 후 반영(merge)해 달라고 요청하는 것 같다..(ㅋㅋ)

--------------------------------------- 깃 허브 README.md 마크다운 문법
1. 제목
	
	제목 블록을 지정하려면 # 후 한칸 띄움.
	ex)
	
		# 제목 크기1
		## 제목 크기2

2. -- 표시
	
	문장 후 바로 아래에 -- 또는 ** 등의 표시를 하면 그 문장의 강조 표시가 된다.
	ex)
		문장 
		--
	
	문장 후 한칸 띄우고 -- 또는 ** 등의 표시를 하면 한칸 가로 줄이 생긴다.
	ex)
		문장

		--	
	
3. 목록
	
	번호. 내용 : 번호. 후 한칸 띄움. 순서 있는 목록.
	한칸 안 띄우면 가로로 나열 됨.
	ex)
		1. 목록 
		2. 목록
			
	
	- , + , * 내용 : - 후 한칸 띄움. 순서 없는 목록 
	ex)

		- 목록
		- 목록

4. 텍스트 강조
	
	**, __ : 이 표시로 단어를 감싸면 강조 표시가 된다.
	ex)

		**강조**
		__강조__

5. 인용문 표시
	
	> , >> 내용 : 인용문 표시, > 갯수별로 들여쓰기 됨.
	ex)
		> 인용문
		>> 인용문

6. 소스코드 표시

	`소스코드`: 소스코드를 표시한다.
	ex)
		소스코드 `printf('hello world);` 입니다.


7. 링크표시

	텍스트 링크를 표시한다.
	ex)
	<http://www.daum.net>
		=> http://www.daum.net 
		(링크된 주소가 나온다)
	[다음](http://www.daum.net)
		=> 다음
		(url로 링크된 '다음' 링크가 생긴다)
	[다음](http://www.daum.net, "검색")
		=> 다음
		(url로 링크된 '다음' 링크가 생긴다.링크에 마우스 오버하면, '검색'이라는 말풍선이 뜬다.
		"검색" <- 이렇게 쌍따옴표를 써야한다. 홑따옴표(x) )

8. 이미지
	![대체텍스트](이미지url)
	ex)	
		![푸른하늘](http://www.daum.net/bluesky.png)

	깃 저장소 이미지 이용하기
	images 디력토리를 업로드 한 후 (그 디렉토리 안에 bluesky.png 가 있다)
	ex)
		![푸른하늘](./images/bluesky.png)
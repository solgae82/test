## 일하면서 직접 테스트 하며 틈틈히 정리한 것이다.

 start~!

 선언해야 xml 파싱이 되는가 보다
 <html xmlns:th="http://www.thymeleaf.org">

 0. th:text
	
	기본 문자열 출력
	'홑따옴표 와 | 문자 표현법이 있다.
	<> 태그 문자등은 html 엔티티로 변화되어 출력된다.
	
	-----------
	?test=구름

	코드:<span th:text="'하늘'">데이터</span>
	출력:<span>하늘</span>

	코드:<span th:text="|하늘|">데이터</span>
	출력:<span>하늘</span>

	코드:<span th:text="'하늘 ' + ${param.test}">데이터</span>
	출력:<span>하늘 구름</span>

	코드:<span th:text="|하늘 ${param.test}|">데이터</span>
	출력:<span>하늘 구름</span>

	코드:<span th:text="|<b>하늘</b>|">데이터</span>
	출력:<span>&lt;b&gt;하늘&lt;/b&gt;</span>
	-----------

1. th:utext
	
	문자열출력
	th:text 와 비교해서 , html 엔티티 변환없이 출력되는 점만 다르고 모두 같다
	
	-----------
	코드:<span th:utext="'<b>하늘</b>'">데이터</span>
	출력:<span><b>하늘</b></span>
	-----------

2. #{}
	
	프로퍼티파일 설정내용 출력

	-----------
	/WEB-INF/temp/home.properties 파일안
		home.welcome=Hello!
		home.alert={0}을(를) 넣어주세요

	코드:<p th:text="#{home.welcom}">데이터</p>
	출력:<p>Hello!</p>

	코드:<p th:text="#{home.alert('이름')}">데이터</p>
	출력:<p>이름을(를) 넣어주세요</p>
	-----------

3. ${} , ${#준비된객체,유틸리티등}
	
	객체, 변수, 파라미터등 표현식
	${x}, ${param.x} , ${session.x} , ${application.x} 등
	코드로 이해해보자.

	-----------
	User user = new User();
	user.setName("홍씨");

	HashMap<String,User> map = new HashMap<string,User>();
	map.put("father"user);

	model.addAttribute("person" , map);
	
	(..)

	다양한 출력법

	${person.father.name}		#홍씨
	${person['father'].name}	#홍씨
	${person['father']['name']}	#홍씨
	${person['father'].getName()}	#홍씨
	
	-----------
	url: ?test=abc

	코드:<span th:text="${param.test}">테스트</span>
	출력:<span>abc</span>

	코드:<span th:text="${#request.getParameter('test')}">테스트</span>
	출력:<span>abc</span>

	-----------

	미리 준비된 객체들이 많다
	thymeleaf 문서 부록에 잘 정리되어 있으니 찾아서 활용하면 된다.

	기본 객체들..
		#ctx: 문맥 객체.
		#vars: 문맥 변수.
		#locale: 컨텍스트 로케일.
		#request: (웹 컨텍스트에서만) HttpServletRequest객체.
		#response: (웹 컨텍스트에서만) HttpServletResponse객체.
		#session: (웹 컨텍스트에서만) HttpSession객체.
		#servletContext: (웹 컨텍스트에서만) ServletContext객체.

	유틸리티객체들..
		#execInfo: 처리중인 템플릿에 대한 정보입니다.
		#messages: # {…} 구문을 사용하여 얻을 수있는 것과 같은 방식으로 변수 표현식 내에 외부화 된 메시지를 가져 오는 방법.
		#uris: URL / URI의 일부를 이스케이프 처리하는 방법
		#conversions: 구성된 변환 서비스 를 실행하는 방법 (있는 경우).
		#dates: java.util.Date객체의 메소드 : 형식화, 구성 요소 추출 등
		#calendars:와 유사 #dates하지만 java.util.Calendar객체 와 유사 합니다.
		#numbers: 숫자 객체의 서식을 지정하는 메소드입니다.
		#strings: String객체의 메소드 : contains, startsWith, prepending / appending 등
		#objects: 일반적인 객체 방법.
		#bools: 부울 평가 방법.
		#arrays: 배열을위한 메소드.
		#lists:리스트의 메소드.
		#sets: 세트의 메소드.
		#maps:지도의 메소드.
		#aggregates: 배열 또는 컬렉션에서 집계를 만드는 방법.
		#ids: 반복 될 수있는 id 속성을 처리하는 메소드 (예 : 반복의 결과)

	이외에도 더 있으니 공식문서 부록을 참조하자

4. *{}

	별칭 단축 표현식
	코드로 이해하자

	-----------
	User user = new User();
	user.setName("kkk");
	model.addAttribute("user", user);

	코드:
		<div th:object="${user}">
			<span th:text="*{name}">이름</span>
		</div>
		<span th:text="*{name}">이름</span>
	출력:
		<div>
			<span>kkk</span>
		</div>
		<span></span>
	-----------
	위 예제와 같이 html 블록 안에서만 *별칭을 사용할 수 있음을 알 수 있다.

5. @{}
	
	URL 링크 표현식
	th:href , th:src , th:action 등에 쓴다.
	
	컨텍스트를 기준으로 자동으로 출력이 변하니, 이걸 사용해서 모든 링크 및 url 주소등을 
	쓰는 것이 바람직 할 것이다.
	-----------
	#현재 컨텍스트가 'test'라고 가정

	#절대주소 링크
		code:<a href="login.jsp" th:href="@{http://sol.com/login}">로그인</a>
		출력:<a href="http://sol.com/login">로그인</a>

	#상대주소 링크
		코드:<a href="login.jsp" th:href="@{orther/view}">다른보기</a>
		출력:<a href="orther/view">다른보기</a>

	#현재 컨텍스트 자동으로 붙여주기 (/로 시작하면, 자동으로 현재 컨텍스트 '/test'가 붙는다) 
		코드:<a href="login.jsp" th:href="@{/orther/view}">다른보기</a>
		출력:<a href="/test/orther/view">다른보기</a>

	#다른 컨텍스트 붙여주기 ('~/컨텍스트명/링크주소 ) 
		코드:<a href="login.jsp" th:href="@{~/test2/orther/view}">다른보기</a>
		출력:<a href="/test2/orther/view">다른보기</a>
	
	#쿼리스트링 사용
		코드:<a href="login.jsp" th:href="@{/orther/view(id=3 , ok=27)}">다른보기</a>
		출력:<a href="/orther/view?id=3&amp;ok=27">다른보기</a>

	#변수url사용 ({파라미터명} 마지막 (파라미터명=값)이면 {파라미터명}이 '값'으로 대체)
		코드:<a href="login.jsp" th:href="@{/orther/{id}/view(id=3)}">다른보기</a>
		출력:<a href="/orther/3/view">다른보기</a>

	-----------
	
6. 리터럴
	텍스트
		코드:<span th:text="'안녕'">text</span>
		출력:<span>안녕</span>
	숫자
		코드:<span th:text="2013 + 2">숫자</span>
		출력:<span>2015</span>
	
		코드:<span th:text="2013 + '2'">숫자</span>
		출력:<span>20132</span>

	부울
		코드:<span th:if="${true} == true">부울</span>
		출력:<span>부울</span>

		코드:<span th:if="${true == true}">부울</span>
		출력:<span>부울</span>
	
		코드:<span th:if="${true == false}">부울</span>
		출력:출력안함

		###
		${true} == true : Thymeleaf 엔진이 처리함.
		${true == true} : SpringEL 엔진이 처리함.
		###

	null
		User user = new User();
		user.setName("kim");
		model.setAttribute("user",user);

		코드:<span th:if="${user.name != null}">있다</span>
		출력:<span>있다</span>

		코드:<span th:if="${user.name == null}">있다</span>
		출력:출력안함

7. _ (언더바 1개)

	무작동 도큰
	_가 설정된 값은 기본 태그출력을 의미한다.

	-----------
	model.setAttribute("name",null);

	코드:<span th:text="${name}?:''">기본값</span>
	출력:<span></span>

	코드:<span th:text="${name}?:_">기본값</span>
	출력:<span>기본값</span>
	-----------

8. ${{}}

	데이터 변환
	예를 들어 java.util.Calendar => String  으로 변환
	캘린더 형을 문자열 출력하듯이 하면 에러를 뿜을 것이다...
	그럴땐 ${{..}} 이중 중괄호 출력을 ...
	-----------
	model.setAttribut("today", today); // today 는 java.util.Calendar

	코드:<span th:text="${{today}}">날짜</span>
	출력:<span>2019-09-30 12:00:00</span>
	-----------

9. [[${}]]

	html 데이터 영역에 출력할때 쓴다.
	th:text  로 출력이 아닌 태그안에 옛날 스타일로 출력하길 원할때..

		-----------
		model.setAttribute("name","이순신");

		코드:<span>[[${name}]]</span>	
		출력:<span>이순신</span>	
		-----------
	
	스크립트로 선언된 곳에서는 여러 형태로 출력된다.
	

	
		-----------
		model.addAttribute("ex","22");
		
		코드: 
			<script th:inline="javascript">
				var ex = [[${ex}]];
			</script>
		출력:
			<script>
				var ex = "22";
			</script>
		-----------
		url: ?ex=1
		
		코드: 
			<script th:inline="javascript">
				var ex = [[${param.ex}]];
			</script>
		출력:
			<script>
				var ex = ["22"]; //파라미터는 배열로 표현한다.
			</script>

		만약 없는 파라미터를 접근하면?

		코드: 
			<script th:inline="javascript">
				var ex = [[${param.page}]];
			</script>
		출력:
			ex = 에러 출력....페이지 개판됨.

		-----------
		http 파라미터는 이상과 같이 자바스크립트 배열로 처리되므로,
		항상 이렇게 접근하자..

		url: ?ex=1&ex=2
		
		코드: 
			<script th:inline="javascript">
				var ex  = [[${param.ex[0]}]];
				var ex0 = [[${param.ex[0]}]];
				var ex1 = [[${param.ex[1]}]];
			</script>
		출력:
			<script>
				var ex = ["1","2"]; //파라미터는 배열로 표현한다.쌍따옴표로 데이터를 감싸준다.
				var ex0 = "1";
				var ex1 = "2";
			</script>

		-----------
		다음과 같이 모두 체크해서 안전하게 출력하는 방법도 있다.

		url: ?ex=1

		코드: 
			<script th:inline="javascript">
				var ex =  [[${param.ex != null ? param.ex[0]: null }]];
				var page = [[${param.page != null ? param.page[0]: null }]];
			</script>
		출력:
			<script>
				var ex = "1"; 
				var page = null;				
			</script>
		-----------
		
10. [(${})]

	<script th:inline="javascript"> 선언된 태그내에서 
	자바스크립트 배열이 아닌, 기본 출력처럼 출력을 하고 싶을 때 쓴다.

	배열이고 나발이고 필요없고, 전통적인 출력형식으로 찍고 싶을때 사용한다.

	-----------
	url : ?data=1

	<script th:inline="javascript">
		var page = [(${param.page})]; //  #없는 파라미터 접근 error
		var data = '[(${param.data})]'; // var data='1'; # ok
		var data = '[(${param.data[0]})]'; //배열로 접근 못함 error
	</script>
	-----------
	url : ?data=a1&data=b2
	<script th:inline="javascript">
		var page = [(${param.page})]; //  #ERROR
		var data = [(${param.data})]; // var data=[a1,b2];, 쌍따옴표로 감싸주지 않는다. 
		var data = '[(${param.data[0]})]'; //배열로 접근못함 error
	</script>
	-----------
	조건문등도 안 먹힌다..걍 데이터 출력만 가능한 표현식 같다

	var page = '[(${param.page != null? param.page:''})]'; <=왠지 될 것같지만 에러다

	출력만 걍 한다..있는 그대로..

11. __${}__ (언더바 2개)

	전처리기
	로직 실행전 미리 처리되는 코드

	model.addAttribute("name","이순신");
	model.addAttribute("pre","${name !=null}?name:'이름없음'");

	코드:<span th:text="__${pre}__">이름</span>
	파싱:<span th:text="${name !=null}?name:'이름없음'">이름</span>
	출력:<span>이순신</span>

12. th:with

	블록내 임시 변수설정
	블록태그 벗어나면 사용 못함.

	-----------
	코드:
		<div th:with="ks='하이'">
			<span th:text="${ks}">인사</span>
		</div>
		<span th:text="${ks != null?'있음':'없음'}">인사</span>
	출력:
		<div>
			<span>하이</span>
		</div>
		<span>없음</span>
	-----------

13. th:block

	프로그래밍 블록
	블록내 이중 조건문, 변수설정등을 할 수 있다.
	jstl 블록 비슷하게 생각하면 될 듯하다.

	-----------
	코드:
		<th:block>
			<p>하이</p>
		</th:block>
	출력: 
			<p>하이</p>
	-----------

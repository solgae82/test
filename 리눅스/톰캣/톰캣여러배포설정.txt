톰캣 8.0에서 실험

테스트 하며 알아낸 결과,
여러 배포형식과, 가장 중요한 document root 등의 설정이 어떻게 돌아가는지 짐작하게 되었다

기본지식 몇가지 습득하고 테스트 해보자

배포형식(3가지)
	1. 옛날 방식 특정 디렉토리에 소스를 올리고, 이 위치를 document root로 설정하는 방법
	2. 특정 디렉토리에 war 파일을 올려놓고 톰캣 기동으로 자동 압축해제 시켜 배포하는 방법
	3. 톰캣에서 지원하는 웹프로그램에서 배포하는 방법.

배포시 필요한 설정 파일들 과 속성들
	톰캣홈/conf/server.xml 

	3가지 속성의 조합으로 컨텍스트가 변화무쌍하게 설정된다
	
	1.Host 태그 appBase="/home/web" (줄여서 appBase 부르겠다)
		
		.war 파일 압축해제 위치 지정 
		이 속성의 디렉토리에   /home/web 에 ex01.war 를 올려놓고 톰캣 기동하면 ,
		ex01 디렉토리가 생기며 압축해제 되게 된다
		
	2.Context 태그의 docBase="ex01" (줄여서 docBase라고 부르겠다)

		원래는 컨텍스트 이름이었던 거 같은데, 실제 /home/web/ex01 로 압축해제 될 것이므로, 그 이름과 같아야 한다 
	
	3.Context 태그의 path="/ex" (줄여서 path 부르겠다)
		
		이 녀석의 의미는 실제 브라우저 url 접근시 /ex 로 접근하라는 것인줄 알았더니, 
		실제로는 쓰이지 않거나 /ex 접근이 가능하다면 /home/web/ex 로 배포 되었을때 가능.
		예를 들어 <Context path="/ex" docBase="ex01" reloadable="true" /> 하고 .war를 톰캣기동 압축해제를 하니,
		ex,ex01,ROOT 가 생김(같은 웹앱인데 3개가 생김)

		
appBase 의 모든 디렉토리는 컨텍스트 대상이다
appBase 위치에 app 디렉토리가 있고 그 안에 웹앱 소스가 배포되었다면, 
app 컨텍스트가 배치되고 '/app'로 접근 가능하다

appBase + docBase 가 논리적으로 맞아야 설정이 되는 듯 하다.
appBase="/home/web" docBase="ex01" 이라면 
/home/web/ex01 에 웹앱이 배포되어야 설정이 맞는 형식인 거같다

톰캣에만  특별한 예약어 디렉토리인 ROOT 디렉토리가 있는데 대문자로 ROOT 디렉토리에 배포하면 
ROOT 컨텍스트가 되고, 이 녀석만 특별하게 브라우저 접속시 '/'으로 접속 가능하다.
'/' 로 만들고 싶은 욕구가 있으니 여러 잔꾀가 나온다.

기타
<Context path=""> 와 <Context path="/"> 동일하고, "" 가 공식 설정법이다

-----------.war로 배포시

	1. /home/web 에 ex01.war 업로드 배포 후 톰캣 기동

		기본적으로 ex01.war 를 톰캣이 인식하는 appBase="/home/web" 에 업로드하고(여기 아니면 압축해제 안함),
		톰캣 재기동 하면, 
		war파일명인 ex01 디렉토리가 생기고 거기에 ex01.war 압축내용이 해제되게 된다.

	---------------------
	vi 톰캣홈/conf/server.xml
	
	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">

		<Context path="" docBase="" reloadable="true" />
		:톰캣 재기동하면 ex01 디렉토리만 생김 , /ex01 컨텍스트로 접근 가능.

		<Context path="/ex" docBase="." reloadable="true" />
		또는
		<Context path="/ex" docBase="" reloadable="true" />
		:톰캣 재기동하면 ex01 디렉토리 생김 , /ex01 컨텍스트로 접근 , /ex 접근 불가(path="/ex" 무시)

		<Context path="" docBase="ex01" reloadable="true" /> 
		:톰캣 재기동하면 ex01,ROOT 디렉토리가 생겨서 배포된다. 2개의 컨텍스트가 있는 셈.
		:/ex01, / 컨텍스트로 접근 가능.
		
		<Context path="/ex" docBase="ex01" reloadable="true" />
		:톰캣 재기동하면 ex01, ROOT, ex  디렉토리 생성. 3개의 컨텍스트가 있는 셈.
		: /ex01, / , /ex 가 생김
	
		<Context path="" docBase="ex04" reloadable="true" />
		: 톰캣 기동 에러 , 디렉토리도 생기지 않는다./home/web/ex04 이 없을테고 ex01.war
	</Host>

	2. /home/web 에  ROOT.war 업로드 배포시 
	ROOT 디렉토리는 예약된 디렉토리이다 '/' 로 접근 가능.
	---------------------
	vi 톰캣홈/conf/server.xml

	<Host name="localhost"  appBase="/home/web"
            unpackWARs="true" autoDeploy="true">

		<Context path="" docBase="ROOT" reloadable="true" />
		<!--context  태그 자체가 없어도 기본 이렇게 설정된 형식으로 배포되더라 -->
		:was 재기동하면 ROOT 디렉토리에 배포되고 이 ROOT 컨텍스트는 기본적으로 '/'로 예약되어 있다.

		
	이렇게 하면 context를 사용하지 않은 / 로 바로 접근 가능해진다..


--------- 옛날 방식으로 특정 디렉토리에 수동 배치시..

/home/web/ex01 디렉토리에 웹앱 배포 후 기동 가정한다
Context > crossContext="true" 속성이 특별한 역활을 한다.(꼭 넣어야 한다는, '/' 변경을 위해)

	1. 톰캣홈/conf/server.xml에 모두 몰아 넣는 방법(비추천).	

		방법1. 
			Host > appBase에 절대경로를 넣고, Context > docBase ="."  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase="/home/web/ex01"
				    unpackWARs="true" autoDeploy="true">

				   <Context path="" 
					docBase="." 
					reloadable="true" 
					debug="0" 
					crossContext="true"
					privileged="true" />

			:was 재기동하면 컨텍스트 없이 /로 바로 접근
		방법2. 
			Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase=""
				    unpackWARs="true" autoDeploy="true">

				   <Context path="" 
					docBase="/home/web/ex01" 
					reloadable="true" 
					debug="0" 
					crossContext="true"
					privileged="true" />

			 :was 재기동하면 컨텍스트 없이 /로 바로 접근

			 
	2. 톰캣홈/conf/Catalina/localhost/ROOT.xml 에 컨텍스트 지정을 분리할 경우

		방법 1. 
			Host > appBase에 절대경로를 넣고, Context > docBase ="."  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase="/home/web/ex01" 
				    unpackWARs="true" autoDeploy="true">

			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
			(이 ROOT.xml , '/'로 접근 가능한 컨텍스트임을 뜻하는 예약어, 
			파일명.xml의 파일명은 컨텍스트명을 뜻함 , man.xml -> /man )

			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="" 
						docBase="." 
						reloadable="true" 
						debug="0" 
						crossContext="true"
						privileged="true">

			</Context>

			:was 재기동하면 컨텍스트 없이 /로 바로 접근

		방법 2.
			Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase=""
				    unpackWARs="true" autoDeploy="true">

			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
			(이 ROOT.xml , '/'로 접근 가능한 컨텍스트임을 뜻하는 예약어, 
			파일명.xml의 파일명은 컨텍스트명을 뜻함 , man.xml -> /man )

			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="" 
						docBase="/home/web/ex01" 
						reloadable="true" 
						debug="0" 
						crossContext="true"
						privileged="true">

			</Context>

			:was 재기동하면 컨텍스트 없이 /로 바로 접근

-----------내가 원하는 컨텍스트명(ROOT가 아닌)으로 war 배포도 되고 '/' 자동 설정이 한번에 되게 하려면?

ROOT 디렉토리로 배포시키는 ROOT.war 방법이 가장 속편한 거 같다. 
배포와 동시에 '/' 설정도 손댈 필요 없으니..

내가 못 찾은 것인지는 모르지만,
죽어도 ROOT디렉토리가 아닌 앱명 예를 들어 ex01.war를 업로드 해서 톰캣 기동 후 '/'설정도 되길 원한다면, 
일단 war 업로드 톰캣기동으로 배포 후 , 톰캣 중지하고 ,  수동배치 설정을 바꾸고, 다시 톰캣 재기동 해야 하드라..
(위에 war 배포와  특정 디렉토리 수동 배치를 혼합하는 방법)

이해하게 편하게 server.xml에 모든 설정을 다 때려 넣는 방법으로 해보자..

	/home/web 에 ex01.war 업로드

	server.xml 열고
		※ Context  > crossContext="true" 꼭 넣어라

		<Host name="localhost"  appBase="/home/web"
			    unpackWARs="true" autoDeploy="true">
			<!-- path="" 가 정석임. "/"로 하면 ""으로 인식 -->
			<Context path="/" docBase="." reloadable="true" crossContext="true" />
		</Host>

	톰캣 올려서 배포 시키고
		./startup.sh

	브라우저 /ex01 로 접근 가능 확인.(현재는  /ex01 컨텍스트로만 접근 가능, '/'접근 불가)


	톰캣 내리고 
		./shutdown.sh

	ex01.war 파일 삭제하고, (톰캣 내리고 삭제해야지 기동 중 삭제하면 배포 디렉토리도 동시에 삭제된다)
		

	수동 배치 설정 다시 server.xml 열고 	'/' 로 인식하게 설정을 바꿔준다

		※ Context > crossContext="true" 가 중요하다

		방법 1 : Host > appBase에 절대경로를 넣고, Context > docBase ="."  를 넣는 방법
		------------------------
		<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">
				
			<!-- path="" 가 정석임. "/"로 하면 ""으로 인식 -->
			<Context path="/" docBase="." reloadable="true"  crossContext="true" />

		</Host>

		방법 2 : Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
		(이게 논리적으로 맞는 듯)
		------------------------
		<Host name="localhost"  appBase=""  unpackWARs="true" autoDeploy="true">
			<!-- path="" 가 정석임. "/"로 하면 ""으로 인식 -->
			<Context path="/" docBase="/home/web/ex01" reloadable="true"  crossContext="true" />
		</Host>

	다시 톰캣 재기동

	브라우저로 '/' 로 접속 되는 지 확인.


----------- context.xml을 웹애플리케이션에 포함해서 배포하기

위에서 톰캣홈/conf/Catalina/localhost/ROOT.xml 을 만들어서 설정 하던 방식을 
아예 웹애플리케이션에 .xml을 넣어서 배포하게끔 향상된 방식이다
공식 문서에서는 이 방법을 추천.

웹앱 MEAT-INF 디렉토리에 context.xml(꼭 이 이름으로 해야함,약속된 이름)에 
톰캣 context 설정값을 넣어서 배포하는 방식

이클립스 프로젝트로 한다면
웹 자원이 있는 root 디렉토리에 META-INF 디렉토리를 만든다(이 곳은 메이븐이 빌드시 만들어 주는 디렉토리 이기도 하다)
그 안에 설정된 context.xml을 넣고 .war를 만든다
그럼 구조가 대충 이렇게 될 것이다
.war 
	-웹자원들 및 디렉토리
	-MEAT-INF 디렉토리(context.xml 이 있음)
	-WEB-INF 디렉토리

자세한 설정 방식은..
테스트로...

	먼저, 톰캣홈/conf/server.xml은  HOST 이렇게 되어 있다
		
		<Host name="localhost"  appBase="/home/web"
		unpackWARs="true" autoDeploy="true">

	/home/web 에 .war 파일을 배포하게끔 되어 있다.

	1. 웹앱 root에 /META-INF 디렉토리 만들고 context.xml을 만든다
		: copyXML="true" 속성을 꼭 넣어줘야 이 파일을  톰캣 설정 디렉토리로 복사해준다
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Context path="" 
			docBase="." 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
			>

		</Context>

	2. 웹앱을 ROOT.war 를 만든다('/'로 배포하기 위해서 ROOT로 이름 지었다)

	3. /home/web 에 ROOT.war 업로드

	4. 톰캣 기동 자동 배포됨(ROOT 디렉토리가 생김)
		/home/web/ROOT


	5. META-INF/context.xml 을 복사해서 톰캣홈/conf/Catalina/localhost/에 ROOT.xml 이름으로 바뀌어서 복사됨
		
		/conf/Catalina/localhost/ROOT.xml  #복사된 context.xml

		:수동으로 만들던 그 방식과 같다

	6. 배치 완료

	7. 브라우저에서 '/' 으로 접속 테스트

--------- etc
테스트 해보니 
context.xml 로 분리해서 하는 방식은

톰캣홈/conf/server.xml > Host appBase="/home/web" 으로 되었을 경우

	1.예제
		ex.01.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<Context path="/ex" 
			docBase="ex01" 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
			>

		</Context>
		: ex.01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 디렉토리를 검색하니 있음.
		ex01 컨텍스트를 배치하고 예약어가 아니므로 브라우저에서 /ex01 로 접속 가능하다.
		path="/ex" 는 개무시된다.

	2.예제
		ex01 디렉토리를 ex02로 변경하고 docBase="ex02" 변경

		ex01.xml
		<?xml version="1.0" encoding="UTF-8"?>
		<Context path="/ex" 
			docBase="ex02" 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
			>

		</Context>
		: ex01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 웹 디렉토리를 검색해보니 없음. 그래서 기동시 1차 에러 뿜는다.
		ex01 컨텍스트를 배치를 하긴 하지만, 디렉토리가 없다. 브라우저에서 /ex01 해봐야 404 에러를 뿜을 뿐..
		내부적으로 docBase="ex02"를 다시 한번 돌려서 /home/web/ex02 를 검색해 보니 있다.
		그럼 컨텍스트는 ex02가 되고 톰캣 기동을 완료한다.
		예약어가 아니므로 브라우저에서 /ex02 로 접속 가능하다
		path="/ex" 는 개무시된다.



톰캣홈/conf/server.xml > Host appBase="" 으로 비우고(war 배포가 안 되게 하고) 
수동으로 context를 설정하면 어떻게 될까

	1.예제
		ROOT.xml
		<Context path="/ex" 
			docBase="/home/web/ex01" 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
			>

		</Context>

		: /home/web/ex01 의 디렉토리가 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
		이 컨텍스트 이름은 ROOT(.xml파일명) 가 되며, ROOT 컨텍스트는 '/'로 접근 가능하다.

	2.예제
		ex01.xml
		<Context path="/ex" 
			docBase="/home/web/ex01" 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
					>

		</Context>

		: /home/web/ex01 의 디렉토리가 웹 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
		이 컨텍스트 이름은 ex01(.xml파일명) 가 되며, '/ex01'로 접근 가능하다.

	3.예제
		ex01.xml
		<Context path="/ex" 
			docBase="/home/web/ex02" #디렉토리를 변경했다
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true"
					>

		</Context>

		: /home/web/ex02 의 디렉토리가 웹 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
		이 컨텍스트 이름은 ex01(.xml파일명) 가 되며, '/ex01'로 접근 가능하다.
톰캣 8.5.51 에서 실험

백번넘게 테스트 후 알아낸 결과(미쳤지...),
여러 배포형식과, 가장 중요한 document root 등의 설정이 어떻게 돌아가는지 짐작하게 되었다
논리적으로 이해 안가는 부분이 너무 많다..
잘 되는 부분만 사용하고 말자... 머리가 너무 아프다

일단, 
기본지식 몇가지 습득하고 테스트 해보자

배포형식(3가지)

	1. 옛날 방식 특정 디렉토리에 소스를 올리고, 이 위치를 document root로 설정하는 방법
	2. 설정된 특정 디렉토리에 war 파일을 올려놓고 톰캣 기동으로 자동 압축해제 시켜 배포하는 방법
	3. 톰캣에서 지원하는 웹프로그램에서 배포하는 방법.

	배포형식 3가지 중에 1,2번만 살펴 본다

배포시 필요한 설정 파일들 과 속성들
	
	톰캣홈/conf/server.xml 
	톰캣홈/conf/Catalina/localhost/컨텍스트명.xml (컨텍스트 분리시 필요한 설정파일)
		

이 설정 파일의 3가지 속성의 조합으로 컨텍스트가 변화무쌍하게 설정된다
	
	1.Host 태그 appBase="/home/web"
		
		.war 파일 압축해제 위치 지정 및 애플리케이션 홈
		
	2.Context 태그의 docBase="ex01"

		원래는 컨텍스트 이름(웹앱디렉토리) 이었던 거 같은데.. 2단계 디렉토리명도 가능하다고 함.
	
	3.Context 태그의 path="/ex"
		
		이 녀석의 의미는 실제 브라우저 url 접근시 /ex 로 접근하라는 것인줄 알았더니, 
		실제로는 쓰이지 않거나 /ex 접근이 가능하다면 /home/web/ex 로 배포 되었을때 가능.
		예를 들어 <Context path="/ex" docBase="ex01" reloadable="true" /> 하고 .war를 톰캣기동 압축해제를 하니,
		ex,ex01 가 생김(같은 웹앱인데 2개가 생김)


<Host appBase="경로"> 경로가 절대경로가 아니라면 톰캣홈에서 시작한다 
	<Host appBase="webapps"> => 톰캣홈/webapps

<Host appBase="경로"> 경로는 웹애플리케이션이 시작되는 경로이다 

<Host appBase="경로"> 경로에 ex01.war 파일이 있다면 
톰캣 기동시 압축해제하고 ex01 디렉토리가 생기고 ex01 컨텍스트 등록한다.

<Host appBase="경로"> 설정된 경로의 모든 디렉토리는 컨텍스트 대상이다
<Host appBase="경로"> 설정된 경로에 app 디렉토리가 있고 그 안에 웹앱 소스가 배포되었다면, 
app 컨텍스트가 배치되고 '/app'로 접근 가능하다

<Host appBase="경로"> + <Context docBase="디렉토리명또는경로"> 가 논리적으로 맞아야 설정이 되는 듯 하다.
appBase="/home/web" docBase="ex01" 이라면 
/home/web/ex01 에 웹앱이 배포되어야 설정이 맞아 떨어지는 형식인 거같다

톰캣에서 쓰이는 특별한 예약어 ROOT 디렉토리가 있는데 ,
ROOT 디렉토리에 배포하면 
ROOT 컨텍스트가 되고, 이 녀석만 특별하게 브라우저 접속시 '/'으로 접속 가능하다.
'/' 로 만들고 싶은 욕구가 있으니 여러 설정 잔꾀가 나온다.

기타
<Host appBase="" /> 이렇게 하면 대참사 벌어진다(절대 하지 말아야) 
왜냐면, [톰캣홈]의 모든 디렉토리와 파일들을 서비스하는 일이 벌어진다..ㅋㅋ

<Context path=""> 와 <Context path="/"> 동일하고, 
경로 '/' 표현은 ""로 해야하고, 
컨텍스트명으로 설정시 '/ex01' 처럼 해야한다

-----------.war로 배포시
	
	배포 순서
		1. ex01.war 생성
		2. /home/web 에 업로드
		3. server.xml 등 설정파일 설정
		4. 톰캣 기동
		5. /home/web 에 war파일명인 ex01 웹 디렉토리 배포 확인
		
		※ 톰캣 기동 중 ex01.war 파일을 삭제하면, 배포된 ex01도 같이 삭제된다. 톰캣 끄고 삭제해야 한다
		(이것 때문에 헷갈려서 한참 헤멨음)

	예제로 ex01.war를 톰캣 <Host appBase="/home/web"> 에 설정된 /home/web에 업로드하고
	(이 속성에 설정된 경로 아니면 압축해제 안함),
	톰캣 재기동 하면, 
	war파일명인 ex01 디렉토리가 생기고 그 안에 ex01.war 압축내용을 해제하게 된다.

	원리를 알았으니, 
	테스트 해보자

	(톰캣홈/conf/server.xml 에 모두 설정하는 방법으로)
	/home/web 에 ex01.war 업로드 후 톰캣 기동 배포 테스트

	설정0.
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		<Context/> 설정 없을때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<!--Context 없다 -->
		</Host>

		톰캣 기동 후 로그 :

			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [554] 밀리초에 완료되었습니다.

		확인 : 
			/home/web에 생성된 디렉토리 : ex01

			url매핑 : 
				'/' => 404 not found
				/ex01  => /home/web/ex01 매핑.

		개인주석 : 
			appBase 경로에 .war가 있으면 압축해제하고 컨텍스트 배치하는 거같다
	설정1. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		 appBase="/home/web" path="" docBase="" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [57] 밀리초에 완료되었습니다.

		확인 : 
			/home/web에 생성된 디렉토리 : ex01

			url매핑 : 
				'/' => /home/web 매핑 .
				/ex01  => /home/web/ex01 매핑.

		개인주석 : 
			설정된 Context 태그는 ex01 컨텍스트 설정 구문이 아닌 듯.
			docBase="" 은 현재 설정된 appBase 경로인 /home/web 가 되고,
			path="" 은  '/'를 뜻하고 이 경로에 연결하라는 뜻이니,
			'/' 컨텍스트가 => /home/web 매핑 되는 것같다.

				
	설정2. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		appBase="/home/web" path="/ex" docBase="" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [59] 밀리초에 완료되었습니다.

		확인 :			
			/home/web에 생성된 디렉토리 : ex01

			url매핑 : 
				'/' => 404 not found
				/ex => /home/web/ 매핑.(웃기다 뭐여)
				/ex01  => /home/web/ex01 매핑.
		개인주석 : 
			첨엔 의아했는데(시발 욕하고 지랄염병 했음),
			설정된 Context 태그는 ex01 컨텍스트 설정 구문이 아닌 듯.
			docBase="" 은 현재 설정된 appBase 경로인 /home/web 가 되고
			path="/ex" 경로에 연결하는 뜻이니,
			'/ex' 컨텍스트가 => /home/web 매핑 되는 것같다.(어때?)
		
	설정3. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		appBase="/home/web" path="" docBase="ex01" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex01" reloadable="true" /> 
			
		</Host>	
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [49] 밀리초에 완료되었습니다.
		
		확인 : 
			/home/web에 생성된 디렉토리 : ex01,ROOT

			url매핑:
				처음 배포시
					'/'  => /home/web/ROOT 매핑
					/ex01 => /home/web/ex01 매핑
					
				다시 톰캣 재기동하면,
					'/'  => /home/ex01 매핑
					/ex01 => /home/web/ex01 매핑
					
		
		개인주석:
			대체 톰캣은 왜 그럴까?
			진짜 끝도 없이 좆 같다
			또 상상의 나래로 그럴싸한 뇌피셜을 하자면.., 
			압축해제된 ex01 디렉토리가 있고 docBase="ex01" 매치가 되면, 
			음 이 디렉토리가 이 Context 설정과 매핑이군 하고 그 다음 path 값을 보니 '/'이네? 
			(path="" ='/') 그럼 걍 '/'로 연결해주지.... 않고, 톰캣은 
			'야 컨텍스트 이름하고 똑같하던가 아니면 path 명과 똑같은 디렉토리 하나 더 복사할테니 다시 결정해라' 하고
			'/' 이니까 ROOT 디렉토리에 하나 더 만들어 놓는 것은 아닐까?
			
			아래 계속 테스트에서 나오겠지만,
			path="ex01" docBase="ex01" 이면 ex01 디렉토리 하나만 만들고,
			path="ex" docBase="ex01" 이면 ex, ex01 2개 디렉토리를 만들더라...

			처음 배포시 연결과 그 뒤 다시 기동시 연결값은 왜 다른 거야?..
			처음엔 2개 디렉토리에 각각 연결해놓고... 골라~ 골라~~ 하다가 
			결정 안하면 디폴트로 원래 ex01 디렉토리로 연결하는 건가?

			뭔가 이유가 있겠지만...참 시발 열받게 한다. 뭔 설명도 없고..
			
	설정4. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		appBase="/home/web" path="/ex01" docBase="ex01" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex01" docBase="ex01" reloadable="true" /> 
			
		</Host>	
		
		톰캣 기동 후 로그 : 
			#컨텍스트 배치 관련 로그가 없다
		
		확인 : 
			/home/web에 생성된 디렉토리 : ex01

			url매핑:
				'/' => 404 not found
				/ex01 => /home/web/ex01 매핑

		개인주석 : 
			압축해제된 ex01 디렉토리가 있고 docBase="ex01" 매치가 되면, 이녀석이 ex01 컨텍스트 설정이군
			하고, path 값을 보니 path="ex01" 3개가 모두 매치되니.. 그럼 1개만 만들면 되겠군..
			그렇게 생각하니 톰캣 만든 놈아?

	설정5. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		appBase="/home/web" path="/ex" docBase="ex01" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="ex01" reloadable="true" />
		</Host>
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [31] 밀리초에 완료되었습니다.
		
		확인 : 
			/home/web에 생성된 디렉토리 : ex01,ex
		
			url매핑:
				처음 배포시
					'/'  => 404 not found
					/ex01 => /home/web/ex01 매핑
					/ex => /home/web/ex 매핑
					
				다시 톰캣 재기동하면,
					'/'  => 404 not found
					/ex01 => /home/web/ex01 매핑
					/ex => /home/web/ex01 매핑

		주석 : 	
			설정3 에서 뇌피셜 해석을 했듯이, 딱 그런 식으로 2개를 풀어 놓는다
			처음 기동시와, 그 다음부터 연결 방식 다른 것도 똑같다

	설정6. 
		배포 디렉토리 : /home/web/ex01.war
		-------------------------------------------
		appBase="/home/web" path="" docBase="ex04" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex04" reloadable="true" />
		</Host>
		톰캣 기동 후 로그 : java 에러 잔뜩....

		확인 : 
			디렉토리도 생기지 않는다(압축해제도 안함)
			톰캣 기동 에러  

		주석:
			아마도 유효성 체크를 하나 보다.
			이 설정 조합은 /home/web/ex04 가 되는데,  
			ex01.war 압축해제 했다면 실제 /home/web/ex01 이므로 매칭되는 웹앱디렉토리 없음..
			그래서 기동도 안하나? 
			어떻게 하면 1개이상 컨텍스트 올릴게 있으면 걍 올리더만.....
			테스트를 1개로만 해서 잘 모르겠다...또 어떤 개같은 경우의 수가 있을지..



--------- 옛날 방식으로 특정 디렉토리에 수동 배치시..

	.war 배포 설정과 다를게 없다. (먼저 .war 배포를 읽고 이걸 보면 편하다)
	/home/web/ex01 디렉토리에 웹앱 배포 후 기동하는 것으로 테스트

	설정0.
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		<Context/> 설정 없을때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<!--Context 없다 -->
		</Host>

		톰캣 기동 후 로그 :

			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [398] 밀리초에 완료되었습니다.

		확인 : 
			url매핑 : 
				'/' => 404 not found
				/ex01  => /home/web/ex01 매핑.
	
	설정1. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="" docBase="" 일때
		-------------------------------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="" reloadable="true" />			
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [25] 밀리초에 완료되었습니다.

		확인 : 
			'/' => /home/web 매핑.
			'/ex01' => /home/web/ex01 매핑.

	설정2. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="/ex" docBase="" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [37] 밀리초에 완료되었습니다.


		확인 : 
			'/' => 404 not found.
			'/ex01' => /home/web/ex01 매핑.
			'/ex' => /home/web 매핑.
	설정3. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="" docBase="ex01" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex01" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [38] 밀리초에 완료되었습니다.


		확인 : 
			'/' => /home/web/ex01 매핑.
			'/ex01' => /home/web/ex01 매핑.

	설정4. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="/ex01" docBase="ex01" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex01" docBase="ex01" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [36] 밀리초에 완료되었습니다.

		확인 : 
			'/' => 404 not found
			'/ex01' => /home/web/ex01 매핑.

	설정5. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="/ex" docBase="ex01" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="ex01" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [34] 밀리초에 완료되었습니다.


		확인 : 
			'/' => 404 not found.
			'/ex01' => /home/web/ex01 매핑.
			'/ex' => /home/web/ex01 매핑.

	설정6. 
		배포 디렉토리 : /home/web/ex01
		-------------------------------------------
		appBase="/home/web" path="" docBase="ex04" 일때
		-------------------------------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex04" reloadable="true" />
		</Host>
		
		톰캣 기동 후 로그 : 
			자바 에러 , 톰캣 기동 중지

		확인 : 톰캣 기동 중지

--------- 컨텍스트를 외부 xml로 분리하기

	예전엔 server.xml에 모두 설정했었다는데,
	요즘은, Context  태그를 외부파일로 빼서[컨텍스트명.xml] 설정하게 되어 있다는데, 이것이 공식 설정 이라고 함.
	
	[컨텍스트명.xml] 위치 : 
		톰캣홈/cont/[엔진명]/[hostname]/컨텍스트명.xml 형식으로 정확히 맞춰 줘야 한다
		(이 경로 설명만으로 섹션이 하나 생길 정도니 다른 문서로 참조하길..)

		예) 톰캣홈/conf/Catalina/localhost/ROOT.xml

	[컨텍스트명.xml] 설정의 좋은 점 중 하나가 톰캣 기동 중에 설정해도 반영된다(재기동 안해도 새로운 설정 가능)

	[컨텍스트명.xml] 작성 방법은 아래처럼 두 가지가 있다.

	1. 수동으로 컨텍스트명.xml 만들기(예: ROOT 컨텍스트)
		
		톰캣홈/conf/Catalina/localhost/ROOT.xml #생성
			
			<?xml version="1.0" encoding="UTF-8"?>
				<Context path="" docBase="" reloadable="true"></Context>
			</xml>
		
	2. 웹앱에 포함해서 .war 배포시 톰캣 context 설정 위치에 [컨텍스트명.xml] 자동 복사되게 하기

		[컨텍스트명.xml] : context.xml(이름으로 해야된다,톰캣이 읽기 위해 약속된 이름)
		copyXML="true" : Context 태그 속성에 저 속성값 "true" 꼭 줘야 복사가 됨.

		1. 웹앱/META-INF/context.xml 작성 
			<?xml version="1.0" encoding="UTF-8"?>
				<Context path="" docBase="" reloadable="true" copyXML="true"></Context>
			</xml>
		2. ROOT.war 패키징
		3. 웹애플리케이션 디플로이 디렉토리에 업로드
		4. 톰캣 기동
			톰캣이 기동프로세서가 
				웹앱/META-INF/context.xml을 복사해서
				톰캣홈/conf/Catalina/localhost/ROOT.xml  # .war 파일명이 -> 컨텍스트명이 되고 변경 복사됨.
		5. 설정 적용 후 기동
	(
	!!! 문제점이 있다!!!
	
		파일명=컨텍스명 

	이렇게 설정되면 .xml 파일 내용 속성중에 docBase="" 와 뭔가 충돌이 있지 않나? 있으나 마나 한 것인가?
	)	
	※ etc 예제에서 테스트 예정...

		

--------- 컨텍스트명 없이 '/' 로만 설정하기

	- ROOT 디렉토리 배포 해서 '/'  만들기

		컨텍스트를 ROOT로 하면 된다
		ROOT 디렉토리(컨텍스트)는 예약된 디렉토리이다 '/' 로 접근 가능.
		'/' 컨텍스트로 만들기 위해 이런 방식을 쓴다.
	
	- appBase="절대경로" 지정 후 빈 Context 넣어 '/' 만들기
		ROOT가 아닌 이름의 디렉토리를 '/' 로 만들때 하는 법이다
		<Host name="localhost"  appBase="/home/web/ex01">
			<Context path="" docBase="" reloadable="true" /> 처럼 빈 속성 태그를 꼭 넣어줘야 한다.
		</Host>
	
	1. ROOT.war 배포 후 '/' 설정

		배포디렉토리 : /home/web/ROOT.war

		vi 톰캣홈/conf/server.xml

		<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
			
			<!-- Context가 없거나  -->
			<Context path="" docBase="ROOT" reloadable="true" />
			
			
		</Host>
		
		톰캣 기동 후 로그 :
			Context 없이 기동 했을때 :  
				웹 애플리케이션 아카이브 [/home/web/ROOT.war]을(를) 배치합니다.
				웹 애플리케이션 아카이브 [/home/web/ROOT.war]의 배치가 [601] 밀리초에 완료되었습니다.
			
			docBase="ROOT" 기동 했을때 :
				# 컨텍스트 배포 로그가 없이 그냥 기동된다. 
				# 동작 결과는 Context 없이 기동과 같다
			
		확인 : 
			/home/web에 생성된 디렉토리 : ROOT
			url매핑 :
				'/' => /home/web/ROOT 
				/ROOT => 404 not found
		
	2. ROOT 디렉토리에 수동 배포 후 '/'설정

		1. 톰캣홈/conf/server.xml에 모두 설정
			
			배포디렉토리 : /home/web/ROOT
			
			vi 톰캣홈/conf/server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
				
				<!-- Context가 없거나  -->
				<Context path="" docBase="ROOT" reloadable="true" />
				
			</Host>

			톰캣 기동 후 로그 :
				Context 없이 기동 했을때 :  
					웹 애플리케이션 디렉토리 [/home/web/ROOT]을(를) 배치합니다.
					웹 애플리케이션 디렉토리 [/home/web/ROOT]에 대한 배치가 [470] 밀리초에 완료되었습니다.

				
				docBase="ROOT" 기동 했을때 :
					# 컨텍스트 배포 로그가 없이 그냥 기동된다. 
			확인 : 
				
				url매핑 : 
					'/' => /home/web/ROOT
					/ROOT => 404 not found

		2. 톰캣홈/conf/Catalina/localhost/ROOT.xml 에 설정 
			
			배포디렉토리 : /home/web/ROOT
			
			vi 톰캣홈/conf/server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">					
			</Host>
			
			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
					
				<?xml version="1.0" encoding="UTF-8"?>
				<!-- 
					docBase="ROOT" 가 핵심 
					docBase="" 하면 
						'/' => /home/web/
						/ROOT => /home/web/ROOT 
				-->
				<Context path="" docBase="ROOT" reloadable="true"></Context>

			
			톰캣 기동 후 로그 :
				[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]을(를) 배치합니다.
				경고 [/home/web/ROOT]이(가) 지정되었으나, 이는 무시될 것입니다.
				[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]의 배치가 [28] 밀리초 내에 완료되었습니다
			확인 :
				url매핑 :
					'/' => //home/web/ROOT
					/ROOT => 404 not found



	3. ex01 디렉토리 배포 후   '/' 설정하기
	
		1. 톰캣홈/conf/server.xml에 모두 설정
			
			배포디렉토리 : /home/web/ex01
			
			vi 톰캣홈/conf/server.xml

			<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">
				   <!-- 빈 값이라도 Context를 꼭 넣어 줘야 한다 -->
				   <Context path="" docBase="" reloadable="true" />
					
			</Host>
			톰캣 기동 후 로그 :
				# 컨텍스트 배포 로그가 없이 그냥 기동된다. 
			확인 : 
			
				url매핑 : 
					'/' => /home/web/ROOT
					'/ex01' => 404 not found

			
		2. 톰캣홈/conf/Catalina/localhost/ROOT.xml 에 설정

			배포디렉토리 : /home/web/ex01
				
			vi 톰캣홈/conf/server.xml
			
				<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">
				</Host>
			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
				
				<?xml version="1.0" encoding="UTF-8"?>
				<Context path="" docBase="" reloadable="true"></Context>

			
			톰캣 기동 후 로그 :
				[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]을(를) 배치합니다.
				[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]의 배치가 [604] 밀리초 내에 완료되었습니다.

			확인 :
				url매핑 :
					'/' => //home/web/ex01
					'/ex01' => 404 not found

-----------ROOT.war가 아닌 ex01.war 배포 +  '/' 자동 설정이 한번에 되게 하려면?
	
	내가 못 찾은 것인지는 모르지만,	
	war 배포 + '/'설정 하기를 한방에 끝내는 방법은 ROOT.war 뿐인 것 같다

	ROOT 아닌 다른이름 .war
	예를 들어 ex01.war를 업로드 해서 톰캣 기동 후 (ROOT가 아닌 ex01 디렉토리)  + '/' 설정도 되길 원한다면, 
	일단 war 업로드 톰캣기동으로 배포 후 , 톰캣 중지하고 ,  수동배치 설정을 바꾸고, 다시 톰캣 재기동 해야 하드라..
	(위에 war 배포와  특정 디렉토리 수동 배치를 혼합하는 방법)

	이해하기 편하게 server.xml에 모든 설정을 다 때려 넣는 방법으로 테스트 해보자..

		/home/web 에 ex01.war 업로드

		server.xml 열고
			appBase="/home/web" (.war 풀기 위해)

			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
				<!-- Context 설정 안하면 기본으로 압축해제 한다 -->
			</Host>

		톰캣 올려서 배포 시키고

			./startup.sh
		
		/home/web/ex01 디렉토리 확인.

		브라우저 /ex01 로 접근 가능 확인.(현재는  /ex01 컨텍스트로만 접근 가능, '/'접근 불가)


		톰캣 내리고 

			./shutdown.sh

		ex01.war 파일 삭제하고, (톰캣 내리고 삭제해야지 기동 중 삭제하면 배포 디렉토리도 동시에 삭제된다)
			

		수동 배치 설정 방식으로 다시 server.xml 열고 	'/' 로 인식하게 설정을 바꿔준다
			
		Host > appBase에 '/' 방금 압축해제한 절대경로인 /home/web/ex01 설정
		컨텍스트 태그 path="" docBase="" 넣어줌..
		path="" 는 '/' 이고 , docBase="" 은 현재 /home/web/ex01 이라는 뜻.
		
			<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">
				<Context path="" docBase="" reloadable="true" />
			</Host>

		다시 톰캣 재기동

		브라우저로 '/' 로 접속 되는 지 확인.



--------- etc

	[컨텍스트명.xml] 로 분리해서 하는 방식으로 동적 테스트
	
	server.xml => 톰캣홈/conf/server.xml
	컨텍스트.xml => 톰캣홈/conf/Catalina/localhost/컨텍스트.xml

	1.예제
		배포 디렉토리 : /home/web/ex01
		
		server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
		
		컨텍스트.xml: ex01.xml

			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" docBase="ex01" reloadable="true">
			</Context>
		
		톰캣 기동 후 로그

			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			호스트 appBase 내의 docBase [/home/web/ex01]이(가) 지정되었으나, 이는 무시될 것입니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [635] 밀리초 내에 완료되었습니다

		url매핑 : 
			'/' => 404 not found
			/ex01 => /home/web/ex01
			/ex => 404 not found

		개인해석 :
			appBase + ex01.xml(파일명) = /home/web/ex01
			appBase + docBase = /home/web/ex01

			: ex01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 디렉토리를 검색하니 있음(유효성 통과).
			ex01 컨텍스트를 배치하고 ROOT 예약어 디렉토리가 아니므로 브라우저에서 /ex01 로 접속 가능하다.
			path="/ex" 는 개무시된다.

	2.예제
		배포 디렉토리 : /home/web/ex02
		
		server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ex01.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" docBase="ex02" reloadable="true"> 
			</Context>

		톰캣 기동 후 로그
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			[/home/web/ex02]이(가) 지정되었으나, 이는 무시될 것입니다.
			자바에러..Caused by: java.lang.IllegalArgumentException: 지정된 주요 리소스셋 [/home/web/ex01]은(는) 유효하지 않습니다.  
			심각..배치 descriptor [/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치하는 중 오류 발생
			자바에러 ..
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [79] 밀리초 내에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/home/web/ex02]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex02]에 대한 배치가 [446] 밀리초에 완료되었습니다.

		url매핑 : 
			'/' => 404 not found
			/ex01 => 404 not found
			/ex02 => /home/web/ex01
			/ex => 404 not found


		개인해석 : 
			appBase + ex01.xml(파일명) = /home/web/ex01
			appBase + docBase = /home/web/ex02

			: ex01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 웹 디렉토리를 검색해보니 없음(유효성 불통과). 그래서 기동시 java 에러 뿜는다.
			ex01 컨텍스트를 배치를 하긴 하지만, 웹디렉토리가 없다. 브라우저에서 /ex01 해봐야 404 에러를 낼뿐..
			내부적으로 docBase="ex02"를 다시 한번 조합해서 /home/web/ex02 를 검색해 보니 있다(유효성 통과).
			그럼 컨텍스트는 ex02를 배치하고 톰캣 기동을 완료한다.
			ROOT 예약어 디렉토리가 아니므로 브라우저에서 /ex02 로 접속 가능하다
			path="/ex" 는 개무시된다.

			로그를 보면 ex01부터 배치하는 걸 보니 [컨텍스트파일명.xml] 조합이 먼저인 거같다


	3. 예제 
		배포 디렉토리 : /home/web/ROOT

		server.xml
			<Host name="localhost"  appBase="/home/web/ROOT" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ROOT.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" docBase="" reloadable="true" >
			</Context>

		톰캣 기동 후 로그
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]을(를) 배치합니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]의 배치가 [449] 밀리초 내에 완료되었습니다.

		url매핑 : 
			'/' => /home/web/ROOT
			/ex => 404 not found

		개인해석 :
			appBase + ROOT.xml(파일명) = /home/web/ROOT
			appBase + docBase = /home/web/ROOT

			: ROOT 컨텍스트로 설정되고 , '/' 로 접근가능.
			path="/ex" 는 개무시된다.

	
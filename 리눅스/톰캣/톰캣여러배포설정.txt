톰캣 8.5.51 에서 실험

수백번의 테스트 후 알아낸 결과,
여러 배포형식과, 가장 중요한 document root 등의 설정이 어떻게 돌아가는지 짐작하게 되었다
논리적으로 이해 안가는 부분이 너무 많다..
잘 되는 부분만 사용하고 말자... 머리가 너무 아프다


기본지식 몇가지 습득하고 테스트 해보자

배포형식(3가지)
	1. 옛날 방식 특정 디렉토리에 소스를 올리고, 이 위치를 document root로 설정하는 방법
	2. 설정된 특정 디렉토리에 war 파일을 올려놓고 톰캣 기동으로 자동 압축해제 시켜 배포하는 방법
	3. 톰캣에서 지원하는 웹프로그램에서 배포하는 방법.

	배포형식 3가지 중에 1,2번만 살펴 본다

배포시 필요한 설정 파일들 과 속성들
	
	톰캣홈/conf/server.xml 
	톰캣홈/conf/Catalina/localhost/컨텍스트명.xml 
		: 이 형식은 server.xml의 Host태그 안에 설정하는 Context 태그 설정을 외부 파일로 빼낸 형식
		: 톰캣/cont/[엔진명]/[hostname]/컨텍스트명.xml 형식으로 정확히 맞춰 줘야 한다
		이 설명만으로 섹션이 하나 생길 정도니 다른 문서로 참조하길..

이 설정 파일의 3가지 속성의 조합으로 컨텍스트가 변화무쌍하게 설정된다
	
	1.Host 태그 appBase="/home/web"
		
		.war 파일 압축해제 위치 지정 
		이 속성의 디렉토리에   /home/web 에 ex01.war 를 올려놓고 톰캣 기동하면 ,
		ex01 디렉토리가 생기며 압축해제 되게 된다
		
	2.Context 태그의 docBase="ex01"

		원래는 컨텍스트 이름(웹앱디렉토리) 이었던 거 같은데.. 2단계 디렉토리명도 가능하다고 함.
	
	3.Context 태그의 path="/ex"
		
		이 녀석의 의미는 실제 브라우저 url 접근시 /ex 로 접근하라는 것인줄 알았더니, 
		실제로는 쓰이지 않거나 /ex 접근이 가능하다면 /home/web/ex 로 배포 되었을때 가능.
		예를 들어 <Context path="/ex" docBase="ex01" reloadable="true" /> 하고 .war를 톰캣기동 압축해제를 하니,
		ex,ex01,ROOT 가 생김(같은 웹앱인데 3개가 생김)

		
<Host appBase="경로"> 설정된 경로의 모든 디렉토리는 컨텍스트 대상이다
<Host appBase="경로"> 설정된 경로에 app 디렉토리가 있고 그 안에 웹앱 소스가 배포되었다면, 
app 컨텍스트가 배치되고 '/app'로 접근 가능하다

<Host appBase="경로"> + <Context docBase="디렉토리명또는경로"> 가 논리적으로 맞아야 설정이 되는 듯 하다.
appBase="/home/web" docBase="ex01" 이라면 
/home/web/ex01 에 웹앱이 배포되어야 설정이 맞아 떨어지는 형식인 거같다

톰캣에서 쓰이는 특별한 예약어 ROOT 디렉토리가 있는데 ,
ROOT 디렉토리에 배포하면 
ROOT 컨텍스트가 되고, 이 녀석만 특별하게 브라우저 접속시 '/'으로 접속 가능하다.
'/' 로 만들고 싶은 욕구가 있으니 여러 설정 잔꾀가 나온다.

예전엔 server.xml에 모두 설정했었다는데,
요즘은,
Context  태그를 외부파일로 빼서 설정하게 되어 있는데 이것이 공식 설정 이라고 함.
예를 들면 배포되는 웹앱 디렉토리명이 ROOT 이고

	톰캣홈/conf/Catalina/localhost/ROOT.xml

이렇게 ROOT.xml을 생성하면 파일명이 ROOT가 컨텍스트명이 되고, 
그 안에 Context 태그를 넣고 설정한다.

이 방식이 더욱 편리하게 향상되어서 아예 배포하려는 웹앱에 특정 영역에 넣으면 , 
그 파일을 복사해서 톰캣 영여에 배치하고 설정을 맞추게 하는 방식도 있다.

웹앱에서 위치는 
	웹앱/META-INF/context.xml(꼭 이 이름으로 해야된다,톰캣이 읽기 위해 약속된 이름) 이고,
이 위치에 넣고 ROOT.war 생성 후 톰캣 배포영역에 올려놓고 톰캣 기동하면, 이 context.xml을 파일명을 생성될 
컨텍스트명(디렉토리명)인 ROOT.xml로 바꿔서 톰캣 Context 설정 디렉토리에 복사하게 된다.
	(예)
	톰캣홈/conf/Catalina/localhost/ROOT.xml
또한 이 톰캣홈 Context영역의 디렉토리에 컨텍스트명.xml 파일은 톰캣 기동 후에도 동적 변경 가능하다.
(테스트 할때 편했음)


기타
<Context path=""> 와 <Context path="/"> 동일하고, root 표현은 ""로 해야하고, 
컨텍스트명으로 설정시 '/context' 처럼 해야한다

-----------.war로 배포시
	
	배포 순서
		1. ex01.war 생성
		2. /home/web 에 업로드
		3. server.xml 등 설정파일 설정
		4. 톰캣 기동
		5. /home/web 에 war파일명인 ex01 웹 디렉토리 배포 확인
		
		※ 톰캣 기동 중 ex01.war 파일을 삭제하면, 배포된 ex01도 같이 삭제된다. 톰캣 끄고 삭제해야 한다
		(이것 때문에 헷갈려서 한참 헤멨음)

	예제로 ex01.war를 톰캣 <Host appBase="/home/web"> 에 설정된 /home/web에 업로드하고
	(이 속성에 설정된 경로 아니면 압축해제 안함),
	톰캣 재기동 하면, 
	war파일명인 ex01 디렉토리가 생기고 그 안에 ex01.war 압축내용을 해제하게 된다.

	테스트 해보자

	1. /home/web 에 ex01.war 업로드 후 톰캣 기동 배포

		
		vi 톰캣홈/conf/server.xml
		
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<!--Context가 없는 것과 아래와 동일 -->
			<Context path="" docBase="" reloadable="true" />
			<!-- Context path="" docBase="." reloadable="true" /-->
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			[/home/web/ex01.war]의 배치가 [57] 밀리초에 완료되었습니다.

		확인 : ex01 디렉토리만 생김 , /ex01 컨텍스트로 접근 가능.
		'/' 가  /home/web 영역으로 url 매핑 됨.
		
		-----------------------

		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="." reloadable="true" />
			<!-- Context path="/ex" docBase="" reloadable="true" /-->
		</Host>
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [59] 밀리초에 완료되었습니다.

		확인 : ex01 디렉토리 생김
			/ex01 컨텍스트로 접근 가능 , /ex 를 하면 /home/web/영역에  접근(웃기다 대체 뭐냐) 

		-----------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex01" reloadable="true" /> 
			
		</Host>	
		
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [49] 밀리초에 완료되었습니다.
		
		확인 : ex01,ROOT 디렉토리가 생겨서 배포된다. 2개의 컨텍스트가 있는 셈.
			/ex01, '/' 컨텍스트로 접근 가능.
			웃긴 점:
				처음 배포시에는 생성된 2개의 디렉토리가 각각
					/ex01 접근 => ex01 디렉토리
					'/' 접근 => ROOT 디렉토리
				이런 식으로 url 매핑 되다가
				배포 하고 난 후 다시 톰캣 재기동하면,
					/ex01 접근 => ex01 디렉토리
					'/' 접근 => ex01 디렉토리
				이렇게 매핑이 변한다...

		대체 톰캣은 왜 그럴까?
		진짜 끝도 없이 좆 같다
					
		-----------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="/ex" docBase="ex01" reloadable="true" />
		</Host>
		톰캣 기동 후 로그 : 
			웹 애플리케이션 아카이브 [/home/web/ex01.war]을(를) 배치합니다.
			웹 애플리케이션 아카이브 [/home/web/ex01.war]의 배치가 [31] 밀리초에 완료되었습니다.
		
		확인 : ex01,  ex  디렉토리 생성. 2개의 컨텍스트가 있는 셈.
			/ex01, , /ex 컨테스트로 접근 가능.

			웃긴 점:
				처음 배포시에는 생성된 2개의 디렉토리가 각각
					/ex01 접근 => ex01 디렉토리
					'/ex' 접근 => ex 디렉토리
				이런 식으로 url 매핑 되다가
				배포 하고 난 후 다시 톰캣 재기동하면,
					/ex01 접근 => ex01 디렉토리
					'/ex' 접근 => ex01 디렉토리
				이렇게 매핑이 변한다...

		정말 족 같다
		-----------------------
		<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
			<Context path="" docBase="ex04" reloadable="true" />
		</Host>
		톰캣 기동 후 로그 : java 에러 잔뜩....

		확인 : 톰캣 기동 에러 , 디렉토리도 생기지 않는다(압축해제도 안함) 
			아마도 유효성 체크를 하나 보다.
			이 설정 조합은 /home/web/ex04 가 되는데,  
			ex01.war 압축해제 했다면 실제 /home/web/ex01 이므로 매칭불가 


	2. /home/web 에  ROOT.war 업로드 배포시 

		ROOT 디렉토리는 예약된 디렉토리이다 '/' 로 접근 가능.
		'/' 컨텍스트로 만들기 위해 이런 방식을 쓴다.
		---------------------
		vi 톰캣홈/conf/server.xml

		<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
			
			<!-- Context가 없거나  -->
			<Context path="" docBase="ROOT" reloadable="true" />
			
			<!-- ROOT.war로 하면 아래처럼 하면 ROOT로 배포할 거 같지만, 다른명.war는만 가능 -->
			<!-- Context path="" docBase="" reloadable="true" /-->
		</Host>
		
		톰캣 기동 후 로그 :
			Context 없이 기동 했을때 :  
				웹 애플리케이션 아카이브 [/home/web/ROOT.war]을(를) 배치합니다.
				웹 애플리케이션 아카이브 [/home/web/ROOT.war]의 배치가 [601] 밀리초에 완료되었습니다.
			
			docBase="ROOT" 기동 했을때 :
				# 컨텍스트 배포 로그가 없이 그냥 기동된다. 
				# 그래도 ROOT 디렉토리 배포하고 '/' 로 접근 가능하더라
			
		확인 : ROOT 디렉토리 생성, ROOT 컨텍스트는 기본적으로 '/ROOT' 가 아닌 '/'로 예약되어 있다.
		'/' 로 바로 접근 가능해진다..


--------- 옛날 방식으로 특정 디렉토리에 수동 배치시..

	/home/web/ex01 디렉토리에 웹앱 배포 후 기동하는 것으로 가정한다
	Context > crossContext="true" 속성이 특별한 역활을 한다.(꼭 넣어야 한다는, '/' 변경을 위해)

	1. 톰캣홈/conf/server.xml에 모두 몰아 넣는 방법(옛날 방식, 비추천).	

		방법1. 
			Host > appBase에 절대경로를 넣고, Context > docBase =""  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase="/home/web/ex01"
				    unpackWARs="true" autoDeploy="true">

				   <Context path="" 
					docBase="" 
					reloadable="true" 
					debug="0" 
					crossContext="true"
					privileged="true" />
			</Host>
			:was 재기동하면 컨텍스트 없이 /로 바로 접근


		방법2. (이렇게 하면 보안에 위험함 절대 하지 말것!)
			Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
			(!!!이거 하지마!!!)
			------------------------
			vi 톰캣홈/conf/server.xml
			
			<Host name="localhost"  appBase=""
				    unpackWARs="true" autoDeploy="true">

				   <Context path="" 
					docBase="/home/web/ex01" 
					reloadable="true" 
					debug="0" 
					crossContext="true"
					privileged="true" />
			</Host>

			톰캣 기동 후 로그
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]에 대한 배치가 [23] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]에 대한 배치가 [43] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]에 대한 배치가 [37] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]에 대한 배치가 [23] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]에 대한 배치가 [18] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]에 대한 배치가 [31] 밀리초에 완료되었습니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]을(를) 배치합니다.
				웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]에 대한 배치가 [30] 밀리초에 완료되었습니다.
			 
			 확인 : was 재기동하면 컨텍스트 없이 /로 바로 접근,(처음엔 잘 되는 것인줄 알았다가 로그 보고 놀랬다)
				
				그러나!! 로그를 보자 
				톰캣 홈의 모든 디렉토리가 모든 컨텍스트로 등록된다.
				이건 중대한 오류 아닐까?
				구글링 하면 이렇게 설정해서 '/' 컨텍스트로 사용하는 글들이 있는데, 절대 따라 하지 말자..
				(글 주인들이 제대로 확인 안 한 듯)


			 
	2. 톰캣홈/conf/Catalina/localhost/ROOT.xml 에 컨텍스트 지정을 분리할 경우

		방법 1. 
			Host > appBase에 절대경로를 넣고, Context > docBase ="."  를 넣는 방법
			------------------------
			vi 톰캣홈/conf/server.xml
			
				<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">

			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
				(이 ROOT.xml , '/'로 접근 가능한 컨텍스트임을 뜻하는 예약어, 
				파일명.xml의 파일명은 컨텍스트명을 뜻함 , man.xml -> /man )

				<?xml version="1.0" encoding="UTF-8"?>
				<Context path="" 
					docBase="." 
					reloadable="true" 
					debug="0" 
					crossContext="true"
					privileged="true">

				</Context>

			:was 재기동하면 컨텍스트 없이 /로 바로 접근

		방법 2.
			Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
			(!!!이거 하지마!!!)
			------------------------
			vi 톰캣홈/conf/server.xml
			
				<Host name="localhost"  appBase="" unpackWARs="true" autoDeploy="true">

			vi 톰캣홈/conf/Catalina/localhost/ROOT.xml 
				(이 ROOT.xml , '/'로 접근 가능한 컨텍스트임을 뜻하는 예약어, 
				파일명.xml의 파일명은 컨텍스트명을 뜻함 , man.xml -> /man )

				<?xml version="1.0" encoding="UTF-8"?>
				<Context path="" 
							docBase="/home/web/ex01" 
							reloadable="true" 
							debug="0" 
							crossContext="true"
							privileged="true">

				</Context>

			:was 재기동하면 컨텍스트 없이 /로 바로 접근

-----------내가 원하는 컨텍스트명(ROOT가 아닌)으로 ex01.war 배포도 되고 '/' 자동 설정이 한번에 되게 하려면?

ROOT 디렉토리로 배포시키는 ROOT.war 방법이 가장 속편한 거 같다. 
배포와 동시에 '/' 설정도 손댈 필요 없으니..

내가 못 찾은 것인지는 모르지만,
죽어도 ROOT디렉토리가 아닌 앱명 예를 들어 ex01.war를 업로드 해서 톰캣 기동 후 '/'설정도 되길 원한다면, 
일단 war 업로드 톰캣기동으로 배포 후 , 톰캣 중지하고 ,  수동배치 설정을 바꾸고, 다시 톰캣 재기동 해야 하드라..
(위에 war 배포와  특정 디렉토리 수동 배치를 혼합하는 방법)

이해하게 편하게 server.xml에 모든 설정을 다 때려 넣는 방법으로 테스트 해보자..

	/home/web 에 ex01.war 업로드

	server.xml 열고
		

		<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
			<!-- ※ Context  > crossContext="true" 꼭 넣어라 -->
			<Context path="" docBase="" reloadable="true" crossContext="true" />
		</Host>

	톰캣 올려서 배포 시키고

		./startup.sh

	브라우저 /ex01 로 접근 가능 확인.(현재는  /ex01 컨텍스트로만 접근 가능, '/'접근 불가)


	톰캣 내리고 

		./shutdown.sh

	ex01.war 파일 삭제하고, (톰캣 내리고 삭제해야지 기동 중 삭제하면 배포 디렉토리도 동시에 삭제된다)
		

	수동 배치 설정 방식으로 다시 server.xml 열고 	'/' 로 인식하게 설정을 바꿔준다

		※ Context > crossContext="true" 가 중요하다

		방법 1 : Host > appBase에 절대경로를 넣고, Context > docBase ="."  를 넣는 방법
		------------------------
		<Host name="localhost"  appBase="/home/web/ex01" unpackWARs="true" autoDeploy="true">
				
			<!-- ※ Context  > crossContext="true" 꼭 넣어라 -->
			<Context path="" docBase="" reloadable="true"  crossContext="true" />

		</Host>

		방법 2 : Host > appBase="" 비우고 , Context > docBase ="절대경로"  를 넣는 방법
		(!!!이거 하지마!!!)
		------------------------
		<Host name="localhost"  appBase=""  unpackWARs="true" autoDeploy="true">
			<!-- ※ Context  > crossContext="true" 꼭 넣어라 -->
			<Context path="" docBase="/home/web/ex01" reloadable="true"  crossContext="true" />
		</Host>

	다시 톰캣 재기동

	브라우저로 '/' 로 접속 되는 지 확인.


----------- context.xml을 웹애플리케이션에 포함해서 배포하기

위에서 톰캣홈/conf/Catalina/localhost/ROOT.xml 을 생성 설정 하던 방식을 
아예 웹애플리케이션에 .xml을 넣어서 배포하게끔 향상된 방식이다
공식 문서에서는 이 방법을 추천.

웹앱 MEAT-INF 디렉토리에 context.xml(꼭 이 이름으로 해야함,약속된 이름)에 
톰캣 context 설정값을 넣어서 배포하는 방식

이클립스 프로젝트로 한다면
웹 자원이 있는 root 디렉토리에 META-INF 디렉토리를 만든다(이 곳은 메이븐이 빌드시 만들어 주는 디렉토리 이기도 하다)
그 안에 설정된 context.xml을 넣고 .war를 만든다
그럼 구조가 대충 이렇게 될 것이다
.war 
	-웹자원들 및 디렉토리
	-MEAT-INF 디렉토리(context.xml 이 있음)
	-WEB-INF 디렉토리

자세한 설정 방식은 테스트로...

	1. 웹앱 root에 /META-INF 디렉토리 만들고 context.xml을 만든다

		※ copyXML="true" 속성을 꼭 넣어줘야 이 파일을  톰캣 설정 디렉토리로 복사해준다
		
		<?xml version="1.0" encoding="UTF-8"?>
		<Context path="" 
			docBase="." 
			reloadable="true" 
			debug="0" 
			crossContext="true"
			privileged="true"
			copyXML="true">

		</Context>

	2. 웹앱을 ROOT.war 를 만든다('/'로 배포하기 위해서 ROOT로 이름 지었다)
	
	3. 톰캣홈/conf/server.xml은  HOST 태그를 확인한다
		
		<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">

		: /home/web 에 .war 파일을 배포하게끔 되어 있다.

	4. /home/web 에 ROOT.war 업로드

	5. 톰캣 기동 , ROOT.war 압축 해제
		
		배포 전  META-INF/context.xml 을 복사해서 톰캣홈/conf/Catalina/localhost/에 ROOT.xml 이름으로 바뀌어서 복사됨
		(.xml의 파일명 = 컨텍스트명 이므로 ROOT.xml로 파일명 변경되어서 복사)
		
			/conf/Catalina/localhost/ROOT.xml  #복사된 context.xml

			:수동으로 컨텍스트명.xml 만들던 방식과 같다

		배포 영역에 ROOT 웹앱 디렉토리 생성됨.

			/home/web/ROOT

	6. 브라우저에서 '/' 으로 접속 테스트

--------- etc

context.xml 로 분리해서 하는 방식으로 동적 테스트
	
	server.xml => 톰캣홈/conf/server.xml
	컨텍스트.xml => 톰캣홈/conf/Catalina/localhost/컨텍스트.xml

	1.예제
		배포 디렉토리 : /home/web/ex01
		
		server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">
		
		컨텍스트.xml: ex01.xml

			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" 
				docBase="ex01" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true">

			</Context>
		
		톰캣 기동 후 로그


			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			호스트 appBase 내의 docBase [/home/web/ex01]이(가) 지정되었으나, 이는 무시될 것입니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [635] 밀리초 내에 완료되었습니다

		개인해석 :
			appBase + ex01.xml(파일명) = /home/web/ex01
			appBase + docBase = /home/web/ex01

			: ex01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 디렉토리를 검색하니 있음(유효성 통과).
			ex01 컨텍스트를 배치하고 ROOT 예약어 디렉토리가 아니므로 브라우저에서 /ex01 로 접속 가능하다.
			path="/ex" 는 개무시된다.

	2.예제
		배포 디렉토리 : /home/web/ex02
		
		server.xml
			<Host name="localhost"  appBase="/home/web" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ex01.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" 
				docBase="ex02" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true"
				>

			</Context>

		톰캣 기동 후 로그
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			호스트 appBase 내의 docBase [/home/web/ex02]이(가) 지정되었으나, 이는 무시될 것입니다.
			지정된 주요 리소스셋 [/home/web/ex01]은(는) 유효하지 않습니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치하는 중 오류 발생
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [81] 밀리초 내에 완료되었습니다.

			웹 애플리케이션 디렉토리 [/home/web/ex02]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/home/web/ex02]에 대한 배치가 [504] 밀리초에 완료되었습니다.

		
		개인해석 : 
			appBase + ex01.xml(파일명) = /home/web/ex01
			appBase + docBase = /home/web/ex02

			: ex01.xml의 파일명으로 컨텍스트명을 정하고 /home/web/ex01 웹 디렉토리를 검색해보니 없음(유효성 불통과). 그래서 기동시 java 에러 뿜는다.
			ex01 컨텍스트를 배치를 하긴 하지만, 웹디렉토리가 없다. 브라우저에서 /ex01 해봐야 404 에러를 낼뿐..
			내부적으로 docBase="ex02"를 다시 한번 조합해서 /home/web/ex02 를 검색해 보니 있다(유효성 통과).
			그럼 컨텍스트는 ex02를 배치하고 톰캣 기동을 완료한다.
			ROOT 예약어 디렉토리가 아니므로 브라우저에서 /ex02 로 접속 가능하다
			path="/ex" 는 개무시된다.



	3.예제(매우 위험한 상태로 배포된 예제)

		배포 디렉토리 : /home/web/ex01
		
		server.xml
			<Host name="localhost"  appBase="" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ROOT.xml
			<Context path="/ex" 
				docBase="/home/web/ex01" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true"
				>

			</Context>

		톰캣 기동 후 로그

			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]을(를) 배치합니다.
			배치 descriptor [/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]의 배치가 [594] 밀리초 내에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]에 대한 배치가 [20] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]에 대한 배치가 [20] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]에 대한 배치가 [20] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]에 대한 배치가 [19] 밀리초에 완료되었습니다.

		개인해석 :
			appBase + ROOT.xml(파일명) = ROOT
			appBase + docBase = /home/web/ex01

			: /home/web/ex01 의 디렉토리가 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
			이 컨텍스트 이름은 ROOT(.xml파일명) 가 되며, ROOT 컨텍스트는 '/'로 접근 가능하다.

			!!! 근데 
			무려 톰캣홈의 모든 디렉토리를 컨텍스트로 잡아 버린다...이게 뭐야
			conf, bin, lib, logs, temp, webapps , work 

			머리가 쥐가 난다.. 이게 뭐지

			배포 디렉토리 : /home/web/ROOT 디렉토리로 바꾸고 재기동해도 똑같음.

			appBase="" 를 비우면 톰캣 홈의 모든 디렉토리를 컨텍스트로 모두 설정한다... 왜그럴까?

	4. 예제 
		배포 디렉토리 : /home/web/ROOT

		server.xml
			<Host name="localhost"  appBase="/home/web/ROOT" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ROOT.xml
		<?xml version="1.0" encoding="UTF-8"?>
			<Context path="/ex" 
				docBase="" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true">

			</Context>

		톰캣 기동 후 로그
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]을(를) 배치합니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ROOT.xml]의 배치가 [449] 밀리초 내에 완료되었습니다.

		개인해석 :
			: ROOT 컨텍스트로 설정되고 , '/' 로 접근가능.
			path="/ex" 는 개무시된다.

	5.예제(매우 위험한 상태로 배포된 예제)
		배포 디렉토리 : /home/web/ex01
		
		server.xml
			<Host name="localhost"  appBase="" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ex01.xml
			<Context path="/ex" 
				docBase="/home/web/ex01" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true">

			</Context>
		톰캣 기동 후 로그 
			배치 descriptor [/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			배치 descriptor [/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [555] 밀리초 내에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]에 대한 배치가 [21] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]에 대한 배치가 [20] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]을(를) 배치합니다.
			웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]에 대한 배치가 [18] 밀리초에 완료되었습니다.


		개인해석 :
			appBase + ex01.xml(파일명) = ex01
			appBase + docBase = /home/web/ex01

			: /home/web/ex01 의 디렉토리가 웹 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
			이 컨텍스트 이름은 ex01(.xml파일명) 가 되며, '/ex01'로 접근 가능하다.
	

			appBase="" 를 비우면 톰캣 홈의 모든 디렉토리를 컨텍스트로 모두 설정한다... 왜그럴까?
			conf, bin, lib, logs, temp, webapps , work 컨텍스트 생성해서 서버 정보 모두 출력 가능해짐

	6.예제(매우 위험한 상태로 배포된 예제)
		배포 디렉토리 : /home/web/ex02
		
		server.xml
			<Host name="localhost"  appBase="" unpackWARs="true" autoDeploy="true">

		컨텍스트.xml: ex01.xml
			<Context path="/ex" 
				docBase="/home/web/ex02" #디렉토리를 변경했다
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"
				copyXML="true">

			</Context>

		톰캣 기동 후 로그
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]을(를) 배치합니다.
			[/opt/tomcat/apache-tomcat-8.5.51/conf/Catalina/localhost/ex01.xml]의 배치가 [506] 밀리초 내에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/conf]에 대한 배치가 [51] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/bin]에 대한 배치가 [29] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/lib]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/logs]에 대한 배치가 [19] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/temp]에 대한 배치가 [22] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/webapps]에 대한 배치가 [28] 밀리초에 완료되었습니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]을(를) 배치합니다.
			 웹 애플리케이션 디렉토리 [/opt/tomcat/apache-tomcat-8.5.51/work]에 대한 배치가 [18] 밀리초에 완료되었습니다.

		개인해석 :
			appBase + ex01.xml(파일명) = ex01
			appBase + docBase = /home/web/ex02

			: /home/web/ex02 의 디렉토리가 웹 root 디렉토리가 될 것이고, path="/ex" 는 무시되고, 
			이 컨텍스트 이름은 ex01(.xml파일명) 가 되며, '/ex01'로 접근 가능하다.
			/ex02 접근 못한다


			appBase="" 를 비우면 톰캣 홈의 모든 디렉토리를 컨텍스트로 모두 설정한다... 왜그럴까?
			conf, bin, lib, logs, temp, webapps , work 컨텍스트 생성해서 서버 정보 모두 출력 가능해짐

server.xml 에 모두 몰아넣어서 수동 테스트
	
	웹앱디렉토리: /home/web/ex01
		
	테스트 시작..

	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
		<!--디퐅트 Context가 없는 것과 아래와 동일 -->
		<Context path="" docBase="" reloadable="true" />
		<!-- Context path="" docBase="." reloadable="true" /-->
	</Host>
	로그 :
		웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
		웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [559] 밀리초에 완료되었습니다.
		
	확인 : /ex01 컨텍스트로 접근 가능.
	-------------------------------
	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
		<Context path="/ex" docBase="" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true"/>
	</Host>
	로그:
		컨텍스트 경로는 반드시 빈 문자열이거나, 또는 '/'로 시작하고 '/'로 끝나지 않는 문자열이어야 합니다. 
		해당 경로 [ex]은(는) 이 조건을 충족시키지 않아 [/ex](으)로 변경되었습니다.
		웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
		웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [136] 밀리초에 완료되었습니다.
	확인 : /ex01 컨텍스트로 접근 가능 , /ex 는 /home/web 영역 접근

	-------------------------------
	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
		<Context path="" docBase="ex01" 
			reloadable="true"
			debug="0" 
			crossContext="true"
			privileged="true"/> 
	</Host>	
	로그 : 
		웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
		웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [184] 밀리초에 완료되었습니다.
	확인 : /ex01, / 컨텍스트로 접근 가능.

	-------------------------------
	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
		
		<Context path="/ex" docBase="ex01" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true" />

	</Host>
	로그 : 
		웹 애플리케이션 디렉토리 [/home/web/ex01]을(를) 배치합니다.
		웹 애플리케이션 디렉토리 [/home/web/ex01]에 대한 배치가 [43] 밀리초에 완료되었습니다.

	확인 : /ex01, , /ex  컨텍스트로 접근 가능.
	

	-------------------------------
	<Host name="localhost"  appBase="/home/web"   unpackWARs="true" autoDeploy="true">
		<Context path="" docBase="ex04" 
				reloadable="true" 
				debug="0" 
				crossContext="true"
				privileged="true" />		
	</Host>
	로그 : 자바 에러 주르륵 떨어짐

	확인 : 톰캣 기동 실패
	이 조합은 /home/web/ex04 가 되는데,  ex01.war 압축해제 했다면 실제 /home/web/ex01 이므로 매칭불가
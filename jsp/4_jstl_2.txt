---------  jstl의 구성 라이브러리들
	
	주로 요 3개 라이브러리를 주로 쓴다.

		코어 : 
			<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

		포맷팅 : 
			<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>

		함수 :
			<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>


	기타 2개 (잘 안쓰는)
		
		데이터베이스 :
			<%@taglib prefix="sql uri="http://java.sun.com/jsp/jstl/sql"%>

		xml 처리 : 
			<%@taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml"%>

	이 문서에는 [포맷팅] 과 [함수] 라이브러리를 정리.



--------- 포맷팅 라이브러리
	<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>

	- fmt:formatDate
		<%
			Date d = new Date();
		%>
		<c:set var="date" value="<%=d %>" />
		<fmt:formatDate value="${date}" />  //2018. 10. 1
			아래와 같다
		<fmt:formatDate value="<%=d %>" /> //2018. 10. 1
		
		<fmt:formatDate value="${date}" type="date" /> //2018. 10. 1 [디폴트]
		<fmt:formatDate value="${date}" type="time" /> //오전 4:16:31
		<fmt:formatDate value="${date}" type="both"/> //2018. 10. 1 오전 4:17:46
		
		
		<fmt:formatDate value="${date}" type="date" dateStyle="full"/> //2018년 10월 1일 월요일
		<fmt:formatDate value="${date}" type="date" dateStyle="medium"/> //2018. 10. 1 [디폴트]
		<fmt:formatDate value="${date}" type="date" dateStyle="long"/> //2018년 10월 1일 (월)
		<fmt:formatDate value="${date}" type="date" dateStyle="short"/> //18. 10. 1

		<fmt:formatDate value="${date}" type="time" timeStyle="full"/> //오전 4시 24분 56초 KST
		<fmt:formatDate value="${date}" type="time" timeStyle="long"/> //오전 4시 24분 56초
		<fmt:formatDate value="${date}" type="time" timeStyle="medium"/> //오전 4:24:56
		<fmt:formatDate value="${date}" type="time" timeStyle="short"/> //오전 4:24
		<fmt:formatDate value="${date}" type="both"  dateStyle="full" timeStyle="full"/> //2018년 10월 1일 월요일 오전 4시 27분 30초 KST

		<fmt:formatDate value="${date}" type="date" pattern="YYYY/MM/dd (E)"/> //2018/10/01 (월)

		<fmt:formatDate value="${date}" type="time" pattern="(a) hh:mm:ss"/> //(오전) 04:34:51
	
	- fmt:formatNumber

		<fmt:formmatNumber value="1000000" groupingUsed="true" />	//1,000,000 [디폴트]
		<fmt:formmatNumber value="1000000"  />				//1,000,000	
		<fmt:formmatNumber value="1000000" groupingUsed="" />		//1000000

		<fmt:formatNumber value="3.141592" pattern="#.##" /> // 3.14
		<fmt:formatNumber value="3.145592" pattern="#.##" /> // 3.15 [기본 반올림]

		<fmt:formatNumber value="10.5" pattern="#.00" /> //10.50
		<fmt:formatNumber value="10.5" pattern="#.#0" /> //패턴 에러 , #,0을 혼용 못 하는 듯.
		<fmt:formatNumber value="1.5" pattern="00.00" /> // 01.50

		<fmt:formatNumber value="1.5" type="percent" /> // 150%

		<fmt:formatNumber value="20000" type="currency" /> //￦20,000
		<fmt:formatNumber value="20000" type="currency" currencySymbol="＄" />//＄20,000
		
	- fmt:setLocale
		출력을 지역설정에 따라 다르게 한다
		'언어코드_국가코드' 스타일로 지정 , 미국_영어권 설정은 'en_us'

		<fmt:setLocale value="ja_jp"/>
		<fmt:formatDate value="${date}" type="date" dateStyle="full" /> //2018年10月1日
		<fmt:formatNumber value="200000" type="currency" /> //￥200,000

		<fmt:setLocale value="en_us"/>
		<fmt:formatDate value="${date}" type="date" dateStyle="full" /> //Monday, October 1, 2018
		<fmt:formatNumber value="200000" type="currency" /> //$200,000.00


	- fmt:timeZone
		<fmt:timeZone></fmt:timeZone> 사이에 지역시간으로 표현한다.
		영역 밖에 나오면 다시 현재 지역 값으로 나온다
		
		<fmt:timeZone value="Asia/Hong_Kong">
			<fmt:formatDate value="${date}" type="date" dateStyle="full" />2018년 10월 1일 월요일
			<fmt:formatDate value="${date}" type="time" dateStyle="full" />오후 12:17:00
		</fmt:timeZone>

		<fmt:formatDate value="${date}" type="date" dateStyle="full" />2018년 10월 1일 월요일
		<fmt:formatDate value="${date}" type="time" dateStyle="full" />오후 1:17:00

	- fmt:setTimeZone
		설정 이후부터 모두 지역 설정시간으로 표시된다.

		<fmt:setTimeZone value="Asia/Hong_Kong""/>

		<fmt:formatDate value="${date}" type="date" dateStyle="full" />2018년 10월 1일 월요일
		<fmt:formatDate value="${date}" type="time" dateStyle="full" />오후 1:17:00

		-timeZone & setTimeZone 설정값
		java.util.TimeZone.getAvailableIDs() 로 출력되는 지역이름으로 설정해야한다
		"국가이름/도시이름"
		
		<%
		String arr[] = java.util.TimeZone.getAvailableIDs();
		for(int i =0; i< arr.length; i++) out.println(arr[i] + "<br />");
		%>


	- fmt:bundle

		- 브라우저별 언어 지역화 기법
		- message 태그와 함께 사용
		- 태그 안에서만 작동한다
			<fmt:bundle></fmt:bundle>

		(예제)
			- /WEB-INF/classes/Intro_ko.properties (회사소개)
				TITLE=\uD68C\uC0AC\uC18C\uAC1C
			- /WEB-INF/classes/Intro_en.properties
				TITLE=About Us
			
			- bundle.jsp (브라우저가 한국어[ko] 라면..)
				<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
				<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

				<fmt:bundle basename="Intro" >
					<h1><fmt:message key="TITLE" /></h1> <!--'회사소개' 출력-->
					<fmt:message var="title" key="TITLE" /> <!--var 속성 사용시 title 변수에 저장 -->
					
				</fmt:bundle>

				<h2>${title}</h2> <!--번들에서 서렁한 var="title" 출력, '회사소개' 출력 -->
				<p><fmt:message key="TITLE" /></p> <!-- 에러문자 출력, 태그 벗어났으므로 -->

		- profix 속성
			.properties 파일 내용 ('ko_'를 주목하자)
				ko_TITLE=about us  

			
			<fmt:bundle basename="Intro">
				<fmt:message key="ko_TITLE" /> //about us 출력
			</fmt:bundle>

			또는 

			<fmt:bundle basename="Intro" prifix="ko_">
				<fmt:message key="TITLE" /> //about us 출력
			</fmt:bundle>

	- fmt:message 속성
		key : 읽어올 메시지의 키값

		var : 메시지를 저장할 변수명 , el표현식으로 표현한다 (var="a" => ${a})

		scope : 변수가 저장되는 영역지정 (page, request, session , application)

		bundle : <fmt:setBundle> 태그를 사용해서 로딩한 번들로부터 메시지를 읽어올때 사용
			 값은 el 표현식으로 해야함.

				<fmt:setBundle var="two" basename="Intro2" />
				<fmt:message bundle="${one}"  key="TITLE"/>
				(다음 설명에 나옴)



	- fmt:setBundle
		- 태그 안이 아닌 글로벌 설정이라고 보면 된다.

		(예제)
			- /WEB-INF/classes/Intro_ko.properties
				TITLE=I am One.
			- /WEB-INF/classes/Intro2_ko.properties
				TITLE=I am Two.
			
			- bundle.jsp (브라우저가 한국어[ko] 라면..)
				
				<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
				<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

				기본
					<fmt:setBundle basename="Intro" />
					<h1><fmt:message  key="TITLE"/></h1> //I am One.

				두개 이상 번들 설정 되었을때, 최근 것으로 셋팅
					<fmt:setBundle basename="Intro" />
					<fmt:setBundle basename="Intro2" />
					<fmt:message   key="TITLE"/> //I am Two.

				var 속성이 지정된 setBundle을 쓰려면 message 태그에 bundle 속성을 써야함.
					<fmt:setBundle basename="Intro" />
					<fmt:setBundle var="two" basename="Intro2" />
					<fmt:message   key="TITLE"/>  //I am One. (첫번째 번들 적용됨)

					<fmt:setBundle var="one" basename="Intro" />
					<fmt:setBundle basename="Intro2" />
					<fmt:message   key="TITLE"/>  //I am Two. (두번째 번들 적용됨)

					<fmt:setBundle var="one" basename="Intro" />
					<fmt:setBundle var="two" basename="Intro2" />
					<fmt:message   key="TITLE"/>  //에러 문자 출력


					<fmt:setBundle var="one" basename="Intro" />
					<fmt:setBundle var="two" basename="Intro2" />
					<fmt:message  bundle="${one}" key="TITLE"/>  //I am One.

	- fmt:message 파라미터 사용

		- /WEB-INF/classes/Intro_ko.properties
			GREETING=Hello	{0}! Thank you for visiting ({1}) this page.


		- setBundle.jsp
			<fmt:setBundle var="two" basename="Intro2" />
			<fmt:message var="greeting" bundle="${two}"  key="GREETING">
				<fmt:param>후아</fmt:param>
				<fmt:param>4</fmt:param>
			</fmt:message>

			<p>${greeting}<p> //Hello 후아! Thank you for visiting (4) this page.

	- fmt:requestEncoding
		<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
		<% request.setCharacterEncoding("utf-8"); %>
		둘은 같다
		<fmt:requestEncoding value="utf-8" />

--------- 함수 라이브러리
	
	java.lang.String 객체의 메서드와 구조가 유사한 함수들 모음

	<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
	<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

	${fn:toUpperCase("hello") } //HELLO
	${fn:toLowerCase("Hello") } //hello
	${fn:substring("도레미파솔라시도",1 ,6) } //레미파솔라
	${fn:indexOf("How are you","are")} // 4
	${fn:length("How are you")} //11
	<p>||${fn:trim("  How are you  ") }||</p> //||How are you||

	이 이외에 여러 메소드가 있다..API를 찾아 보시길..

	substringAfter, substringBefore, startsWith, endsWith, contains
	,containsIgnoreCase , split, join, escapeXml 등등



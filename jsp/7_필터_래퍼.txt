
---------기본
1. SimpleFilter.java 작성 
	- 필터 기본구조다

	package com.solgae.filter;

	import javax.servlet.Filter;
	import javax.servlet.FilterChain;
	import javax.servlet.FilterConfig;
	import javax.servlet.ServletRequest;
	import javax.servlet.ServletResponse;

	public class SimpleFilter implements Filter{

		 
		  public  void init(FilterConfig config) throws javax.servlet.ServletException{
			  
		  }
		  
		  
		  public  void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws java.io.IOException, javax.servlet.ServletException{
			  System.out.println("1.웹 컴포넌트 시작 전");
			  chain.doFilter(request, response);
			  System.out.println("4.웹 컴포넌트 시작 후");
		  }
		  
		  
		  public  void destroy(){}
	}

2. web.xml 에 filter 사용 추가
	- test2 라는 서블릿명이 있고, 이 서블릿을 호출하면 필터가 작동되게 한다

	<filter>
		<filter-name>simple-filter</filter-name>
		<filter-class>com.solgae.filter.SimpleFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<servlet-name>test2</servlet-name>
	</filter-mapping>

3. 서블릿과 jsp에 로그 찍는다
	test2 서블릿	: System.out.println("2.서블릿 실행");
	test.jsp	: System.out.println("3.jsp 실행");

3. was 재기동 후 로그결과 확인
	1.웹 컴포넌트 시작 전
	2.서블릿 실행
	3.jsp 실행
	4.웹 컴포넌트 시작 후

--------- filter-mapping 여러 방법

	특정 서블릿 클래스에 필터 적용
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<servlet-name>test2</servlet-name>
	</filter-mapping>

	모든 url 패턴에 필터 적용
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	모든 .jsp에 필터 적용
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>

	계층적 적용, /sub1/ 이하 모두에  필터적용
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/sub1/*</url-pattern>
	</filter-mapping>

	이건 안 된다
	계층적 + *.확장자
	<url-pattern>/sub1/*.jsp</url-pattern> (x)

	여러개 url-pattern 쓰기
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/sub1/*</url-pattern>
		<url-pattern>/sub2/*</url-pattern>
	</filter-mapping>

	여러개 servlet-name 쓰기
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<servlet-name>test1</servlet-name>
		<servlet-name>test2</servlet-name>
	</filter-mapping>

	servlet-name, url-pattern 섞어쓰기
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/sub1/*</url-pattern>
		<url-pattern>/sub2/*</url-pattern>
		<servlet-name>test1</servlet-name>
		<servlet-name>test2</servlet-name>
	</filter-mapping>

	여러 filter-mapping 쓰기
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/sub1/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<servlet-name>test1</servlet-name>
	</filter-mapping>

--------- filter config
	- web.xml filter 태그 작성시 초기화 파라미터 설정 가능
	<filter>
		<filter-name>simple-filter</filter-name>
		<filter-class>com.solgae.filter.SimpleFilter</filter-class>
		<init-param>
  			<param-name>log_file_name</param-name>
  			<param-value>d:\\myfilter.log</param-value>	
  		</init-param>
	</filter>

	- Filter 클래스 init 메소드에서 사용가능
	public void init(FilterConfig config) throws ServletException {
		String file = config.getInitParameter("log_file_name");
		..
	}

--------- dispatcher

	웹컴포넌트를 호출하는 방법 4가지
	1.웹브라우저 요청
	2.forward 메서드로 호출
	3.include 메서드로 호출
	4.에러(exception) 발생했을 때 호출

	REQUEST , FORWARD, INCLUDE , ERROR 값을 쓸수 있다
	
	아래는 sub1 하위 계층에 FORWARD , INCLUDE시만 호출 됨다
	dispatcher 태그가 없으면 디폴트 값으로  REQUEST 설정

	<filter-mapping>
		<filter-name>simple-filter</filter-name>
		<url-pattern>/sub1/*</url-pattern>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>

	INCLUDE
		서블릿, jsp
			RequestDispatcher dispatcher = request.getRequestDispatcher("log.jsp");
			dispatcher.include(request, response);
			
			include 지시자는 안된다(x)
			<%@include file="log.jsp" %> (x)

		표준액션
			<jsp:include page="log.jsp" />
			
		jstl
			<c:import url="log.jsp" />

	FORWARD
		서블릿, jsp
			RequestDispatcher dispatcher = request.getRequestDispatcher("log.jsp");
			dispatcher.forward(request, response);

		표준액션
			<jsp:forward page="log.jsp" />


--------- 필터체인의 순서

	규칙 1. url-pattern -> servlet-name 순
	규칙 2. 필터매핑 등록 순

	1. url-pattern으로만 되어 있다면?

		<filter-mapping>
			<filter-name>filter-1</filter-name>
			<url-pattern>*.jsp</url-pattern>
		</filter-mapping>
		<filter-mapping>
			<filter-name>filter-2</filter-name>
			<url-pattern>/sub1/*</url-pattern>
		</filter-mapping>
		<filter-mapping>
			<filter-name>filter-3</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>

		/sub1/test.jsp 호출했다면, 모두 매핑되므로, 등록순으로 체인이 이루어진다.
		filter-1 -> filter-2 -> filter-3 

	
	2. url-pattern + servlet-name 섞여 있다면?

		<filter-mapping>
			<filter-name>filter-1</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
		<filter-mapping>
			<filter-name>filter-2</filter-name>
			<servlet-name>hello-servlet</servlet-name>
		</filter-mapping>
		<filter-mapping>
			<filter-name>filter-3</filter-name>
			<url-pattern>/sub1/*</url-pattern>
		</filter-mapping>

		hello-servlet 명의 url 매핑이  /sub1/hello 이고,
		/sub1/hello 가 호출되었다면 위 세개가 모두 적용된다.
		먼저 url-pattern 등록 순 체인이 묶이고, 다음으로 servlet-name 등록 순으로 체인이 이루어진다.

		filter-1 -> filter-3 -> filter-2 


--------- 래퍼 
	- 웹브라우저와 웹 컴포넌트 사이를 오가는 데이터에 변형을 가하기 위해서 래퍼 클래스를 추가로 구현해야 한다
	- HttpServletRequestWrapper 클래스는 HttpServletRequest 인터페이스를 구현한다
	- HttpServletResponseWrapper 클래스는 HttpServletResponse 인터페이스를 구현한다
	- 요청 래퍼 클래스, 응답 래퍼 클래스를 상속 받아 구현해서 컨테이너가 만든 request, response 인 것처럼 한다.


--------- 요청 래퍼 변형

	1. 요청 래퍼 클래스 상속받아 구현


	- MyRequestWrapper.java 
	
		public class MyRequestWrapper extends HttpServletRequestWrapper {

			HttpServletRequest request;
			public MyRequestWrapper(HttpServletRequest request) {
				super(request);
				// TODO Auto-generated constructor stub
				this.request = request; //컨테이너 만든 요청객체를 담아 놓든다
			}

			//파라미터 데이터를 모두 대문자로 만든다, 
			//웹컴포넌트에서 쓰는 request.getParameter("name") 객체가 이 메소드를 호출
			public String getParameter(String name){
				
				String value = request.getParameter(name);
				String newValue = null;
				if(value != null){
					newValue = value.toUpperCase();
				}
				
				return newValue;
						
			}
		}

	2. 필터 구현 , 1번에 만든 요청 래퍼를 doFilter 메소드에 대신 넣는다

	- MyrequestFilter.java
		public class MyrequestFilter implements Filter {
			..
			@Override
			public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
					throws IOException, ServletException {
				// TODO Auto-generated method stub

				
				MyRequestWrapper requestWrapper  = new MyRequestWrapper((HttpServletRequest)request);
				chain.doFilter(requestWrapper, response); //요청 래퍼를 웹 컴포넌트에 넘겨준다
			}
			..
		}

	3. web.xml에 필터 설정 
		<filter>
			<filter-name>myRequest-filter</filter-name>
			<filter-class>com.solgae.filter.MyrequestFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>myRequest-filter</filter-name>
			<url-pattern>/myRequest.jsp</url-pattern>
		</filter-mapping>

	4. 결과 확인
	- myRequest.jsp 
		- http://localhost:8080/myRequest.jsp?name=abc 호출

		<%=request.getParameter("name") %> // ABC 출력


--------- 응답 래퍼 변형 1
	1. 응밥 래퍼 클래스 상속받아 구현

	-MyResponseWrapper.java 

		public class MyResponseWrapper extends HttpServletResponseWrapper {
			HttpServletResponse mResponse;
			public MyResponseWrapper(HttpServletResponse response) {
				super(response);
				// TODO Auto-generated constructor stub
				this.mResponse = response;
			}
			@Override
			public void addCookie(Cookie cookie) {
				// TODO Auto-generated method stub
				super.addCookie(cookie);
				
				String name = cookie.getName();
				String value = cookie.getValue();
				String newValue = value.toLowerCase();
				Cookie newCookie = new Cookie(name, newValue);
				mResponse.addCookie(newCookie);
			}

			
		}


	2. 필터 구현 , 1번에 만든 응답 래퍼를 doFilter 메소드에 대신 넣는다
	- MyResponseFilter.java 

		public class MyResponseFilter implements Filter {

			..
			@Override
			public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
					throws IOException, ServletException {
				
				MyResponseWrapper responseWrapper = new MyResponseWrapper((HttpServletResponse)response);
				
				chain.doFilter(request, responseWrapper);//// 응답 래퍼를 웹 컴포넌트에 넘겨준다
			}

			..

		}

	3. web.xml에 필터 설정 
		<filter>
			<filter-name>myResponse-filter</filter-name>
			<filter-class>com.solgae.filter.MyResponseFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>myResponse-filter</filter-name>
			<url-pattern>/cookie.jsp</url-pattern>
		</filter-mapping>

	4.결과 확인
	- cookie.jsp

		한번 호출해서 쿠키 설정하고, 새로고침해서 쿠키값 확인하면 소문자로 변경된 값이 나온다.

		 <%
		    Cookie cookie = new Cookie("CART","Lemon, ORANGE");
		    response.addCookie(cookie);
		 %>
		${cookie.CART.value} <- lemon, orange

--------- 응답 래퍼 변형 2 (응답 body 문자열에서 일부분 변경)
1. 응답 래퍼 작성
- wordChangeResponseWrapper. java
public class wordChangeResponseWrapper extends HttpServletResponseWrapper {

	HttpServletResponse mResponse;
	PrintWriter mNewWriter;
	StringWriter mStrWriter;
	
	public wordChangeResponseWrapper(HttpServletResponse response) {
		super(response);
		this.mResponse = response;
	}
	@Override
	public PrintWriter getWriter() throws IOException {
		if(mNewWriter == null){
			mStrWriter = new StringWriter();
			mNewWriter = new PrintWriter(mStrWriter);
		}
		
		return mNewWriter;
	}
	
	//데이터 중 일부(강아지 -> 멍멍이)를 바꾼다
	public void modifyAndSend() throws IOException{
		String content = mStrWriter.toString();
		String newContent = content.replaceAll("강아지", "멍멍이");
		PrintWriter writer = mResponse.getWriter();
		writer.print(newContent);
	}
	

}

2. 응답 필터 작성
public class wordChangeResponseFilter implements Filter {
	
	..
	
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		wordChangeResponseWrapper responseWrapper = new wordChangeResponseWrapper((HttpServletResponse)response);
		
		chain.doFilter(request, responseWrapper); //응답객체를 쓰기 하지만, 임지 버퍼에 담은 임시 객체
		responseWrapper.modifyAndSend(); //이때 비로서 글자 바꾸고 , PrintWriter 객체로 쓴다
	}

	
	..

}

3. web.xml
	<filter>
		<filter-name>wordChangeResponse-filter</filter-name>
		<filter-class>com.solgae.filter.wordChangeResponseFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>wordChangeResponse-filter</filter-name>
		<url-pattern>/wordChange.jsp</url-pattern>
	</filter-mapping>

4. wordChange.jsp
	-원본 

	<!DOCTYPE html >
	<html>
	<head>
		<title>컨텐츠 글자 바꾸기 필터 실험</title>
	</head>
	<body>
		<p>
		우리집 강아지는 복슬 강아지<br />
		학교갔ㄷ 돌아오면 멍멍멍 <br />
		반갑다고 꼬리치며 멍멍멍 <br />
		</p>
		<p>
		우리집 강아지는 예쁜 강아지<br />
		어머니가 빨래 가면 멍멍멍<br />
		쫄랑쫄랑 따라가며 멍멍멍 <br />
		</p>
	</body>
	</html>

	- 호출 후 '강아지' -> '멍멍이' 로 모두 변경됨.


	<!DOCTYPE html>
	<html>
	<head>
		<title>컨텐츠 글자 바꾸기 필터 실험</title>
	</head>
	<body>
		<p>
		우리집 멍멍이는 복슬 멍멍이<br />
		학교갔ㄷ 돌아오면 멍멍멍 <br />
		반갑다고 꼬리치며 멍멍멍 <br />
		</p>
		<p>
		우리집 멍멍이는 예쁜 멍멍이<br />
		어머니가 빨래 가면 멍멍멍<br />
		쫄랑쫄랑 따라가며 멍멍멍 <br />
		</p>
	</body>
	</html>
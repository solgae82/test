지시자
<%@ page import="java.util.*" %>

선언문
<%! int y = 3; %>

스클립틀릿
<% String str= "스클립틀릿"; %>

표현식
<%=str%>

표준액션
<jsp:include page="foo.html" />

EL표현식
email : ${pageScope.email}


** 표준 액션 **

--------- Bean 표준액션 
	빈 규약에 맞는 클래스여야한다(인자 없는 생성자, private 멤버 , public 메소드 등)
	빈 규약이 뭔지 검색해볼 것!

	jsp 스크립트릿으로 서블릿 자바 흉내내면 안 됨..
	같은 jsp 파일에서 스클립트릿 변수와 표준액션 변수명이 같다면 같은 변수 2개 선언한 것임(변수 충돌)
	표준 액션도 서블릿 자바 코딩과 같다고 생각해야 함.(xml 내용이 서블릿 자바 코드로 변환 되므로..)
	(테스트 개고생 했음)

	class속성을 사용 + Bean이 없으면 내부적으로 자동으로 빈 객체를 만든다
		
	서블릿이나 java에서 만든 객체를 매핑하기도 하고, 매핑없이 jsp에서만 사용하면 해당 빈 객체를 만든다.
	매핑할게 있으면 대입해주고, 없느면 빈 객체를 만든다..
	기본적으로 자바빈 코딩을 xml형식으로 한다고 생각하자. 
	서블릿 + jsp 매핑관계의 예로 이해해보자.

	--------- 
	:TestServlet.java

		Employee p = new Employee();
		p.setName("대한민국");
		request.setAttribute("person", p); //person 키

		RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
		view.forward(request, response);

	:/test.jsp
	서블릿 setAttribute 이름이 "person" set했으므로 같은 이름으로 id 이름을 일치시킨다

		<jsp:useBean id="person" class="com.solgae.bean.Employee" scope="request"/>
		<jsp:getProperty name="person" property="name" /> // "대한민국"

	--------- property 이름
	빈 규약은 속성 이름과 관계없고, 메소드 이름과 관계있다.

	private String name1;

	public String getName() {
		return name1;
	}

	이런 Bean 이라면
		
	<jsp:getProperty name="person" property="name" /> (옳음)
	<jsp:getProperty name="person" property="name1" /> (틀림)

	jsp:getProperty 를 호출하고(get메소드를 호출하겠다는 것),
	person객체의  property 속성이 이름이 'name' 이므로 
	get + 'Name' 의 메소드를 호출한다 => person.getName()

	--------- 빈이 없을시 초기값 지정하기
	<jsp:useBean id="person" class="com.solgae.bean.Employee" scope="request">
		<jsp:setProperty name="person" property="name" /> // "대한민국"
	</jsp:useBean>

	--------- 다형성
	:Person.java
		public class Person {
			private String name;
			public String getName() {return name;	}
			public void setName(String name) {this.name = name;}
		}
	:Employee.java
		public class Employee extends Person {
			private int age;
			public int getAge() {return age;}
			public void setAge(int age) {this.age = age;}
		}

	- class 속성만 있을경우 
		빈이 없으면 하나 만든다.
		자바코드처럼 상식적으로 생각하면 된다.
		-------------(1)
				:TestServlet.java
			Employee p = new Employee(); 
			p.setName("대한민국");
			request.setAttribute("emp", p);
			
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		
		:test.jsp
			<jsp:useBean id="emp" class="com.solgae.bean.Person" scope="request"/>
			<jsp:getProperty name="emp" property="name" /> //대한민국
			해설: Person p1 = (Person) request.getAttribute("emp"); //부모형으로 업캐스팅이 가능하니까 당연히 사용가능

			<jsp:useBean id="emp" class="com.solgae.bean.Employee" scope="request"/>
			<jsp:getProperty name="emp" property="name" /> //대한민국
			해설 : Employee em1 = (Employee) request.getAttribute("emp"); //같은 참조형이므로 사용가능

		-------------(2)
		:TestServlet.java
			Person p = new Employee(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		:test.jsp
			<jsp:useBean id="person" class="com.solgae.bean.Person" scope="request"/>
			<jsp:getProperty name="person" property="name" /> //대한민국
			해설: Person p1 = (Person) request.getAttribute("person"); //같은 참조형이니까 사용가능

			<jsp:useBean id="person" class="com.solgae.bean.Employee" scope="request"/>
			<jsp:getProperty name="person" property="name" /> //대한민국
			해설 : Employee em1 = (Employee) request.getAttribute("person"); //원래 객체형으로 다운캐스팅 가능하므로 사용가능
		
		-------------(3)
		:TestServlet.java
			Person p = new Person(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		:test.jsp
			<jsp:useBean id="person" class="com.solgae.bean.Person" scope="request"/>
			<jsp:getProperty name="person" property="name" /> //대한민국
			해설: Person p1 = (Person) request.getAttribute("person"); //같은 참조형이니까 사용가능

			<jsp:useBean id="person" class="com.solgae.bean.Employee" scope="request"/> // (X) 에러
			<jsp:getProperty name="person" property="name" /> 
			해설 : Employee em1 = (Employee) request.getAttribute("person"); //당연히 대입불가!

		------------- 정리
		Person 객체가 일반 클래스라면,  클래스 속성에 사용할 수 있다.
		<jsp:useBean id="person" class="com.solgae.bean.Person" scope="request"/> (o)
		=> Person person = new Person(); 
		
		Person 객체가 추상클래스나 인터페이스이면, 클래스 속성에는 사용할 수 없다.(이럴때 type 속성이 필요하다)
		<jsp:useBean id="person" class="com.solgae.bean.Person" scope="request"/> (x)
		=> Person person = new Person(); // 추상클래스나 인터페이스는 객체로 만들 수 없다.

	- type + class 속성 
		:TestServlet.java
			Person p = new Employee(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		:test.jsp
			<jsp:useBean id="person" type="com.solgae.bean.Person" class="com.solgae.bean.Employee" scope="request" />
			: 아래 자바코드와 같다
			Person person = (Employee) request.getAttribute("person");

		- Person형이 추상클래스, 또는 인터페이스일 경우에는 type 속성을 써야한다(물론 일반 클래스도 type 사용가능하다)
		- type 이 있을경우 class는 type에 명시한 클래스를 상속 또는 구현한 클래스여야 함.(당연)
	
	- class 속성 없이 type만 사용할 경우 
		- type 속성은 빈을 자동으로 만들지 않는다.
		- 반드시 관계되는 빈이 존재해야한다(부모클래스나 해당클래스여야함. 없으면 에러)
		
		------------- (1)
		:TestServlet.java
			Person p = new Employee(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		
		:test.jsp
			<jsp:useBean id="person" type="com.solgae.bean.Person" scope="request"/>//(o)
			<jsp:getProperty name="person" property="name" /> //대한민국
			해설: Person p1 = (Person) request.getAttribute("person");
		------------- (2)
		:TestServlet.java
			Employee p = new Employee(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		
		:test.jsp
			<jsp:useBean id="person" type="com.solgae.bean.Employee" scope="request"/>//(o)
			<jsp:getProperty name="person" property="name" /> //대한민국
			해설: Employee p1 = (Employee) request.getAttribute("person");
		------------- (3)
		:TestServlet.java
			Person p = new Person(); 
			p.setName("대한민국");
			request.setAttribute("person", p);
	
			RequestDispatcher view = request.getRequestDispatcher("/test.jsp");
			view.forward(request, response);
		
		:test.jsp
			<jsp:useBean id="person" type="com.solgae.bean.Employee" scope="request"/>//(X)
			<jsp:getProperty name="person" property="name" /> //(x)
			해설: Employee p1 = (Employee) request.getAttribute("person"); // 에러

	**결론**
		class만 있을 경우
			class x = (class) request.getAttribute("n");
			if(x == null) class x = new class(); //없으면 같은형의 같은 객체 생성
		type + class 설정시
			type x = (class) request.getAttribute("n");
			if(x == null) type x = new class(); //없으면 같은형의 같은 객체 생성
		type 만 있을 경우
			type x = (type) request.getAttribute("n");
			//자동으로 안 만든다고...그래서 Bean이 꼭 무조건 있어야만 함.

--------- 다양한 입력

	표준액션으로 객체 만들고 스클립틀릿으로 넣기
	<jsp:useBean id="person" type="com.solgae.bean.Person" class="com.solgae.bean.Employee" scope="request"/>
	<%
		person.setName(request.getParameter("name"));
	%>

	표현식으로 넣기
	<jsp:useBean id="person" type="com.solgae.bean.Person" class="com.solgae.bean.Employee" scope="request"/>
	<jsp:setProperty name="person" property="name" value="<%=request.getParameter("name")%>" />

	EL로 넣기
	<jsp:useBean id="person" type="com.solgae.bean.Person" class="com.solgae.bean.Employee" scope="request"/>
	<jsp:setProperty name="person" property="name" value="${param.name}" />

	속성으로 넣기
	<jsp:useBean id="person" type="com.solgae.bean.Person" class="com.solgae.bean.Employee" scope="request"/>
	<jsp:setProperty name="person" property="name" param="name" />
	// param 속성이 지정되지 않으면 자동으로 프로퍼티와 같은 name 파라미터로 셋팅해준다
	<jsp:setProperty name="person" property="name"  /> 

	파라미터명과 일치하는 set파라미터에 자동 셋팅
	<jsp:setProperty name="person" property="*"  /> 


--------- 포함 및 제어 넘기기 표준액션

	인클루드
		<jsp:include page="include.jsp" />
		또는
		<jsp:include page="include.jsp">
			<jsp:param name="tiltle" value="대한민국"/>
		</jsp:include>

		include.jsp
		${param.titile} //대한민국


	제어 넘기기
		<jsp:forward page="next.jsp" />
		<jsp:forward page="next.jsp">
			<jsp:param name="next" value="하하" />
		</jsp:forward>

		next.jsp
		${param.next} //하하

--------- 기타 표준액션
애플릿 표준액션
	<jsp:plugin type="applet" code="Good.class" width="500" height="300"">
		<jsp:params>
			<jsp:param name="morning" value="good">
		</jsp:params>
	</jsp:plugin>


스클립트릿 표준액션
	<% int cnt = 0; %>
	위 아래가 같다
	<jsp:scriptlet>int cnt = 0;</jsp:scriptlet>

표현식 표준액션
	<%=cnt%>
	위 아래가 같다
	<jsp:expression>cnt</jsp:expression>

선언문 표준액션
	<%!
		public int add(int v1, int v2){return v1 + v2;}
	%>
	위 아래가 같다
	<jsp:declaration>
		public int add(int v1, int v2){return v1 + v2;}
	</jsp:declaration>

지시자 표준액션
	<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	위 아래가 같다
	<jsp:directive.page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"/>

	<%@ include file="footer.jsp" />
	위 아래와 같다
	<jsp:directive.include file="footer.jsp" />
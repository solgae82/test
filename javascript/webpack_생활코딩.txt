파일을 번들링하여 1개의 압축파일을 만드는 기술

#프로젝트를 node 플젝으로 만들어 준다

	mkdir test
	cd test
	npm init #현재 플젝을 node 프로젝트로 만든다 

#웹팩 설치
npm install -D webpack webpack-cli #현제 플젝 모듈에 설치

	(./node_modules 디렉토리에 관련 모듈들이 로컬 설치된다)

#번들링 파일 생성 (명령어로)
	mkdir ./public
	
	$ npx webpack --entry ./source/index.js --output-path ./public --output-filename other.js
	(번들링한 ./public/other.js 파일이 생성됨)

	번들링 된 other.js 파일을 해당 html 파일에서 쓴다
	<script src="./public/other.js"></script>

# 설정파일로 번들링 파일 생성

	플젝 디렉토리에 webpack.config.js 파일을 만들고

	- webpack.config.js

		const path = require('path');

		module.exports = {
		  entry: './source/index.js',
		  output: {
		    path: path.resolve(__dirname, 'public'),
		    filename: 'bundle.js',
		  },
		};

	- 번들링 파일 만들기
		$ npx webpack --config webpack.config.js 
		
		또는 (약속된 이름인 webpack.config.js 로 설정파일을 만들었다면 )
		
		npx webpack
		
		하면 ./public 에 bundle.js 파일이 만들어진다..

		만들어진 번들 파일을 아래처럼 가져와서 쓴다
		<script src="./public/bundle.js"></script>

# webpack.config.js 파일 의 mode 속성
	
	develpment, production, none 모드가 있다.

	- webpack.config.js
		const path = require('path');
		module.exports = {
			  mode : 'develpment', // <= mode 설정
			  entry: './source/index.js',
			  output: {
			    path: path.resolve(__dirname, 'public'),
			    filename: 'bundle.js',
			  },
		};

	번들링한 소스가 develpment 는 개발모드라서 조금 보기 편하게, 
	production은 최대한 압축형식으로 되어 있다.
	none 은 디폴트 셋팅으로 압축하는데 자세한 차이는 모르겠다.
	기본값은 'production' 이다

#loader
	css 파일도 번들링 해보자

	$ npm install --save-dev style-loader css-loader

	./source/style.css 
		body{
			background-color: powderblue;
			color: tomato;
		}

	- webpack.config.js
		
		const path = require('path');
		module.exports = {
		  entry: './source/index.js',
		  output: {
		    path: path.resolve(__dirname, 'public'),
		    filename: 'bundle.js',
		  },
		  /* 로더 모듈 추가 */
		  module:{
			rules:[
			   {
				test:/\.css$/,
				use:[
					'style-loader',
					'css-loader'
				]
			   }
			]
		  }
		};

	- 번들링 만들기
		$ npx webpack

		번들링 된 후 ./source/index.js 이 생성되고
		./index.html을 실행시키면 
		<head>
			<style>
				body{
					background-color: powderblue;
					color: tomato;
				}
			</style>
		</head>

		동적으로 style 태그 내용이 삽입되고 css 가 적용된다

#output

	엔트리 파일을 두개 만들어서 두개의 번들링.js를 만들고 싶다

	index.js => index_bundler.js
	about.js => index_bundler.js

	
	- webpack.config.js

		const path = require('path');
		module.exports = {
		  entry:{
			  /* 두개의 엔트리 파일을 만든다*/
			  index: './source/index.js', 
			  about: './source/about.js'
			  

		  },
		  output: {
		    path: path.resolve(__dirname, 'public'),
		     /* entry 속성 객체의 속성인, index, about 을 접두사로 두개의 파일 제작*/
		    filename: '[name]_bundle.js'
			
		  },
			module:{
				rules:[
					{
						test:/\.css$/,
						use:[
							'style-loader',
							'css-loader'
						]
					}
				]
			}
		};

	- 번들링 만들기
		
		$ npx webpack
		
		public 디렉토리에 두개의 번들링 파일이 만들어진다.
			index.js => index_bundler.js
			about.js => index_bundler.js

#플러그인 

	각 플러그인마다 사용법이 다르다
	걍 이런게 있다는 정도만 인식하면 될 듯하다

	

# --watch 옵션

	npm webpack --watch 

	webpack 이 ./source 디렉토리의 자원을 감시하다가 변경사항이 발생되면 
	자동으로 컴파일해주는 옵션이다..

#대충결론
	node 프로젝트를 만들어서 
	npm을 이용해 수많은 라이브러리들을 자유롭게 설치해서 쓰고,
	웹프로그램 기술로 import 시키기 위해서
	webpack 같은 기술을 쓴다.

	수많은 서버사이드 구현 기술에 종속 되지 않기에 node 프로젝트의 npm등을 이용하는 것이다.


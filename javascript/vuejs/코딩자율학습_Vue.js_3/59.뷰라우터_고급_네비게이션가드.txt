네비게이션가드
	라우팅 과정 중 특정 전환 과정을 가로채 사용자 정의 로직을 실핼 할 수 있게 해주는 훅.
	컴포넌트 생명주기 보다 먼저 실행되는 훅이다.
방식 
	전역가드, 라우트별 가드, 컴포넌트 내 가드

1) 전역 가드
	: 모든 라우트에 적용되는 전역 방식
	: 매개변수 
		- to (이동하려는 라우트 정보가 담긴 객체)
		- from (이동 전 라우트 정보가 담긴 객체)
		- next (라우트 전환 함수, true[전환], false[전환 안함])
		- failure (전환 정상실행[undefined], 전환 실패[에러 객체])
		
		
		
	: 전환 시점 (3개)
		- 라우트 전환 전 : beforeEach(to, from, next){}
		- 라우트 전환 확정 전 : beforeResolve(to, from, next){}  
		- 라우트 전환 후 : afterEach(to, from, failure){}

	(로직 처리후 반드시 전환여부 next(true/false)를 호출해줘야 한다)
		대개, next() 를 쓰지 않고 아래 처럼 전환 여부를 결정 할 수도 있다
		단, 매개변수에 next 매개변수를 빼야 한다.
		(next 매개변수가 지원되지 않는 함수가 있는데, return true/false 로 대신한다)
		
		ex) 
		beforeEach(to, from){ // 마지막 next 매개변수 인수는 뺀다
			.. 처리 로직 후 전환 여부 
			retunr true;	// next(), next(true);
			return false;	// next(false);
			return '/about';
			return {name :'/user'} 
		}
2) 라우트별 가드
	: 특정 라우트에 설정하는 방식
	: 로직 처리 후 전환 여부 next(true/falseL)를 호출해줘야 한다
	
		- beforeEnter(to , from, next){}
		
3) 컴포넌트 내 가드
	컴포넌트에 라우트 전환 훅을 사용할 수 도 있다.
	
	(옵션스 API)
		- 라우터 전환전 : beforeRouterEnter(to, from, next)
		- 라우터 (동적 세그먼트) 변경시 : beforeRouteUpdate(to, from, next) 
		- 라우터 떠나기 전 : beforeRouteLeave(to, from, next)
	
	(컴포지션 API)
		- 라우터 (동적 세그먼트) 변경시 : onBeforeRouteUpdate(to, from, next) 
		- 라우터 떠나기 전 : onBeforeRouteLeave(to, from, next)
		
		
아래 예제는 옵션스 API 사용이다.(굳이 컴포지션 API까지 할 필요는 없는 듯 하여..)	
----------//src/router/index.js

..
	{
            path : '/user',
            name : 'user_home',            
            component :()=> import('@/view/UserView.vue'),
	    
	    /* 라우트별 가드 */
            beforeEnter : (to, from, next)=>{
                console.log("라우트별 가드 : beforeEnter");
                next();
            }
        },

..

	/* 전역 라우트 가드 */
	router.beforeEach((to, from, next)=>{
	    
	    console.log('전역:beforeEach');
	    next(true);
	});

	router.beforeResolve((to, from)=>{

	    console.log('전역:beforeResolve');
	    return true; // next(), next(true);
	});

	router.afterEach((to, from, failure)=>{
	    console.log('전역:afterEach',',실패객체=>',failure);
	    
	});

---------// view/UserView.vue

	<script>
	export default{

	    /* 컴포넌트 내 라우트 가드 */
	    beforeRouteEnter(to,from,next){
		console.log('컴포넌트 가드: beforeRouteEnter');
		next((vm)=>{ //

		    console.log(vm); // 마운트 후 컴포넌트 접근 로직
		});
	    },
	    beforeRouteUpdate(to, from){ //전환 로직 없다
		console.log("컴포넌트 가드(동적 세그먼트 변경): beforeRouteUpdate");
	    },
	    beforeRouteLeave(to, from){ // next() 없고, 대신 true/false로 대신 한다.
		console.log('컴포넌트 가드: beforeRouteLeave');
		return true; // 전환 true, 전환불허 : false
	    },
	    
	    //컴포넌트 생명주기 메소드
	    beforeCreate(){
		console.log('beforeCreate');
	    },
	    data(){
		return {
		    aa : 1
		}
	    }
	}
	</script>
	<template>
	    <h3>User View</h3>
	</template>

--------- 출력

url : /user

	전역:beforeEach
	라우트별 가드 : beforeEnter
	컴포넌트 가드: beforeRouteEnter
	전역:beforeResolve
	전역:afterEach ,실패객체=> undefined
	beforeCreate
	beforeRouteEnter() 내 next(vm)=> Proxy(Object) {…}
	
--------- 결론
 니미 시발 이런 개좃지랄을 왜 하는지 모르겠다.
 컴포넌트 생명주기만 있으면 되지..뭔 개니미
 외울 것만 존나게 많게 시팔..
 그냥 필요할때 레퍼런스 참조하면 되겠다
--------- 기본 watch 사용법
<script>
export default{

  data(){
      return{
        count: 0,
        arr:[0,1,2],
        obj: {name : 'chulsu',age: 20}
      }
  },

  watch:{
    count(newValue, oldValue){
      console.log(`count=>변경된 값: ${newValue}, 이전 값: ${oldValue}`); //기본값 속성은 기본 watch가 작동한다
    },
    arr(newValue, oldValue){
      console.log(`arr=>변경된 값: ${newValue}, 이전 값: ${oldValue}`); //배열값 속성은 기본 watch가 작동하지 않는다
    },
    obj(newValue, oldValue){
     console.log(`obj=>변경된 값: ${newValue}, 이전 값: ${oldValue}`); //객체값 속성은 기본 watch가 작동하지 않는다
   }
  }
}
</script>

<template> 
  <h2>{{  count }}</h2>
  <h2>{{  arr }}</h2>
  <h2>{{  obj }}</h2>
  <button @click="count++">카운터 변경</button>
  <button @click="arr.push(3)">배열 변경</button>
  <button @click="obj.age++">객체 변경</button>
 </template>
<style>
</style>

---------
기본값은 watch가 작동하지만, 배열 or 객체는 watch가 작동하지 않는다.

--------- 깊은 wathc 사용법
<script>
export default{

  data(){
      return{
        count: 0,
        arr:[0,1,2],
        obj: {name : 'chulsu',age: 20}
      }
  },

  watch:{
    count(newValue, oldValue){
      console.log(`count=>변경된 값: ${newValue}, 이전 값: ${oldValue}`); //기본 값 watch 로그만 작동한다
    },
    arr:{
      handler(newValue, oldValue){
        console.log(`arr=>변경된 값: ${JSON.stringify(newValue)}, 이전 값: ${JSON.stringify(oldValue)}`); 
      },
      deep: true, /* 계산 속성이 변경될 때마다 콜백함수 호출 여부 */
      immediate: true /*초기 렌더링시 콜백 함수 호출 여부 */
    },
    obj:{
      handler(newValue, oldValue){
        console.log(`obj=>변경된 값: ${JSON.stringify(newValue)}, 이전 값: ${JSON.stringify(oldValue)}`); 
      },
      deep: true, /* 계산 속성이 변경될 때마다 콜백함수 호출 여부 */
      immediate: true /*초기 렌더링시 콜백 함수 호출 여부 */
    }
  }
}
</script>

<template> 
  <h2>{{  count }}</h2>
  <h2>{{  arr }}</h2>
  <h2>{{  obj }}</h2>
  <button @click="count++">카운터 변경</button>
  <button @click="arr.push(3)">배열값 변경</button>
  <button @click="obj.age++">객체값 변경</button>
  <button @click="obj ={name:'동이',age:30}">객체 변경</button>
 </template>
<style>
</style>
---------
처음 실행시 'immediate: true' 설정에 의해서 콜백함수 실행된다.
	arr=>변경된 값: [0,1,2], 이전 값: undefined
	obj=>변경된 값: {"name":"chulsu","age":20}, 이전 값: undefined

이후 [배열값 변경],[객체값 변경] 버튼 실행 시 마다 'deep: true' 설정에 의해 콜백함수 실행된다.
	arr=>변경된 값: [0,1,2,3], 이전 값: [0,1,2,3]
	obj=>변경된 값: {"name":"chulsu","age":21}, 이전 값: {"name":"chulsu","age":21}
	
	newValue, oldValue 값이 같은 이유
	: arr, obj 가 다른 객체로 교체되지 않는 한, newValue와 oldValue는 같습니다.
        (둘 다 동일한 객체를 참고하고 있기 때문입니다!)
	
	
	그래서 다음 [객체 변경] 버튼을 실행하면 , 
	객체 자체가 변경되면서 newValue와 oldValue가 제대로 표현됩니다 
	
		<button @click="obj ={name:'동이',age:30}">객체 변경</button>
		
		출력: 
		obj=>변경된 값: {"name":"동이","age":30}, 이전 값: {"name":"chulsu","age":20}
	
옵션 : 
	deep : true/false => 계산 속성이 변경될 때마다 콜백함수 호출 여부
	immediate: true/false => 초기 렌더링시 콜백 함수 호출 여부
	flush : pre/sync/post =>콜백함수 실행타이밍, [pre:뷰 반영 전호출,sync:뷰반응과 동기 호출, post:뷰 반영 후 호출]
	once : true/false => Vue3.4 이상에 추가된 속성, true면 한번만 watch 한다 
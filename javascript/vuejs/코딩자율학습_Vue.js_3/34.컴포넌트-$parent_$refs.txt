---------
1. 부모컴포넌트 -> 자식 컴포넌트 접근
	<FirstChild ref="childRef"/> 
	this.$refs.childRef.[data, computed , methods] 
2. 자식컴포넌터 -> 부모 컴포넌트 접근
	this.$parent.[data, computed , methods]
	
※ 이런 접근 방법이 있다는 것만 알고 쓰지는 말아라
---------
App.vue
	<script>
	import FirstChild from './components/FirstChild.vue';

	export default{
	 
	  components : {
	    FirstChild
	  },
	  data(){
	      return{
		  parentNum : 5
	      };
	  },
	  computed : {
	      parentNumOddAdd(){
		  return this.parentNum % 2 === 0 ? '짝수' : '홀수';
	      }
	  },
	  methods :{
	      getParentNum(){
		  return this.parentNum;
	      }
	  },

	  mounted(){
	    console.log("child:"+ this.$refs.childRef.childNum) ; // child:2
	    console.log("child:"+ this.$refs.childRef.childNumOddAdd) ; //child:짝수
	    console.log("child:"+ this.$refs.childRef.getChildNum()) ; //child:2
	  }
	  
	}

	</script>

	<template>
	  <div>    
	    <h1>h1 태그</h1>
	  </div>
	  
	  <FirstChild ref="childRef"/> 
	</template>

	<style>
	</style>

FirstChild.vue

	<script>
	    
	    export default{
		data(){
		    return{
			childNum : 2
		    };
		},
		computed : {
		    childNumOddAdd(){
			return this.childNum % 2 === 0 ? '짝수' : '홀수';
		    }
		},
		methods :{
		    getChildNum(){
			return this.childNum;
		    }
		},

		mounted(){
		    console.log("App:"+ this.$parent.parentNum) ; // App:5
		    console.log("App:"+ this.$parent.parentNumOddAdd) ; // App:홀수
		    console.log("App:"+ this.$parent.getParentNum()) ; // App:5
		}
	    }
	</script>
	<template>
	    <div>
		<h2>서브 컴포넌트</h2>
	    </div>    
	</template>
	<style>
	    h2{color: blue;}
	    p{color: green;}
	</style>

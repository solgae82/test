MVVM 
	model + view + model view

뷰특징
	컴포넌트 기반 프레임워크
	앵귤러의 양방향 데이터 바인딩(Two-way Data Bainding)
	리액트의 단방향 데이터 흐름(One-way Data Flow) : 상위 컴포넌트 > 하위 컴포넌트
	리액트의 가상 돔 (Virtual DOM) 방식 : 빠른 화면 렌더링

뷰 인스턴스 
	var app = new Vue({
		el: "#app",
		data:{message:'Hi'}
		methods:{greeting : function(){alert(this.message);}}
		..
	});

뷰 인스턴스 생명주기(Life Cycle)
	8개의 라이프사이클이 있다
	각 Life cycle에서 실행되는 커스텀 로직을 'Life cycle hook' 이라고 한다.

	인스턴스 생성
		beforeCreate
		created
		beforeMount
		mounted
	인스턴스 화면에 부착
		beforeUpdate
		updated
	인스턴스 내용 갱신
		beforeDestroy
		destroyed
	인스턴스 소멸

뷰 컴포넌트 

	- 전역등록
	<div id="app">
		<button>전역 컴포넌트 등록</button>
		<my-global-component></my-global-component>
	</div>
	<script>
		Vue.component('my-global-component',{
			template: '<div>전역 컴포넌트가 등록되었어요</div>'
		});
		new Vue({
			el: "#app"
		});
	</script>
	
	- 지역컴포넌트 등록
	지역컴포넌트는 등록된 인스턴스의 범위에서만 작동한다.

	<div id="app">
		<button>지역 컴포넌트 등록</button>
		<my-local-component></my-local-component>
	</div>
	<script>

	     var cmp = {
	       template: '<div>지역 컴포넌트 등록</div>'
	     };
	      new Vue({
		el: "#app",
		components: {
		  'my-local-component': cmp
		}
	      });
	</script>

뷰컴포넌트 통신

	각 컴포넌트별로 유효범위가 있기 때문에,
	서로 통신을 위해서는 vue에서 지정한 방식으로만 데이터 통신 가능하다

	1. 상위컴포넌트 >> 하위 컴포넌트 [데이터] 전달
		하위 컴포넌트 props 속성명을 지정하고 
		그 속성명으로 상위 컴포넌트의 데이터 값을 바인딩 한다.

		<div id="app">
		    <child-component1 v-bind:pdata="msg" ></child-component1>

		</div>
		<script>
			Vue.component('child-component1',{
				props : ['pdata'],
				template : '<p>상위에서 받아온 값 : {{pdata}}</p>'
			});


			new Vue({
				el: "#app",
				data:{
				  msg : '야 놀자!'
				}

			});
		</script>

	2. 하위 컴포넌트 >> 상위 컴포넌트 로 이벤트 전달

		<div id="app">
			<child-component1 v-on:show-alert="printTxt" ></child-component1>
		</div>
		<script>

			Vue.component('child-component1',{
				template : '<div><button v-on:click="showLog">부모 컴포넌트호출</button></div>',
				methods:{
				  showLog : function(){
				    this.$emit('show-alert');
				  }
				}
			});


			new Vue({
				el: "#app",
				data:{
				  msg : '야 놀자!'
				},
				methods:{
				  printTxt: function(){
				    alert('부모 메서드 호출:' + this.msg);
				  }
				}

			});
		</script>

	
	- 같은 레벨 컴포넌트들의 통신
		뷰는 항상 데이터를 상위에서 하위 컴포넌트로만 데이터를 전달해야 하므로,
		공통 상위 컴포넌트로 이벤트 전달 > 공통 상위 컴포넌트에서 2개의 하위 컴포넌트 props로 내려 보내는 
		방식으로 통신해야 한다.

	3. 관계 없는 컴포넌트 간 통신 - 이벤트버스 방식
		
		<div id="app">
			<child-component></child-component>
		</div>

		
		<script>

			var eventBus = new Vue(); //이벤트 버스 :  인스턴스 생성

			Vue.component('child-component',{
				template : '<div><button v-on:click="showAlert">이벤트버스 통신</button></div>',
				data(){ //컴포넌트는 이런 형식으로 해야함
				  return{
				      msg : '야 놀자!'
				  }

				},
				methods:{
				  showAlert : function(){
				    eventBus.$emit('show-alert' ,this.msg); //이벤트 버스: 이벤트 발생
				  }
				}
			});


			var app = new Vue({
				el: "#app",
				data:{
				  msg : '전달 메시지'
				},
				created:function(){ //인스턴스 life cycle
					//이벤트 등록
					eventBus.$on('show-alert' , function(value){
					   alert(app.msg + ':' + value);
					});
				}

			});
		</script>
1. jsonp 기본 원리
	JSONP란 CORS가 활성화 되기 이전의 데이터 요청 방법으로, 
	다른 도메인으로부터 데이터를 가져오기 위해 사용하는 방법입니다.
	JSONP는 http에서 https는 호출가능하지만, https에서 http는 호출이 불가능하다. 
	(This request has been blocked; the content must be served over HTTPS.)

	
	----------- http://localhost:3000
	  <script>
	    function callbackB(json){
		alert('이름은 '+json.name +'이고, 나이는 ' + json.age +'입니다');
	    }
	      
	  </script>
	  <script src="http://localhost:8080/web/jsonp.jsp?callback=callbackB"></script>

	----------- http://localhost:8080/web/jsonp.jsp
	<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<%
		String callbackName = request.getParameter("callback");
	%>
	<%=callbackName %>({name:'동지',age:27}); <!-- callbackB({name:'동지',age:27}); -->


	------------
	: 호출 하면 자바스크립트 alert 창으로  '이름은 동지이고, 나이는 27입니다' 출력
			
	위와 같이 다른 도메인의 값을 호출하고 싶을때 쓰는 편법 또는 꼼수라고 할 수 있다


2. Jquery 에서의 사용법
	$.ajax 메소드와 $.getJSON 설정법이 있다.
	jsonp 의 기본원리를 응용한 약속된 프로토콜을 맞춰야 한다

		- 요청시 ?callback=? 형태로 갈 것이고 callback 값은 jquery가 알아서 설정한다 
		- 서버에서는 받은 'callback' 값을 응답형식 자바스크립트함수명으로 출력해야한다
		- 응답형식은 '자바스크립트함수명({});' 형태를 가져야 한다
			ex) callback({..데이터});
		- 외부 콜백함수는 jsonp 기본원리의 함수처럼 객체인수 한개만 받는다
			myCallback({..데이터});
		

	----------- http://localhost:8080/web/jsonp.jsp
	<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<%
		String callbackName = request.getParameter("callback");
	%>
	<%=callbackName %>({name:'동지',age:27}); <!-- callbackB({name:'동지',age:27}); -->

	----------- http://localhost:3000
	<button type="button">jsonp 실행</button>
	  <script>

	    /**
	    * 콜백함수 설정
	    */
	    function callbackB(json) {
	      alert('이름은 ' + json.name + '이고, 나이는 ' + json.age + '입니다');
	    }

	  </script>
	  
	  <script>
	    
	    /**
	    1. $.getJSON 설정법 
	    
	    $.getJSON 사용시 ?callback=? 를 url 붙여주면 jsonp가 작동한다
	    요청 url에 GET 파라미터로 '?callback=?' 붙여서 하면 jsonp형태를 하겠다는 약속이다.(다른 변수명으로 변경불가)
	    jquery가 변수값을 자동으로 callback=jQuery360021315628678172427_1717623853529 형태로 설정 후 요청한다
	    */
	    
	    $(function () {
	
	      
	      $.getJSON("http://localhost:8080/web/jsonp.jsp?callback=?", /* GET 파라미터 붙여준다 ?callback=? */
		function (json) {

		  //jqeury가 반환된 'callback({..});' 텍스트 중 json 인수 형태인 '{..}' 텍스트만 json 객체로 변환함. 
		  //예) jQuery360021315628678172427_1717623853529({name:'동지',age:27}) => {name:'동지',age:27}

		  console.log('성공 - ', json); //{name:'동지',age:27}
		  
		  //callbackB(json); <= 이렇게 호출 하거나 여기다 로직 구현하거나...
		}
	      );
	    });

	    /**
	    2. $.ajax 설정
	    
		- 설정한 callbackB 함수도 실행할 수 있고, ajax 콜백함수 실행도 가능 (2개 다 설정하면 2번 실행됨)
		- jquery가 변수값을 자동으로 callback=jQuery360021315628678172427_1717623853529 형태로 설정 후 요청한다
		옵션:
		   [필수] dataType : 'jsonp' <= 꼭 설정해줘야함
		   [옵션] jsonp : 'myCallBack' <= jsonp 디폴트 GET 파라미터변경, callback=? 을 myCallBack=?
		   [옵션] jsonpCallback : 'callbackB' <= 외부 함수로 콜백을 처리할때 지정, 호출 우선순위는 1번이다
	    */ 

	    $('button').click(function () {
	      $.ajax({
		url: "http://localhost:8080/web/jsonp.jsp",
		dataType: 'jsonp', /* <- 요기 설정 */
		/* jsonp: 'myCallBack', */ /* (선택사항) 콜백변수명 변경가능[callback(디폴트)],  예) ?myCallBack=? */
		/*jsonpCallback: "callbackB",*/ /*(선택사항) 1. 이 부분을 넣어주면 1차로 콜백함수가 실행된다*/
		success: function (json) {
		  console.log('성공 - ', json);/* 2. 1차 콜백함수 실행후 이 부분도 실행된다*/
		  //callbackB(json); <= 이렇게 호출 하거나 여기다 로직 구현하거나...
		},
		error: function (xhr) {
		  console.log('실패 - ', xhr);
		}
	      });
	    });
	  </script>
	
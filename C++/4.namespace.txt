	#include <iostream>

	/*
	 namespace 사용
	 '::' scope resolution operation(범위 지정 연산자)
	*/
	namespace BestComImpl{
		void SimpleFunc(void) {
			std::cout << "BestCom 의 함수" <<std::endl;
		}
	}

	namespace ProgComImpl {
		void SimpleFunc(void) {
			std::cout << "ProgCom 의 함수 " << std::endl;
		}
	}

	int main(void) {

		BestComImpl::SimpleFunc(); // BestCom 의 함수
		ProgComImpl::SimpleFunc(); // ProgCom 의 함수

		return 0;
	}

-------------------// namespace 함수 선언 / 구현 분리
	#include <iostream>

	namespace BestComImpl {
		void SimpleFunc(void);

	}

	namespace ProgComImpl {
		void SimpleFunc(void);
	}

	int main(void) {

		BestComImpl::SimpleFunc(); // BestCom 의 함수
		ProgComImpl::SimpleFunc(); // ProgCom 의 함수

		return 0;
	}

	void BestComImpl::SimpleFunc(void) {
		std::cout << "BestCom 의 함수" << std::endl;
	}

	void ProgComImpl::SimpleFunc(void) {
		std::cout << "ProgCom 의 함수 " << std::endl;
	}
	
-------------------// 같은 네임스페이스 접근

	#include <iostream>

	namespace BestComImpl {
		void SimpleFunc(void);

	}

	namespace BestComImpl {
		void HelloFunc(void);

	}

	namespace ProgComImpl {
		void SimpleFunc(void);
	}

	int main(void) {

		BestComImpl::SimpleFunc(); 
		
		/*
		BestCom 의 함수
		BestCom(Hello) 의 함수
		BestCom(Hello) 의 함수
		ProgCom 의 함수
		*/
		return 0;
	}

	void BestComImpl::SimpleFunc(void) {
		std::cout << "BestCom 의 함수" << std::endl;
		BestComImpl::HelloFunc();
		HelloFunc(); // 같은 이름 공간은 namepasce 사용 안해도 된다.
		ProgComImpl::SimpleFunc();// 다른 이름 공간
	}

	void BestComImpl::HelloFunc(void) {
		std::cout << "BestCom(Hello) 의 함수" << std::endl;
	}

	void ProgComImpl::SimpleFunc(void) {
		std::cout << "ProgCom 의 함수 " << std::endl;
	}
	
-------------------// 중첩 namespace
	#include <iostream>

	namespace ParentImpl {
			
		int i = 11;

		namespace SubFirst {

			int i = 22;

			namespace SubSecond {
				int i = 33;
			}
		}

	}

	int main(void) {

		std::cout << ParentImpl::i << std::endl;	// 11
		std::cout << ParentImpl::SubFirst::i << std::endl; // 22
		std::cout << ParentImpl::SubFirst::SubSecond::i << std::endl; //33
		return 0;
	}

------------------- using 사용

	#include <iostream>

	namespace Hybrid {
		int num = 10;
		void Hello(void){
			std::cout <<"Hello World!" << std::endl;
		}
	}

	int main(void) {

		using Hybrid::num;
		using Hybrid::Hello; // Hybrid::Hello 를 이름공간 없이 사용하겠다는  , 명시적 선언
				
		std::cout << num << std::endl; // 10
		Hello(); // Hello World!
		
		
		return 0;
	}
	
-------------------// 전역 using 
	#include <iostream>

	// using namespace std; //std 에 선언된 모든 것에 namespace 생략 가능
	using std::cout;
	using std::endl;

	int main(void) {

		cout << "Hello World!" << endl; // Hello World!
			
		return 0;
	}
	
--------------------// namespce 별칭 지정
: 함수 안이나 전역 모두 가능한다

	#include <iostream>

	using namespace std;

	namespace ParentImpl {

		int i = 11;

		namespace SubFirst {

			int i = 22;

			namespace SubSecond {
				int i = 33;
			}
		}

	}

	namespace second = ParentImpl::SubFirst::SubSecond;  //전역 별칭 지정

	int main(void) {

		//namespace second = ParentImpl::SubFirst::SubSecond; //지역 별칭 지정 
		
		cout << "Hello World!: "<< second::i << endl; // Hello World!: 33
			
		return 0;
	}
	
------------------- 전역 접근 ::
	#include <iostream>

	int num = 10;

	int main(void) {

		int num = 20;

		std::cout << "지역 num: "<< num << std::endl; // 20
		// ::num 은 전역을 의미
		std::cout << "지역 num: " << ::num << std::endl; // 10
			
		return 0;
	}
1. JoinPoint
	: AOP(aspect oriented programing)를 적용 대상 가능 메소드들
	
2. Pointcut
	: joinpoint 메소들 중에 필터링하여 실제 aop를 적용할 메소드
	
3. Advice
	: 횡단 관심 공통 코드들(독립된 클래스의 메소드)
	- Before
	- After , After Returning, After Throwing
	- Around
	
4. Weaving(짜집기)
	: pointcut 지정 메소드가 실행될때, Advice 메소드 코드가 삽입되는 과정.
	삽입 방식 :
		- compiletime weaving (컴파일타임에 짜집기 되는 방식)
		- loadingtime weaving (로딩타임에 짜집기 되는 방식)
		- runtime weaving (런타임에 짜집기 되는 방식)
	※ 스프링에서는 runtime weaving 방식만 지원한다
	
5. Aspect 또는 Advisor
	: pointcut 에 advice를 삽입하는 설정을 aspect라고 한다
	<aop:aspect /> : 기본 설정 태그
	<aop:advisor /> : aspect 태그가 아닌 방식으로 할때 이 태그로 설정한다(예: 트랜잭션등)

	설정예제:
	<bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
		<aop:aspect ref="log">
			<aop:after pointcut-ref="allPointcut" method="printLog"/>
		</aop:aspect>
	 </aop:config>

6. 포인트 컷 표현식
	execution( * com.springbook.biz..*Impl.get*(..) )
		- * : 리턴타입
		- com.springbook.biz.. : 패키지 경로
		- *Impl : 클래스명
		- get*(..) : 메소드명 + 매개변수
	
	1) 리터타입 지정
		* :  모든 리턴타입 허용
		void : 리턴타입이 void인 메소드 선택
		!void : 리턴타입이 void가 아닌 메소드 선택
		
	2) 패키지 지정
		*  : 모든
		.. : 모든 이하
		
	3) 클래스 지정
		BoardServiceImpl : BoardServiceImpl 클래스만 선택
		*Impl : 클래스 이름이 Impl로 끝나는 클래스만 선택
		BoardService+ : 
			- 일반 클래스 이름에 '+'가 붙으면 해당 클래스 이름을 확장한 모든 자손 클래스 선택
			- 인터페이스 이름에 '+'가 붙으면 해당 인터페이스를 구현한 모든 클래스 선택
	 4) 메소드 + 매개변수 지정
		*(..) : 모든 메소드 이름 + 매개변수 없거나, 1개이상 있거나
		get(..) : get으로 시작하는 메소드 이름 + 매개변수 없거나, 1개이상 있거나
		*(com.springbook.user.UserVO) : 모든 메소드 이름 + com.springbook.user.UserVO 매개변수 1개  
		*(!com.springbook.user.UserVO : 모든 메소드 이름 + com.springbook.user.UserVO 가 아닌 매개변수 1개  
		*(Integer , ..) : 모든 메소드 이름 + 첫번째 매개변수가 Integer , '..' 매개변수가 없거나 있는 (결론 1개 이상)
		*(Integer , *) : 모든 메소드 이름 + 첫번째 매개변수가 Integer , '*' 매개변수가 1개 이상 (결론 2개 이상)
		
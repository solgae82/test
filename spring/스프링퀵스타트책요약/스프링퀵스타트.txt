스프링 컨테이너 종류

	BeanFactory : bean 생성 관리하는 가장 기본적인 컨테이너, 지연(lazy-loading) 로딩만 제공 , (쓸 일 거의 없음)
	ApplicationContext : BeanFactory 상속, 트랜잭션 관리, 메시지 기반 다둑어 처리등 제공. 즉시 로딩(pre-loading) 기본제공
		- 대부분의 스프링 프로젝튼는 ApplicationContext 를 확장한 컨테이너를 사용한다,
		ApplicationContext 구현 컨테이너 
			- GenericXmlApplicationContext : 파일 시스템이나 클래스 경로에 있는 XML 설정 파일을 로딩하여 구동하는 컨테이너
			- XmlWebApplicationContext : 웹 기반 스프링 애플리케이션을 개발할 때 사용하는 컨테이너
Bean 클래스
	- bean 생성 클래스는 디폴트 생성자가 있어야 한다.(컨테이너가 기본적으로 디폴트 생성자를 호출해서 bean을 만든다)
	- 새로운 생성자로 호출할 수도 있다
		<bean id="samsung" class="polymorphism.SamsungTV">
			<constructor-arg ref="sony"></constructor-arg>
		</bean>
		<bean id="sony" class="polymorphism.SonySpeaker" />

XML beans 태그들	
	- 크게 4가지 태그
		bean, description, alias, import 등
	import 태그 
		xml 파일 분할 역할
		예)
			<beans>
				<import resource="context-datasource.xml" />
				<import resource="context-transaction.xml" />
				..
			</beans>
	bean 태그 속성
		- context.xml
			<bean id="tv" name="test,test2;test3" class="polymorphism.SamsungTV"></bean>
			<alias name="test3" alias="atv"/>
		- test.java
			AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext.xml");
			TV tv = (TV)factory.getBean("atv"); //tv, test, test2, test3, atv 가능

		- id ="my" : 태그 대표 호출명
			ex) f.getBean("my");
		- name ="my,my2;m3" : id처럼 호출 가능, ',' 쉼표 또는 ';'세미콜론 구분자로 복수명 지정 가능
			ex) f.getBean("m3");
		- init-method = "initMethod" : 객체 생성 직후 호출 메소드명
		- destroy-method="destroyMethod" : 객체 삭제 직전 호출 메소드명
		- lazy-init="true" : 요청시 생성(true/false[기본])
		- scope="singleton" (기본) scope 속성 설정하지 않으면 singleton 으로 작동한다.
			"prototype" (요청시마다 생성)
				- prototype으로 설정하면 detryo-method를 호출 하지 않는다.
				(컨테이너가 객체 제거를 담당하지 않고, GC가 제거 하게 된다)

IoC (제어의 역행)
	Dependency Lookup 과 Dependency Injection 있다
	주로 DI를 사용한다.

DI (Dependency Injection)
	- Constructor Injection, Setter Injection 이 있다.

Constructor Injection
	설정한 constructor 매개변수에 맞는 생성자를 호출한다.

	기본:
		-- appContext.xml
		<bean id="tv" class="polymorphism.SamsungTV">
			<constructor-arg ref="sony"></constructor-arg>
		</bean>		
		<bean id="sony" class="polymorphism.SonySpeaker"></bean>
		
		-- main.java 
		//SamsungTV(SonySpeaker sonySpeaker); //생성자 호출

	다중생성자:
		-- appContext.xml
		<bean id="tv" class="polymorphism.SamsungTV">
			<constructor-arg index="0" ref="sony"></constructor-arg>
			<constructor-arg  index="1" value="2700"></constructor-arg>
		</bean>
		<bean id="sony" class="polymorphism.SonySpeaker"></bean>
		
		-- main.java 
		//SamsungTV(SonySpeaker sonySpeaker, int price); //생성자 호출
			
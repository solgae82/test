크게 xml설정과 자바에서 설정으로 나눠볼 수 있다

1. xml로 Bean 설정

	Bean 클래스
		- bean 생성 클래스는 디폴트 생성자가 있어야 한다.(컨테이너가 기본적으로 디폴트 생성자를 호출해서 bean을 만든다)
		- 새로운 생성자로 호출할 수도 있다
			<bean id="samsung" class="polymorphism.SamsungTV">
				<constructor-arg ref="sony"></constructor-arg>
			</bean>
			<bean id="sony" class="polymorphism.SonySpeaker" />

	XML beans 태그들	
		- 크게 4가지 태그
			bean, description, alias, import 등
		import 태그 
			xml 파일 분할 역할
			예)
				<beans>
					<import resource="context-datasource.xml" />
					<import resource="context-transaction.xml" />
					..
				</beans>
		bean 태그 속성
			- context.xml
				<bean id="tv" name="test,test2;test3" class="polymorphism.SamsungTV"></bean>
				<alias name="test3" alias="atv"/>
			- test.java
				AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext.xml");
				TV tv = (TV)factory.getBean("atv"); //tv, test, test2, test3, atv 가능

			- id ="my" : 태그 대표 호출명
				ex) f.getBean("my");
			- name ="my,my2;m3" : id처럼 호출 가능, ',' 쉼표 또는 ';'세미콜론 구분자로 복수명 지정 가능
				ex) f.getBean("m3");
			- init-method = "initMethod" : 객체 생성 직후 호출 메소드명
			- destroy-method="destroyMethod" : 객체 삭제 직전 호출 메소드명
			- lazy-init="true" : 요청시 생성(true/false[기본])
			- scope="singleton" (기본) scope 속성 설정하지 않으면 singleton 으로 작동한다.
				"prototype" (요청시마다 생성)
					- prototype으로 설정하면 detryo-method를 호출 하지 않는다.
					(컨테이너가 객체 제거를 담당하지 않고, GC가 제거 하게 된다)
					
2. 자바 어노테이션으로 Bean 설정

	@Configuration , @Bean 
		- 자바로 bean 설정시
		
	@Component
		- 스테레오 타입 어노테이션
		패키지: org.springframework.stereotype.Component;

		- @Component 하위 어노테이션
			@Controller
				org.springframework.stereotype.Controller;
			@Service
				org.springframework.stereotype.Service;
			@Repository
				org.springframework.stereotype.Repository;

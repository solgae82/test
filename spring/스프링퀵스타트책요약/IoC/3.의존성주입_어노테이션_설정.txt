
IoC (제어의 역행)
	Dependency Lookup 과 Dependency Injection 있다. (주로 DI를 사용한다)

	- DI (Dependency Injection)
		Constructor Injection, Setter Injection 이 있다.

의존성 주입 어노테이션

	@Autowried 
		패키지: org.springframework.beans.factory.annotation.Autowired;
		사용할 수 있는 위치 : 
			멤버변수, setter메소드, 생성자, 일반 메소드
		빈 찾기 순서 : 
			타입 -> @Qualifier -> 이름 -> 예외
		스프링 포함 여부 : 기본 포함
		
		빈 명시적 지정 :
			@Qualifier 조합
				패키지: org.springframework.beans.factory.annotation.Qualifier
				사용법:
					@Autowired
					@Qualifier("id")
		
		Nullable 여부 : 해당 빈이 존재하지 않아서 주입 못할 경우, 에러 안 나게 설정 가능
			@Autowired(required=false)
		
	@Inject
		패키지: javax.inject.Inject
		사용할 수 있는 위치 :
			멤버변수, setter메소드, 생성자, 일반 메소드
		빈 찾기 순서 : 
			타입 -> @Qualifier,@Named -> 이름 -> 예외
		스프링 포함 여부 :포함 안됨
			- javax.inject 라이브러리 포함해야함
		
		빈 명시적 지정 :
			@Qualifier 조합 (되긴 하지만, 비추천)
				패키지 : 패키지: org.springframework.beans.factory.annotation.Qualifier
				사용법:
					@Autowired
					@Qualifier("id")
					
			@Named 조합 (같은 패키지이므로, 이걸로 추천)
				패키지 : javax.inject.Named
				사용법 :
					@Autowired
					@Named(value="id") //@Named("id") 가능
		
		Nullable 여부 : 해당 빈이 존재하지 않으면 에러 
		
	@Resource
		
		패키지: javax.annotation.Resource;		
		
		사용할 수 있는 위치 :
			멤버변수, setter메소드
		
		빈 찾기 순서 : 
			이름 -> 타입 -> @Qualifier -> 예외
		
		스프링 포함 여부: 포함 안됨
			- JDK8등에는 기본 포함되었으나, JDK9 이상부터는 지원 안됨
			- JDK9 이상 부터는 외부 라이러리로 포함해야함.
			메이븐 추가예제:
			<!-- https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api -->
			<dependency>
			    <groupId>javax.annotation</groupId>
			    <artifactId>javax.annotation-api</artifactId>
			    <version>1.3.2</version>
			</dependency>

		빈 명시적 지정 :
			@Resource(name="id")

		Nullable 여부 : 해당 빈이 존재하지 않으면 에러
		
@Primary 어노테이션
	패키지 : org.springframework.context.annotation.Primary
	
	- 동일한 타입의 빈이 여러 개 존재할 경우 
	해당 빈에 	@Primary을 사용해서 주입될 빈 지정 가능
	
	- @Qualifier, @Named 등으로 지정된게 @Primary 보다 우선

	예제)
		@Bean
		class Apple implements Product{}
		
		@Bean
		@Primary	
		class Lg implements Product{}
		..
		
		@Inject
		Product p; // Lg로 주입		

BindingResult 에 쌓인 에러를 직접 제어하는 방식


--------- LoginController.java

	@Controller
	public class LoginController {
		
		@RequestMapping("/testLoginForm.do")
		public String loginForm() throws Exception{
			
			return "test/testLoginForm";
		}
		
		@RequestMapping("/testLoginProc.do")
		public String testLoginProc(@ModelAttribute("user") UserVO user ,BindingResult bindResult 
		, RedirectAttributes rtt) throws Exception{
			
			new MemberRegistValidator().validate(user, bindResult); // 유효성 검증

			if(bindResult.hasErrors()) { //에러가 있다면
			
				List<ObjectError> globalErrorList = bindResult.getAllErrors(); //global 에러 리스트
				List<FieldError> fieldErrorList = bindResult.getFieldErrors(); //필드 에러 리스트
				
				rtt.addFlashAttribute("globalErrorList", globalErrorList); //한번만 담는다.
				rtt.addFlashAttribute("fieldErrorList", fieldErrorList); //한번만 담는다.
				
				return "redirect:/testLoginForm.do";
			}
			return "redirect:/";
		}
	}

--------- MemberRegistValidator.java

public class MemberRegistValidator implements Validator {

	@Override
	public boolean supports(Class<?> clazz) {
		
		return UserVO.class.isAssignableFrom(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {

		UserVO userVO = (UserVO) target;
		
		if(userVO.getUid() == null || userVO.getUid().trim().isEmpty()) {
			errors.rejectValue("uid", "required", "아이디 없다");
		}
		
		if(userVO.getUpw() == null || userVO.getUpw().trim().isEmpty()) {
			errors.rejectValue("upw", "required", "패스워드 없다");
		}
		
		//Errors 내부에 필드명 파라미터를 검색할 수 있게 되어 있다
		ValidationUtils.rejectIfEmpty(errors, "uid", "required","uid is empty");
		ValidationUtils.rejectIfEmpty(errors, "upw", "required","upw is empty");

	}

}

--------- testLoginForm.jsp

	<div style="width: 200px; margin: 0 auto;">
		<div>
		<c:forEach items="${fieldErrorList}" var="error">
			<strong>${error.getCode()} : ${error.getField()}: </strong>
			<spring:message code="${error.getCode()}" arguments="${error.getField()}" text="${error.getDefaultMessage()}"/><br />
		</c:forEach>
		</div>
		<form  id="f" name="f" action="<c:url value="/testLoginProc.do"/>" method="post">
			
			ID : <input type="text" id="uid" name="uid" value="" /> <br />
			PW : <input type="text" id="upw" name="upw" value="" /> <br />
					
			<div>
				<button type="submit" id="send">로그인</button>
			</div>
		</form>
	</div>


--------- 기본 출력

	입력 값 없이 로그인 버튼 누르면 
	에러가 체크 후 RedirectAttributes 에 담겨  다시 현 페이지로 돌아와 에러 리스트를 출력한다
	메시지 소스가 설정 되어 있지 않아서, 기본 설정한 디폴트 메시지만 출력된다.

	출력 :

		<strong>required : uid: </strong>
		아이디 없다
		<br />
	
		<strong>required : upw: </strong>
		패스워드 없다
		<br />
	
		<strong>required : uid: </strong>
		uid is empty
		<br />
	
		<strong>required : upw: </strong>
		upw is empty
		<br />


--------- 메시지 설정 후 출력

	root-context.xml 

		<!--  메시지 설정 -->
		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basenames">
				<list>
					<value>message.error</value>
				</list>
			</property>
			<property name="defaultEncoding" value="UTF-8"></property>
		</bean>


	/message/error.properties

		required={0} 필수입니다



	출력 :

			<strong>required : uid: </strong>
			uid 필수입니다
			<br />
		
			<strong>required : upw: </strong>
			upw 필수입니다
			<br />
		
			<strong>required : uid: </strong>
			uid 필수입니다
			<br />
		
			<strong>required : upw: </strong>
			upw 필수입니다
			<br />



windows 프로그래밍이라면

VC++ MFC

C++ QT

C# winform

C# WCF

시장에서 널리 쓰이는 편입니다.



VC++ 배우는 방법은 보통

C -> C++ -> Win API / MFC 이 정석입니다.

이 3단계는 관계가 깊어서(결합도가 커서) 끊어서 배우면 뭔가 이상할 정도입니다.



VC++ 아니고 C++ 이면 QT또는 wxwidget등을 쓰는데

C -> C++ -> Win API / QT(wxwidget) 순서로 하시면 됩니다.

QT는 크로스 플랫폼 GUI라서 MFC가 윈도우에서만 실행할 수 있는 것에 비해

QT가 지원하는 OS 에서 실행이 가능합니다. ( https://doc.qt.io/qt-5.10/supported-platforms.html  )



C#은 JAVA 처럼 먼저 배워야 하는 언어는 필요 없다고 생각하지만

감각(소질 등) 이 없는 경우 최소 C는 먼저 배우고 가는 게 더 빠르게 배우는 길이라는 것이

보통의 의견입니다.



또한 C#으로 Mono 혹은 .net core를 사용하면

크로스 플랫폼용 gui 애플리케이션을 작성할 수도 있습니다.

WCF는 강력하지만 윈도우즈 OS에서만 사용할 수 있습니다.



또한 어떤 언어를 배우던 windows OS 하고 네트워크, 자료구조는

초보딱지를 떼고 필수로 공부하셔야 나중에 고생 안 합니다.



객체지향과 알고리즘은 처음부터 하면 재미가 없어 지루하니

어느정도 뇌내코딩이 가능해진 수준이 되었을 때 코드가 더러워 보이기 시작할때

좀 더 효율적인 코드를 작성하고 싶다, 코드를 깨끗하게 작성해야겠다는

동기부여가 있을 때 배우면 좀 더 수월하게 배울 수 있습니다. 

-------------------

Windows API 를 사용하는 방법이 있습니다.
마소가 제공하는 방대한 API를 이용하여 직접 윈도우를 생성한 뒤에 메세지 루프 돌려서 GUI를 처리하는 방법이 있습니다. 
<Windows.h> 안에 모든 기능이 몰빵되어 있으니 입맛대로 골라 잡수시면 됩니다.

MFC를 사용하는 방법이 있습니다.
Windows API는 C를 기준으로 만든거기도 하고, 설계가 요상하게 된데다 그놈의 레거시 지원 때문에 다루기가 매우 더럽습니다. 
그래서 마소에서 C++에 맞춰 WinAPI를 래핑하여 만든게 MFC(Microsoft Foundation Class)입니다. 
Visual Studio에서 새 프로젝트 생성을 누르면 설치 당시에 MFC를 깔았다는 전제 하에 MFC 프로젝트를 생성할 수 있습니다. 
하지만 이것도 누가 마소에서 만든거 아니랄까봐 쓰다보면 정말 더럽습니다. 그리고 현재는 거의 쓰는 곳도 없다시피 합니다. – 그러니까 안 쓰는게 좋습니다.

Qt, wxWidgets, GTK 등의 라이브러리를 이용하는 방법이 있습니다.
이 경우에는 윈도우 뿐만이 아닌 리눅스, Mac OS X에서 작동하는 GUI 프로그램을 만들 수 있습니다. 
MFC나 WinAPI보다는 굉장히 쓰기 편리합니다.

참고로, 말씀하신 C# 윈폼은 .NET Framework에 상기한 Windows API를 래핑하여 집어넣은 것입니다.
따라서 생짜 WinAPI를 사용하는 것 보다는 굉장히 쓰기 편리하죠. 
게다가 C++이 아닌 C#이니 생각할 것도 적어 생산성 또한 월등합니다. (무엇보다도, 굉장히 잘 만들어진 폼 디자이너를 제공합니다!)

하지만 C++에서 굴러가는 코드를 C#에서 굴려야 하니 마샬링이 필요하게 되고, 
이 과정에서 오버헤드가 적잖게 발생하기에 성능면에서 어느정도 손해를 보게 됩니다. 
그래서 아예 전부 C++로 짜기도 합니다. 애초에 이게 정석이기도 하고요.

마지막으로, Windows API를 이용하여 GUI를 작성하게 되면 굉장히 짜증나고 힘들지만,
한편으로는 윈도우라는 시스템이(정확히는 GUI 부분이) 어떤 식으로 굴러가는지에 대해 심층적으로 탐구해 볼 수 있습니다. 
한번 쯤 해보는 것도 나쁘지 않다고 생각합니다.